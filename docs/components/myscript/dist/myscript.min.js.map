{"version":3,"sources":["myscript.js","MyScript.js","point.js","rectangle.js","penParameters.js","mathUtils.js","abstractWSMessage.js","abstractComponent.js","strokeComponent.js","characterInputComponent.js","characterInputComponentAlternate.js","abstractParameter.js","abstractRecognitionInput.js","abstractRecognitionData.js","recognitionLanguagesData.js","abstractStartRequestWSMessage.js","abstractContinueRequestWSMessage.js","challengeRequestWSMessage.js","initRequestWSMessage.js","resetRequestWSMessage.js","abstractTextInputComponent.js","charInputComponent.js","stringInputComponent.js","textInputUnit.js","textParameter.js","textProperties.js","textRecognitionInput.js","textRecognitionData.js","textStartRequestWSMessage.js","textContinueRequestWSMessage.js","shapeParameter.js","shapeRecognitionInput.js","shapeRecognitionData.js","mathParameter.js","mathRecognitionInput.js","mathRecognitionData.js","mathStartRequestWSMessage.js","mathContinueRequestWSMessage.js","abstractMusicInputComponent.js","musicAccidentalInputComponent.js","musicArpeggiateInputComponent.js","musicBarInputComponent.js","musicBeamInputComponent.js","musicClefInputComponent.js","musicDecorationInputComponent.js","musicDotsInputComponent.js","musicHeadInputComponent.js","musicLedgerLineInputComponent.js","musicRestInputComponent.js","musicStemInputComponent.js","musicTieOrSlurInputComponent.js","musicTimeSignatureInputComponent.js","musicStaff.js","musicParameter.js","musicRecognitionInput.js","musicRecognitionData.js","analyzerParameter.js","analyzerRecognitionInput.js","analyzerRecognitionData.js","abstractResult.js","abstractRecoResponseWSMessage.js","challengeResponseWSMessage.js","errorResponseWSMessage.js","initResponseWSMessage.js","resetResponseWSMessage.js","textInkRange.js","textCandidate.js","textDocument.js","textResult.js","textSegment.js","textTagItem.js","textResponseWSMessage.js","abstractShapePrimitive.js","shapeCandidate.js","shapeDocument.js","shapeEllipse.js","shapeErased.js","shapeInkRange.js","shapeLine.js","shapeNotRecognized.js","shapeRecognized.js","shapeResult.js","shapeScratchOut.js","shapeSegment.js","mathNode.js","mathNonTerminalNode.js","mathResultElement.js","mathRuleNode.js","mathDocument.js","mathInkRange.js","mathOfficeOpenXmlMathResultElement.js","mathLaTexResultElement.js","mathMathMLResultElement.js","mathResult.js","mathScratchOut.js","mathSymbolTreeResultElement.js","mathTerminalNode.js","mathTerminalNodeCandidate.js","mathBorderData.js","mathBorderNonTerminalNode.js","mathCellData.js","mathCellNonTerminalNode.js","mathTableData.js","mathTableRuleNode.js","mathResponseWSMessage.js","musicElement.js","musicResultElement.js","musicAccidental.js","musicAnnotation.js","musicArpeggiate.js","musicBar.js","musicBeam.js","musicChord.js","musicClef.js","musicDecoration.js","musicDocument.js","musicDots.js","musicHead.js","musicInputRange.js","musicKeySignature.js","musicKeySignatureData.js","musicLedgerLine.js","musicNote.js","musicPart.js","musicPitchData.js","musicRest.js","musicResult.js","musicScore.js","musicScoreTreeResultElement.js","musicScratchOut.js","musicSlur.js","musicStem.js","musicTie.js","musicTimeModificationData.js","musicTimeSignature.js","musicTupletBracket.js","musicTuplet.js","musicXMLResultElement.js","analyzerElement.js","analyzerCell.js","analyzerCellData.js","analyzerDocument.js","analyzerElementReference.js","analyzerGroup.js","analyzerInkRange.js","analyzerLine.js","analyzerLineData.js","analyzerRecognizedStroke.js","analyzerResult.js","analyzerStrokeType.js","analyzerTable.js","analyzerTableData.js","analyzerTextLine.js","analyzerTextLineData.js","analyzerUnderline.js","analyzerUnderlineData.js","networkInterface.js","networkWSInterface.js","abstractRecognizer.js","abstractWSRecognizer.js","textRecognizer.js","textWSRecognizer.js","shapeRecognizer.js","mathRecognizer.js","mathWSRecognizer.js","musicRecognizer.js","analyzerRecognizer.js","abstractRenderer.js","textRenderer.js","shapeRenderer.js","mathRenderer.js","musicRenderer.js","analyzerRenderer.js","imageRenderer.js","inkGrabber.js","inkPaper.js"],"names":["CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","window","Event","Function","bind","oThis","this","TypeError","aArgs","Array","slice","call","arguments","fToBind","fNOP","fBound","apply","concat","MyScript","RecognitionType","TEXT","MATH","SHAPE","MUSIC","ANALYZER","InputMode","CURSIVE","ISOLATED","SUPERIMPOSED","VERTICAL","InputType","CHAR","WORD","SINGLE_LINE_TEXT","MULTI_LINE_TEXT","ResultDetail","CHARACTER","ResultType","Math","LATEX","MATHML","SYMBOLTREE","OFFICEOPENXMLMATH","Music","MUSICXML","SCORETREE","Protocol","WS","REST","scope","Point","obj","x","y","getX","setX","getY","setY","Rectangle","width","height","getTopLeftPoint","point","setTopLeftPoint","topLeftPoint","getWidth","setWidth","getHeight","setHeight","PenParameters","color","rectColor","font","decoration","pressureType","alpha","getColor","setColor","getRectColor","setRectColor","getFont","setFont","getDecoration","setDecoration","MathUtils","getEllipseArcRect","center","maxRadius","minRadius","orientation","startAngle","sweepAngle","angle","z1","z2","z3","z4","cosAlpha","sinAlpha","n","xList","yList","i","xMin","xMax","yMin","yMax","angleStep","sortFloat","a","b","cos","sin","abs","atan2","push","sort","length","getLineRect","firstPoint","lastPoint","xFirst","xLast","min","max","yFirst","yLast","getBoundingRect","boundingBoxes","rectangle","AbstractWSMessage","type","getType","AbstractComponent","setType","getBoundingBox","Error","setBoundingBox","boundingBox","StrokeComponent","t","p","d","l","_computeDistance","xArray","yArray","lastIndexPoint","distance","sqrt","pow","isNaN","_computeLength","lArray","_computePressure","ratio","pressure","parseFloat","_filterPointByAcquisitionDelta","delta","ret","constructor","toJSON","addX","addY","getT","setT","addT","getLength","toFixed","precision","getP","setP","addP","getD","setD","addD","getL","setL","addL","addPoint","getLastIndexPoint","getPointByIndex","index","CharacterInputComponent","alternates","CharacterInputComponentAlternate","getAlternates","setAlternates","addAlternate","alternate","probability","getAlternate","setAlternate","getProbability","setProbability","AbstractParameter","AbstractRecognitionInput","AbstractRecognitionData","getApplicationKey","applicationKey","setApplicationKey","getInstanceId","instanceId","setInstanceId","getHmac","hmac","setHmac","getRecognitionInput","setRecognitionInput","input","RecognitionLanguagesData","getInputMode","inputMode","setInputMode","AbstractStartRequestWSMessage","AbstractContinueRequestWSMessage","ChallengeRequestWSMessage","getChallenge","challenge","setChallenge","getHmacSignature","setHmacSignature","InitRequestWSMessage","ResetRequestWSMessage","AbstractTextInputComponent","CharInputComponent","character","getLabel","setLabel","label","StringInputComponent","string","TextInputUnit","textInputType","components","getInputType","setInputType","inputType","getComponents","inkRange","TextInkRange","getStartComponent","getEndComponent","setComponents","TextParameter","textProperties","TextProperties","language","textInputMode","contentTypes","subsetKnowledges","userResources","userLkWords","resultDetail","getLanguage","setLanguage","getContentTypes","setContentTypes","getSubsetKnowledges","setSubsetKnowledges","getUserResources","setUserResources","getUserLkWords","setUserLkWords","getResultDetail","setResultDetail","getTextProperties","setTextProperties","textCandidateListSize","wordCandidateListSize","wordPredictionListSize","wordCompletionListSize","characterCandidateListSize","discardCaseVariations","discardAccentuationVariations","disableSpatialOrdering","glyphDistortion","enableOutOfLexicon","spellingDistortion","getTextCandidateListSize","setTextCandidateListSize","getWordCandidateListSize","setWordCandidateListSize","getWordPredictionListSize","setWordPredictionListSize","getWordCompletionListSize","setWordCompletionListSize","getCharacterCandidateListSize","setCharacterCandidateListSize","getDiscardCaseVariations","setDiscardCaseVariations","getDiscardAccentuationVariations","setDiscardAccentuationVariations","getDisableSpatialOrdering","setDisableSpatialOrdering","getGlyphDistortion","setGlyphDistortion","getEnableOutOfLexicon","setEnableOutOfLexicon","getSpellingDistortion","setSpellingDistortion","TextRecognitionInput","getParameters","textParameter","setParameters","parameters","getInputUnits","inputUnits","getStartUnit","getEndUnit","setInputUnits","TextRecognitionData","textInput","JSON","stringify","TextStartRequestWSMessage","TextContinueRequestWSMessage","ShapeParameter","rejectDetectionSensitivity","doBeautification","getRejectDetectionSensitivity","setRejectDetectionSensitivity","hasBeautification","setBeautification","ShapeRecognitionInput","ShapeRecognitionData","shapeInput","MathParameter","resultTypes","columnarOperation","scratchOutDetectionSensitivity","getResultTypes","setResultTypes","isColumnar","setColumnar","columnar","getScratchOutDetectionSensitivity","setScratchOutDetectionSensitivity","MathRecognitionInput","MathRecognitionData","mathInput","MathStartRequestWSMessage","MathContinueRequestWSMessage","AbstractMusicInputComponent","MusicAccidentalInputComponent","value","getValue","setValue","MusicArpeggiateInputComponent","MusicBarInputComponent","MusicBar","MusicBeamInputComponent","MusicBeam","MusicClefInputComponent","MusicClef","MusicDecorationInputComponent","MusicDecoration","MusicDotsInputComponent","MusicHeadInputComponent","MusicLedgerLineInputComponent","MusicRestInputComponent","MusicStemInputComponent","MusicTieOrSlurInputComponent","MusicTimeSignatureInputComponent","MusicStaff","count","gap","top","getCount","setCount","getTop","setTop","getGap","setGap","MusicParameter","divisions","staff","getStaff","setStaff","getDivisions","setDivisions","MusicRecognitionInput","MusicRecognitionData","musicInput","AnalyzerParameter","coordinateResolution","getTextParameters","setTextParameters","getCoordinateResolution","setCoordinateResolution","AnalyzerRecognitionInput","parameter","AnalyzerRecognitionData","analyzerInput","AbstractResult","getDocument","result","AbstractRecoResponseWSMessage","ChallengeResponseWSMessage","ErrorResponseWSMessage","error","getError","InitResponseWSMessage","ResetResponseWSMessage","cpt","split","startUnit","Number","startComponent","startPoint","endUnit","endComponent","endPoint","getStartPoint","getEndPoint","TextCandidate","flags","children","normalizedScore","spellingDistortionRatio","j","TextSegment","getNormalizedScore","getResemblanceScore","resemblanceScore","getSpellingDistortionRatio","getFlags","getChildren","TextDocument","tagItems","wordCandidates","charCandidates","textSegmentResult","TextTagItem","k","getTagItems","getWordSegments","getWordSegment","inkRanges","getInkRanges","getCharSegments","getCharSegment","getTextSegment","hasScratchOutResults","TextResult","candidates","selectedCandidateIdx","ranges","isArray","getCandidates","getSelectedCandidateIdx","getSelectedCandidate","tagType","getTagType","TextResponseWSMessage","AbstractShapePrimitive","beginDecoration","beginTangentAngle","endDecoration","endTangentAngle","isLine","isEllipse","hasBeginDecoration","hasEndDecoration","getBeginDecoration","getEndDecoration","getBeginTangentAngle","getEndTangentAngle","ShapeCandidate","isErased","isScratchOut","isNotRecognized","isRecognized","ShapeDocument","segments","ShapeSegment","getSegments","currentSeg","currentCandidate","ShapeScratchOut","ShapeEllipse","getCenter","getMinRadius","getMaxRadius","getOrientation","getStartAngle","getSweepAngle","ShapeErased","ShapeInkRange","firstStroke","lastStroke","getFirstStroke","getLastStroke","getFirstPoint","getLastPoint","ShapeLine","ShapeNotRecognized","ShapeRecognized","primitives","normalizedRecognitionScore","getPrimitives","getNormalizedRecognitionScore","ShapeResult","elementType","uniqueID","selectedCandidateIndex","getElementType","getUniqueId","MathNode","name","getName","MathNonTerminalNode","selectedCandidate","MathTerminalNode","MathRuleNode","MathCellNonTerminalNode","MathBorderNonTerminalNode","MathTableRuleNode","MathResultElement","isLaTex","isMathMl","isSymbolTree","childInkRanges","MathDocument","results","scratchOutResults","MathMathMLResultElement","MathLaTexResultElement","MathSymbolTreeResultElement","MathOfficeOpenXmlMathResultElement","MathScratchOut","getResultElements","getScratchOutResults","MathInkRange","component","firstItem","lastItem","getComponent","getFirstItem","getLastItem","MathResult","erasedInkRanges","getErasedInkRanges","root","getRoot","MathTerminalNodeCandidate","MathBorderData","position","start","stop","getPosition","getStart","getStop","data","getData","MathCellData","columnStart","columnStop","rowStart","rowStop","getColumnStart","getColumnStop","getRowStart","getRowStop","MathTableData","columnCount","rowCount","getColumnCount","getRowCount","MathResponseWSMessage","MusicElement","inputRanges","getInputRanges","MusicResultElement","isMusicXML","isScoreTree","MusicAccidental","MusicAnnotation","MusicArpeggiate","decorations","repeatDirection","style","getRepeatDirection","setRepeatDirection","getStyle","setStyle","getDecorations","setDecorations","slope","placement","leftCount","rightCount","getSlope","setSlope","getPlacement","setPlacement","getLeftCount","setLeftCount","getRightCount","setRightCount","MusicChord","notes","beamTypes","ledgerLines","startSlurs","stopSlurs","duration","arpeggiate","startBeam","stopBeam","stem","MusicStem","MusicNote","MusicLedgerLine","m","MusicSlur","getDuration","getArpeggiate","getStartBeam","getStopBeam","getStem","getNotes","getBeamTypes","getLedgerLines","getStartSlurs","getStopSlurs","symbol","octave","line","yAnchor","getYAnchor","setYAnchor","getLine","setLine","getOctave","setOctave","getSymbol","setSymbol","MusicDocument","MusicXMLResultElement","MusicScoreTreeResultElement","MusicScratchOut","MusicDots","MusicHead","MusicInputRange","MusicKeySignature","accidentals","signature","MusicKeySignatureData","getSignature","getAccidentals","fifths","cancel","getFifths","getCancel","accidental","dots","head","pitch","MusicPitchData","startTie","MusicTie","stopTie","startTuplet","MusicTuplet","stopTuplet","timeModification","MusicTimeModificationData","getAccidental","getDots","getHead","getPitch","getStartTie","getStopTie","getStartTuplet","getStopTuplet","getTimeModification","MusicPart","elements","MusicRest","MusicTimeSignature","MusicTupletBracket","getElements","alteration","step","getAlteration","getStep","MusicResult","MusicScore","parts","getParts","score","getScore","erasedInputRanges","getErasedInputRanges","actual","normal","getActual","getNormal","bottom","getBottom","brackets","number","getNumber","getBrackets","AnalyzerElement","AnalyzerCell","AnalyzerCellData","firstColumn","lastColumn","firstRow","lastRow","topBorder","bottomBorder","leftBorder","rightBorder","getFirstColumn","getLastColumn","getFirstRow","getLastRow","hasTopBorder","hasBottomBorder","hasLeftBorder","hasRightBorder","AnalyzerDocument","textLines","shapes","tables","groups","AnalyzerTextLine","AnalyzerTable","AnalyzerGroup","getTextLines","getShapes","getTables","getGroups","AnalyzerElementReference","elementReferences","getElementReferences","AnalyzerInkRange","stroke","AnalyzerRecognizedStroke","getStroke","AnalyzerLine","AnalyzerLineData","p1","p2","getP1","getP2","AnalyzerResult","AnalyzerStrokeType","getInkRange","lines","cells","AnalyzerTableData","getLines","getCells","underlineList","AnalyzerTextLineData","AnalyzerUnderline","getTextDocument","getUnderlineList","baselinePos","toMidline","textHeight","justificationType","getBaselinePos","getToMidline","getTextHeight","getJustificationType","AnalyzerUnderlineData","firstCharacter","lastCharacter","getFirstCharacter","getLastCharacter","Q","NetworkInterface","parseURL","url","queries","parser","createElement","searchObject","href","search","replace","protocol","host","hostname","port","pathname","hash","parse","req","responseText","e","transformRequest","str","encodeURIComponent","join","xhr","Promise","resolve","reject","notify","onStateChange","request","readyState","status","onLoad","onError","onProgress","loaded","total","XMLHttpRequest","open","withCredentials","setRequestHeader","onerror","onprogress","onload","onreadystatechange","send","get","src","put","post","NetworkWSInterface","setUrl","close","_url","getUrl","setCallback","callback","_callback","getCallback","getState","_getWebSocketState","_socket","isClosed","isClosing","isOpen","isConnecting","_openWebSocket","code","reason","_closeWebSocket","state","_sendMessage","onOpen","onClose","onMessage","socket","WebSocket","onopen","onclose","onmessage","message","CryptoJS","AbstractRecognizer","getProtocol","setSSL","_ssl","getSSL","ssl","getHost","setHost","getPrecision","setPrecision","getAvailableLanguageList","then","response","doRestRecognition","hmacKey","_filterStrokes","_doTextRecognition","_doShapeRecognition","_doMathRecognition","_doMusicRecognition","_doAnalyzerRecognition","clearRestRecognition","instanceSessionId","_clearShapeRecognition","_fillData","_computeHmac","jsonInput","HmacSHA512","toString","enc","Hex","forEach","currentValue","AbstractWSRecognizer","_wsInterface","sendMessage","initWSRecognition","takeUpHmacChallenge","resetWSRecognition","TextRecognizer","doSimpleRecognition","unit","TextWSRecognizer","startWSRecognition","continueWSRecognition","ShapeRecognizer","clearShapeRecognitionSession","MathRecognizer","MathWSRecognizer","MusicRecognizer","AnalyzerRecognizer","AbstractRenderer","context","penParameters","showBoundingBoxes","typeset","_computeLinksPoints","radius","_computeMiddlePoint","point1","point2","_computeAxeAngle","begin","end","_fill","fillStyle","fill","_renderStroke","beginPath","arc","PI","_renderLine","nbquadratics","_renderQuadratic","_renderFinal","closePath","ARCSPLIT","linkPoints","moveTo","newAngle","lineTo","linkPoints1","linkPoints2","ctrl","linkPoints3","quadraticCurveTo","getContext","getShowBoundingBoxes","setShowBoundingBoxes","isTypesetting","setTypeset","clear","clearRect","canvas","drawRecognitionResult","recognitionResult","drawComponents","drawComponent","_drawStroke","_drawCharacter","TextRenderer","_drawTextComponent","_drawChar","_drawString","char","ShapeRenderer","drawShapes","lastComponents","processedComponents","_extractComponents","indexOf","_drawShapePrimitive","drawShapeSegment","segment","candidate","_drawShapeRecognized","drawShapeNotRecognized","drawShapePrimitive","primitive","shapeRecognized","_drawShapeEllipse","_drawShapeLine","shapeLine","_drawLine","_drawArrowHead","shapeEllipse","points","_drawEllipseArc","centerPoint","floor","boundariesPoints","save","strokeStyle","lineWidth","restore","_phi","headPoint","beta","firstPointIndex","lastPointIndex","ceil","strokeIndex","currentStroke","currentStrokePointCount","newStroke","pointIndex","MathRenderer","notScratchOutComponents","_filterScratchOut","scratchedStroke","MusicRenderer","_removeMusicScratchOut","drawStaff","_drawStaff","_drawMusicNode","staffHeight","staves","offset","clientWidth","_drawAccidental","_drawArpeggiate","_drawBar","_drawBeam","_drawClef","_drawDecoration","_drawDots","_drawHead","_drawLedgerLine","_drawRest","_drawStem","_drawTieOrSlur","_drawTimeSignature","bar","beam","clef","imageObj","Image","drawImage","ledgerLine","rest","tieOrSlur","timeSignature","cloneComponents","componentsToRemove","z","splice","AnalyzerRenderer","shapeRenderer","getShapeRenderer","setShapeRenderer","_drawTables","_drawTextLines","textLine","text","_drawText","underlines","_drawUnderline","baseline","textAlign","fillText","underline","topLeft","textMetrics","measureText","substring","x1","x2","ImageRenderer","console","log","InkGrabber","writing","isWriting","startCapture","continueCapture","endCapture","InkPaper","element","options","_element","_instanceId","_timerId","_initialized","_lastSentComponentIndex","_components","_redoComponents","isStarted","resultCallback","changeCallback","tempCanvas","_createCanvas","canvasRatio","_getCanvasRatio","removeChild","_captureCanvas","_inkGrabber","_renderingCanvas","_textRenderer","_mathRenderer","_shapeRenderer","_musicRenderer","_analyzerRenderer","_textRecognizer","_mathRecognizer","_shapeRecognizer","_musicRecognizer","_analyzerRecognizer","_textWSRecognizer","_handleMessage","_mathWSRecognizer","_attachListeners","timeout","textParameters","mathParameters","shapeParameters","musicParameters","analyzerParameters","idx","setMathParameters","setShapeParameters","setMusicParameters","setAnalyzerParameters","setProtocol","setTimeout","setHmacKey","setPenParameters","parent","id","querySelectorAll","appendChild","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","_getCoordinates","container","changedTouches","rect","getBoundingClientRect","clientX","left","clientLeft","clientY","clientTop","timeStamp","scale","_initRenderingCanvas","_selectedRecognizer","_selectedRESTRecognizer","_selectedWSRecognizer","_selectedRenderer","getTimeout","getHmacKey","getMathParameters","getShapeParameters","getMusicParameters","getAnalyzerParameters","getPenParameters","getAvailableLanguages","_onResult","getRenderer","getInkGrabber","getRecognizer","setChangeCallback","setResultCallback","recognize","lastInput","_renderResult","_continueRESTRecognition","_startRESTRecognition","_clearRESTRecognition","canUndo","undo","updatedModel","pop","_onChange","clearTimeout","canRedo","redo","addDomListener","useCapture","myfunction","addEventListener","_down","sizeChanged","clientHeight","alert","_move","_up","err","dispatchEvent","undoLength","redoLength","pointerId","self","preventDefault","stopPropagation","coord","replayNeeded","getStats","stats","strokesCount","pointsCount","byteSize","humanSize","humanUnit","strokeNb","getInkAsImageData","marginX","marginY","componentCopy","minX","maxX","minY","maxY","pointCount","pointNb","currentX","currentY","nonDisplayCanvas","ctx","imageRendered","getImageData","getInkAsPng","imageRenderingCanvas","display","imageDataToRender","putImageData","toDataURL"],"mappings":"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","file":"myscript.min.js","sourcesContent":["/**\n * Polyfills\n */\n(function () {\n    /**\n     * CustomEvent\n     */\n    function CustomEvent ( event, params ) {    // jshint ignore:line\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent( 'CustomEvent' );\n        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n\n    /**\n     * bind()\n     */\n    if (!Function.prototype.bind) {\n        Function.prototype.bind = function(oThis) {\n            if (typeof this !== 'function') {\n                // closest thing possible to the ECMAScript 5\n                // internal IsCallable function\n                throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n            }\n\n            var aArgs   = Array.prototype.slice.call(arguments, 1),\n                fToBind = this,\n                fNOP    = function() {},\n                fBound  = function() {\n                    return fToBind.apply(this instanceof fNOP ? this : oThis,\n                        aArgs.concat(Array.prototype.slice.call(arguments)));\n                };\n\n            fNOP.prototype = this.prototype;\n            fBound.prototype = new fNOP(); // jshint ignore:line\n\n            return fBound;\n        };\n    }\n})();\n\n/**\n * MyScript javascript library\n *\n * @module MyScript\n * @requires Q\n * @requires CryptoJS\n */\n/*global MyScript:true */\nMyScript = {\n    RecognitionType: {\n        TEXT: 'TEXT',\n        MATH: 'MATH',\n        SHAPE: 'SHAPE',\n        MUSIC: 'MUSIC',\n        ANALYZER: 'ANALYZER'\n    },\n    InputMode: {\n        CURSIVE: 'CURSIVE',\n        ISOLATED: 'ISOLATED',\n        SUPERIMPOSED: 'SUPERIMPOSED',\n        VERTICAL: 'VERTICAL'\n    },\n    InputType: {\n        CHAR: 'CHAR',\n        WORD: 'WORD',\n        SINGLE_LINE_TEXT: 'SINGLE_LINE_TEXT',\n        MULTI_LINE_TEXT: 'MULTI_LINE_TEXT'\n    },\n    ResultDetail: {\n        TEXT: 'TEXT',\n        WORD: 'WORD',\n        CHARACTER: 'CHARACTER'\n    },\n    ResultType: {\n        Math: {\n            LATEX: 'LATEX',\n            MATHML: 'MATHML',\n            SYMBOLTREE: 'SYMBOLTREE',\n            OFFICEOPENXMLMATH : 'OFFICEOPENXMLMATH'\n        },\n        Music: {\n            MUSICXML: 'MUSICXML',\n            SCORETREE: 'SCORETREE'\n        }\n    },\n    Protocol: {\n        WS: 'WebSocket',\n        REST: 'REST'\n    }\n};\n\n\n\n(function (scope) {\n    /**\n     * Point\n     *\n     * @class Point\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Point(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Point.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Point.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Point.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Point.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    // Export\n    scope.Point = Point;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Rectangle\n     *\n     * @class Rectangle\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Rectangle(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n            this.width = obj.width;\n            this.height = obj.height;\n        }\n    }\n\n    /**\n     * Get top-left x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Rectangle.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set top-left x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Rectangle.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get top-left y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Rectangle.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set top-left y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Rectangle.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    Rectangle.prototype.getTopLeftPoint = function () {\n        var point = new scope.Point();\n        point.setX(this.x);\n        point.setY(this.y);\n        return point;\n    };\n\n    /**\n     * Set top-left point\n     *\n     * @method setTopLeftPoint\n     * @param {Point} topLeftPoint\n     */\n    Rectangle.prototype.setTopLeftPoint = function (topLeftPoint) {\n        this.x = topLeftPoint.getX();\n        this.y = topLeftPoint.getY();\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    Rectangle.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    Rectangle.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    Rectangle.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Set height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    Rectangle.prototype.setHeight = function (height) {\n        this.height = height;\n    };\n\n    // Export\n    scope.Rectangle = Rectangle;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for both input and output canvas draw.\n     *\n     * @class PenParameters\n     * @constructor\n     */\n    function PenParameters(obj) {\n        this.color = 'rgba(0, 0, 0, 0.9)';\n        this.rectColor = 'rgba(0, 0, 0, 0.2)';\n        this.font = 'Times New Roman';\n        this.decoration = 'normal';\n        this.width = 4;\n        this.pressureType = 'SIMULATED';\n        this.alpha = '1.0';\n        if (obj) {\n            this.color = obj.color;\n            this.rectColor = obj.rectColor;\n            this.font = obj.font;\n            this.decoration = obj.decoration;\n            this.width = obj.width;\n            this.pressureType = obj.pressureType;\n            this.alpha = obj.alpha;\n        }\n    }\n\n    /**\n     * Get the color renderer parameter\n     *\n     * @method getColor\n     * @returns {String} The color of the ink\n     */\n    PenParameters.prototype.getColor = function () {\n        return this.color;\n    };\n\n    /**\n     * Set the color renderer parameter\n     *\n     * @method setColor\n     * @param {String} color\n     */\n    PenParameters.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    /**\n     * Get the rect renderer parameter\n     *\n     * @method getRectColor\n     * @returns {String} the rectangle color\n     */\n    PenParameters.prototype.getRectColor = function () {\n        return this.rectColor;\n    };\n\n    /**\n     * Set the rect renderer parameter\n     *\n     * @method setRectColor\n     * @param {String} rectColor\n     */\n    PenParameters.prototype.setRectColor = function (rectColor) {\n        this.rectColor = rectColor;\n    };\n\n    /**\n     * Get the font renderer parameter\n     *\n     * @method getFont\n     * @returns {String} The font\n     */\n    PenParameters.prototype.getFont = function () {\n        return this.font;\n    };\n\n    /**\n     * Set the font renderer parameter\n     *\n     * @method setFont\n     * @param {String} font\n     */\n    PenParameters.prototype.setFont = function (font) {\n        this.font = font;\n    };\n\n    /**\n     * Get the decoration renderer parameter\n     *\n     * @method getDecoration\n     * @returns {String} The decoration\n     */\n    PenParameters.prototype.getDecoration = function () {\n        return this.decoration;\n    };\n\n    /**\n     * Set the decoration renderer parameter\n     *\n     * @method setDecoration\n     * @param {String} decoration\n     */\n    PenParameters.prototype.setDecoration = function (decoration) {\n        this.decoration = decoration;\n    };\n\n    /**\n     * Get the width renderer parameter\n     *\n     * @method getWidth\n     * @returns {Number} The ink width\n     */\n    PenParameters.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set the width renderer parameter\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    PenParameters.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    // Export\n    scope.PenParameters = PenParameters;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * The mathUtil class is use to calculate lines\n     *\n     * @class MathUtil\n     * @constructor\n     */\n    function MathUtils() {\n    }\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains an ellipse arc.\n     *\n     * @method getEllipseArcRect\n     * @param {Point} center\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {Number} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @returns {Rectangle}\n     */\n    MathUtils.getEllipseArcRect = function (center, maxRadius, minRadius, orientation, startAngle, sweepAngle) {\n\n        var angleStep = 0.02, // angle delta between interpolated points on the arc, in radian\n            angle, // angle\n            alpha, // angle\n            z1,\n            z2,\n            z3,\n            z4,\n            cosAlpha,\n            sinAlpha,\n            n,\n            xList,\n            yList,\n            i,\n            x,\n            y,\n            xMin,\n            xMax,\n            yMin,\n            yMax,\n            sortFloat = function (a, b) {\n                return a - b;\n            };\n\n        z1 = z2 = Math.cos(orientation);\n        z3 = z4 = Math.sin(orientation);\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        n = Math.abs(sweepAngle) / angleStep;\n\n        xList = [];\n        yList = [];\n\n        for (i = 0; i <= n; i++) {\n\n            angle = startAngle + (i / n) * sweepAngle;\n            alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n            cosAlpha = Math.cos(alpha);\n            sinAlpha = Math.sin(alpha);\n\n            // current point\n            x = center.x + z1 * cosAlpha - z4 * sinAlpha;\n            y = center.y + z2 * sinAlpha + z3 * cosAlpha;\n\n            xList.push(x);\n            yList.push(y);\n        }\n\n        xList.sort(sortFloat);\n        yList.sort(sortFloat);\n\n        xMin = xList[0];\n        xMax = xList[xList.length - 1];\n        yMin = yList[0];\n        yMax = yList[yList.length - 1];\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains a line.\n     *\n     * @method getLineRect\n     * @param {Point} firstPoint\n     * @param {Point} lastPoint\n     * @returns {Rectangle}\n     */\n    MathUtils.getLineRect = function (firstPoint, lastPoint) {\n\n        var xFirst = firstPoint.x,\n            xLast = lastPoint.x,\n            xMin = Math.min(xFirst, xLast),\n            xMax = Math.max(xFirst, xLast),\n\n            yFirst = firstPoint.y,\n            yLast = lastPoint.y,\n            yMin = Math.min(yFirst, yLast),\n            yMax = Math.max(yFirst, yLast);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains bounding boxes.\n     *\n     * @method getBoundingRect\n     * @param {Rectangle[]} boundingBoxes List of bounding box\n     * @returns {Rectangle}\n     */\n    MathUtils.getBoundingRect = function (boundingBoxes) {\n\n        var xList = [],\n            yList = [];\n\n        for (var i in boundingBoxes) {\n            var rectangle = boundingBoxes[i];\n            xList.push(rectangle.getX());\n            xList.push(rectangle.getX() + rectangle.getWidth());\n            yList.push(rectangle.getY());\n            yList.push(rectangle.getY() + rectangle.getHeight());\n        }\n\n        var xMin = Math.min.apply(Math, xList);\n        var xMax = Math.max.apply(Math, xList);\n        var yMin = Math.min.apply(Math, yList);\n        var yMax = Math.max.apply(Math, yList);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    // Export\n    scope.MathUtils = MathUtils;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract WebSocket recognition message\n     *\n     * @class AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractWSMessage(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get the message type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractWSMessage.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AbstractWSMessage = AbstractWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Represent an abstract input component\n     *\n     * @class AbstractComponent\n     * @constructor\n     */\n    function AbstractComponent() {\n    }\n\n    /**\n     * Get the type of the input component\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractComponent.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Set the type of the input component\n     *\n     * @method setType\n     * @param {String} type\n     */\n    AbstractComponent.prototype.setType = function (type) {\n        this.type = type;\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractComponent.prototype.getBoundingBox = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractComponent.prototype.setBoundingBox = function (boundingBox) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractComponent = AbstractComponent;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Represent a simple StrokeComponent input component\n     *\n     * @class StrokeComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function StrokeComponent(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'stroke';\n        this.x = [];\n        this.y = [];\n        this.t = [];\n        this.p = [];\n        this.d = [];\n        this.l = [];\n        this.color = undefined;\n        this.alpha = undefined;\n        this.width = 0;\n        if (obj) {\n            if (obj.x) {\n                this.x = obj.x;\n            }\n            if (obj.y) {\n                this.y = obj.y;\n            }\n            if (obj.t) {\n                this.t = obj.t;\n            }\n            if (obj.p) {\n                this.p = obj.p;\n            }\n            if (obj.d) {\n                this.d = obj.d;\n            }\n            if (obj.l) {\n                this.l = obj.l;\n            }\n            if (obj.color) {\n                this.color = obj.color;\n            }\n            if (obj.alpha) {\n                this.alpha = obj.alpha;\n            }\n            if (obj.width) {\n                this.width = obj.width;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StrokeComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    StrokeComponent.prototype.constructor = StrokeComponent;\n\n    /**\n     * @method toJSON\n     * @returns {Object}\n     */\n    StrokeComponent.prototype.toJSON = function () {\n        return {type: this.type, x: this.x, y: this.y, t: this.t};\n    };\n\n    /**\n     * Get the list of x coordinates\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    StrokeComponent.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set the list of x coordinates\n     *\n     * @method setX\n     * @param {Number[]} x\n     */\n    StrokeComponent.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Add a x to the list of x coordinates\n     *\n     * @method addX\n     * @param {Number} x\n     */\n    StrokeComponent.prototype.addX = function (x) {\n        if ((x !== null) && (x !== undefined)) {\n            this.x.push(x);\n        }\n    };\n\n    /**\n     * Get the list of y coordinates\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    StrokeComponent.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set the list of y coordinates\n     *\n     * @method setY\n     * @param {Number[]} y\n     */\n    StrokeComponent.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Add a y to the list of y coordinates\n     *\n     * @method addY\n     * @param {Number} y\n     */\n    StrokeComponent.prototype.addY = function (y) {\n        if ((y !== null) && (y !== undefined)) {\n            this.y.push(y);\n        }\n    };\n\n    /**\n     * Get the list of timestamps\n     *\n     * @method getT\n     * @returns {Number[]}\n     */\n    StrokeComponent.prototype.getT = function () {\n        return this.t;\n    };\n\n    /**\n     * Set the list of timestamps\n     *\n     * @method setT\n     * @param {Number[]} t\n     */\n    StrokeComponent.prototype.setT = function (t) {\n        this.t = t;\n    };\n\n    /**\n     * Add a timestamp to the list\n     *\n     * @method addT\n     * @param {Number} t\n     */\n    StrokeComponent.prototype.addT = function (t) {\n        if ((t !== null) && (t !== undefined)) {\n            this.t.push(t);\n        }\n    };\n\n    StrokeComponent.prototype.getLength = function () {\n        return this.x.length;\n    };\n\n    /**\n     * Get the boundingBox\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    StrokeComponent.prototype.getBoundingBox = function () {\n        var boundingBox = new scope.Rectangle();\n        boundingBox.setX(Math.min.apply(Math, this.getX()));\n        boundingBox.setY(Math.min.apply(Math, this.getY()));\n        boundingBox.setWidth(Math.max.apply(Math, this.getX()) - boundingBox.getX());\n        boundingBox.setHeight(Math.max.apply(Math, this.getY()) - boundingBox.getY());\n        return boundingBox;\n    };\n\n    StrokeComponent.prototype.toFixed = function (precision) {\n        if (precision !== undefined) {\n            for (var i in this.x) {\n                this.x[i] = this.x[i].toFixed(precision);\n                this.y[i] = this.y[i].toFixed(precision);\n            }\n        }\n    };\n\n    StrokeComponent.prototype.getP = function () {\n        return this.p;\n    };\n\n    StrokeComponent.prototype.setP = function (p) {\n        this.p = p;\n    };\n\n    StrokeComponent.prototype.addP = function (p) {\n        if ((p !== null) && (p !== undefined)) {\n            this.p.push(p);\n        }\n    };\n\n    StrokeComponent.prototype.getD = function () {\n        return this.d;\n    };\n\n    StrokeComponent.prototype.setD = function (d) {\n        this.d = d;\n    };\n\n    StrokeComponent.prototype.addD = function (d) {\n        if ((d !== null) && (d !== undefined)) {\n            this.d.push(d);\n        }\n    };\n\n    StrokeComponent.prototype.getL = function () {\n        return this.l;\n    };\n\n    StrokeComponent.prototype.setL = function (l) {\n        this.l = l;\n    };\n\n    StrokeComponent.prototype.addL = function (l) {\n        if ((l !== null) && (l !== undefined)) {\n            this.l.push(l);\n        }\n    };\n\n    StrokeComponent.prototype.getColor = function () {\n        return this.color;\n    };\n\n    StrokeComponent.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    StrokeComponent.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    StrokeComponent.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    StrokeComponent.prototype.addPoint = function (x, y, t) {\n        if (_filterPointByAcquisitionDelta(x, y, this.getX(), this.getY(), this.getLastIndexPoint(), this.getWidth(), this.getLength())) {\n            this.addX(x);\n            this.addY(y);\n            this.addT(t);\n            this.addP(_computePressure(x, y, this.getX(), this.getY(), this.getL(), this.getLastIndexPoint()));\n            this.addD(_computeDistance(x, y, this.getX(), this.getY(), this.getLastIndexPoint()));\n            this.addL(_computeLength(x, y, this.getX(), this.getY(), this.getL(), this.getLastIndexPoint()));\n        }\n    };\n\n    StrokeComponent.prototype.getLastIndexPoint = function () {\n        return this.x.length - 1;\n    };\n\n    StrokeComponent.prototype.getPointByIndex = function (index) {\n        var point;\n        if (index !== undefined && index >= 0 && index < this.getLength()) {\n            point = {\n                x: this.getX()[index],\n                y: this.getY()[index],\n                t: this.getT()[index],\n                p: this.getP()[index],\n                d: this.getD()[index],\n                l: this.getL()[index]\n            };\n        }\n        return point;\n    };\n\n    function _computeDistance(x, y, xArray, yArray, lastIndexPoint) {\n        var distance = Math.sqrt(Math.pow((y - yArray[lastIndexPoint - 1]), 2) + Math.pow((x - xArray[lastIndexPoint - 1]), 2));\n\n        if (isNaN(distance)) {\n            distance = 0;\n        }\n\n        return distance;\n    }\n\n    function _computeLength(x, y, xArray, yArray, lArray, lastIndexPoint) {\n        var length = lArray[lastIndexPoint - 1] + _computeDistance(x, y, xArray, yArray, lastIndexPoint);\n\n        if (isNaN(length)) {\n            length = 0;\n        }\n\n        return length;\n    }\n\n    function _computePressure(x, y, xArray, yArray, lArray, lastIndexPoint) {\n        var ratio = 1.0;\n        var distance = _computeDistance(x, y, xArray, yArray, lastIndexPoint);\n        var length = _computeLength(x, y, xArray, yArray, lArray, lastIndexPoint);\n\n        if(length === 0) {\n            ratio = 0.5;\n        } else if(distance == length){\n            ratio = 1.0;\n        } else  if (distance < 10) {\n            ratio = 0.2 + Math.pow(0.1 * distance, 0.4);\n        } else if (distance > length - 10) {\n            ratio = 0.2 + Math.pow(0.1 * (length - distance), 0.4);\n        }\n        var pressure = ratio * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(distance));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        return pressure;\n    }\n\n    function _filterPointByAcquisitionDelta(x, y, xArray, yArray, lastIndexPoint, width, length) {\n        var delta = (2 + (width / 4));\n        var ret = false;\n        if (length === 0 || Math.abs(xArray[lastIndexPoint] - x) >= delta || Math.abs(yArray[lastIndexPoint] - y) >= delta) {\n            ret = true;\n        }\n        return ret;\n    }\n\n    // Export\n    scope.StrokeComponent = StrokeComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharacterInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function CharacterInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'inputCharacter';\n        this.alternates = [];\n        if (obj) {\n            if (obj.alternates) {\n                for (var i in obj.alternates) {\n                    this.alternates.push(new scope.CharacterInputComponentAlternate(obj.alternates[i]));\n                }\n            }\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharacterInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    CharacterInputComponent.prototype.constructor = CharacterInputComponent;\n\n    /**\n     * Get character input alternates\n     *\n     * @method getAlternates\n     * @returns {CharacterInputComponentAlternate[]}\n     */\n    CharacterInputComponent.prototype.getAlternates = function () {\n        return this.alternates;\n    };\n\n    /**\n     * Set character input alternates\n     *\n     * @method setAlternates\n     * @param {CharacterInputComponentAlternate[]} alternates\n     */\n    CharacterInputComponent.prototype.setAlternates = function (alternates) {\n        this.alternates = alternates;\n    };\n\n    /**\n     * Add a character input alternate\n     *\n     * @method addAlternate\n     * @param {CharacterInputComponent} alternate\n     */\n    CharacterInputComponent.prototype.addAlternate = function (alternate) {\n        this.alternates.push(alternate);\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    CharacterInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    CharacterInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.CharacterInputComponent = CharacterInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Character input component alternate\n     *\n     * @class CharacterInputComponentAlternate\n     * @constructor\n     */\n    function CharacterInputComponentAlternate(obj) {\n        if (obj) {\n            if (obj.alternate) {\n                this.alternate = obj.alternate;\n            }\n            if (obj.probability) {\n                this.probability = obj.probability;\n            }\n        }\n    }\n\n    /**\n     * Get alternate\n     *\n     * @method getAlternate\n     * @returns {String}\n     */\n    CharacterInputComponentAlternate.prototype.getAlternate = function () {\n        return this.alternate;\n    };\n\n    /**\n     * Set alternate\n     *\n     * @method setAlternate\n     * @param {String} alternate\n     */\n    CharacterInputComponentAlternate.prototype.setAlternate = function (alternate) {\n        this.alternate = alternate;\n    };\n\n    /**\n     * Get probability\n     *\n     * @method getProbability\n     * @returns {Number}\n     */\n    CharacterInputComponentAlternate.prototype.getProbability = function () {\n        return this.probability;\n    };\n\n    /**\n     * Set probability\n     *\n     * @method setProbability\n     * @param {Number} probability\n     */\n    CharacterInputComponentAlternate.prototype.setProbability = function (probability) {\n        this.probability = probability;\n    };\n\n    // Export\n    scope.CharacterInputComponentAlternate = CharacterInputComponentAlternate;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract parameters used for recognition\n     *\n     * @class AbstractParameter\n     * @constructor\n     */\n    function AbstractParameter() {\n    }\n\n    // Export\n    scope.AbstractParameter = AbstractParameter;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstraction of recognizer input\n     *\n     * @class AbstractRecognitionInput\n     * @constructor\n     */\n    function AbstractRecognitionInput() {\n    }\n\n    // Export\n    scope.AbstractRecognitionInput = AbstractRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract input recognition data\n     *\n     * @class AbstractRecognitionData\n     * @constructor\n     */\n    function AbstractRecognitionData() {\n    }\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    AbstractRecognitionData.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set the instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractRecognitionData.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    /**\n     * @returns {string}\n     */\n    AbstractRecognitionData.prototype.getHmac = function () {\n        return this.hmac;\n    };\n\n    /**\n     * @param {string} hmac\n     */\n    AbstractRecognitionData.prototype.setHmac = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    /**\n     * Get recognition input\n     *\n     * @method getRecognitionInput\n     * @returns {AbstractRecognitionInput} input\n     */\n    AbstractRecognitionData.prototype.getRecognitionInput = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setRecognitionInput\n     * @param {AbstractRecognitionInput} input\n     */\n    AbstractRecognitionData.prototype.setRecognitionInput = function (input) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractRecognitionData = AbstractRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * List of languages recognition input\n     *\n     * @class RecognitionLanguagesData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function RecognitionLanguagesData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    RecognitionLanguagesData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    RecognitionLanguagesData.prototype.constructor = RecognitionLanguagesData;\n\n    /**\n     * Get the recognition input mode\n     *\n     * @method getInputMode\n     * @returns {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.getInputMode = function () {\n        return this.inputMode;\n    };\n\n    /**\n     * Set the recognition input mode\n     *\n     * @method setInputMode\n     * @param {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.setInputMode = function (inputMode) {\n        this.inputMode = inputMode;\n    };\n\n    // Export\n    scope.RecognitionLanguagesData = RecognitionLanguagesData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class AbstractStartRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractStartRequestWSMessage(obj) {\n        this.type = 'start';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractStartRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractStartRequestWSMessage.prototype.constructor = AbstractStartRequestWSMessage;\n\n    // Export\n    scope.AbstractStartRequestWSMessage = AbstractStartRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class AbstractContinueRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractContinueRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractContinueRequestWSMessage.prototype.constructor = AbstractContinueRequestWSMessage;\n\n    /**\n     * Get instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractContinueRequestWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractContinueRequestWSMessage.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    // Export\n    scope.AbstractContinueRequestWSMessage = AbstractContinueRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeRequestWSMessage(obj) {\n        this.type = 'hmac';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeRequestWSMessage.prototype.constructor = ChallengeRequestWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    /**\n     * Set the challenge\n     *\n     * @method setChallenge\n     * @param {String} challenge\n     */\n    ChallengeRequestWSMessage.prototype.setChallenge = function (challenge) {\n        this.challenge = challenge;\n    };\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    ChallengeRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get HMAC signature\n     *\n     * @method getHmacSignature\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getHmacSignature = function () {\n        return this.hmac;\n    };\n\n    /**\n     * Set HMAC signature\n     *\n     * @method setHmacSignature\n     * @param {String} hmac\n     */\n    ChallengeRequestWSMessage.prototype.setHmacSignature = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    // Export\n    scope.ChallengeRequestWSMessage = ChallengeRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class InitRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitRequestWSMessage(obj) {\n        this.type = 'applicationKey';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitRequestWSMessage.prototype.constructor = InitRequestWSMessage;\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InitRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InitRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    // Export\n    scope.InitRequestWSMessage = InitRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ResetRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetRequestWSMessage(obj) {\n        this.type = 'reset';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetRequestWSMessage.prototype.constructor = ResetRequestWSMessage;\n\n    // Export\n    scope.ResetRequestWSMessage = ResetRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract text input component\n     *\n     * @class AbstractTextInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractTextInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        if (obj) {\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractTextInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractTextInputComponent.prototype.constructor = AbstractTextInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractTextInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractTextInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractTextInputComponent = AbstractTextInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function CharInputComponent(obj) {\n        scope.AbstractTextInputComponent.call(this, obj);\n        this.type = 'char';\n        if (obj) {\n            if (obj.character) {\n                this.character = obj.character;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    CharInputComponent.prototype.constructor = CharInputComponent;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getLabel = function () {\n        return this.character;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    CharInputComponent.prototype.setLabel = function (label) {\n        this.character = label;\n    };\n\n    // Export\n    scope.CharInputComponent = CharInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * String input component\n     *\n     * @class StringInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function StringInputComponent(obj) {\n        scope.AbstractTextInputComponent.call(this, obj);\n        this.type = 'string';\n        if (obj) {\n            if (obj.string) {\n                this.string = obj.string;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StringInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    StringInputComponent.prototype.constructor = StringInputComponent;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getLabel = function () {\n        return this.string;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    StringInputComponent.prototype.setLabel = function (label) {\n        this.string = label;\n    };\n\n    // Export\n    scope.StringInputComponent = StringInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Input unit used for text recognition\n     *\n     * @class TextInputUnit\n     * @constructor\n     */\n    function TextInputUnit() {\n        this.textInputType = 'MULTI_LINE_TEXT';\n        this.components = [];\n    }\n\n    /**\n     * Get the input type\n     *\n     * @method getInputType\n     * @returns {String}\n     */\n    TextInputUnit.prototype.getInputType = function () {\n        return this.textInputType;\n    };\n\n    /**\n     * Set the input type\n     *\n     * @method setInputType\n     * @returns {String} inputType\n     */\n    TextInputUnit.prototype.setInputType = function (inputType) {\n        this.textInputType = inputType;\n    };\n\n    /**\n     * Get components for this input unit\n     *\n     * @method getComponents\n     * @param {TextInkRange} [inkRange]\n     * @returns {AbstractComponent[]}\n     */\n    TextInputUnit.prototype.getComponents = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.components.slice(inkRange.getStartComponent(), inkRange.getEndComponent() + 1);\n        }\n        return this.components;\n    };\n\n    /**\n     * Set components for this input unit\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    TextInputUnit.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.TextInputUnit = TextInputUnit;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for text recognition\n     *\n     * @class TextParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function TextParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textProperties = new scope.TextProperties();\n        if (obj) {\n            if (obj.language) {\n                this.language = obj.language;\n            }\n            if (obj.textInputMode) {\n                this.textInputMode = obj.textInputMode;\n            }\n            if (obj.contentTypes) {\n                this.contentTypes = obj.contentTypes;\n            }\n            if (obj.subsetKnowledges) {\n                this.subsetKnowledges = obj.subsetKnowledges;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.userLkWords) {\n                this.userLkWords = obj.userLkWords;\n            }\n            if (obj.resultDetail) {\n                this.resultDetail = obj.resultDetail;\n            }\n            if (obj.textProperties) {\n                this.textProperties = new scope.TextProperties(obj.textProperties);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    TextParameter.prototype.constructor = TextParameter;\n\n    /**\n     * Get recognition language\n     *\n     * @method getLanguage\n     * @returns {String}\n     */\n    TextParameter.prototype.getLanguage = function () {\n        return this.language;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @method getLanguage\n     * @param {String} language\n     */\n    TextParameter.prototype.setLanguage = function (language) {\n        this.language = language;\n    };\n\n    /**\n     * Get input mode\n     *\n     * @method getInputMode\n     * @returns {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'}\n     */\n    TextParameter.prototype.getInputMode = function () {\n        return this.textInputMode;\n    };\n\n    /**\n     * Set input mode\n     *\n     * @method setInputMode\n     * @param {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'} inputMode\n     */\n    TextParameter.prototype.setInputMode = function (inputMode) {\n        this.textInputMode = inputMode;\n    };\n\n    /**\n     * Get content types\n     *\n     * @method getContentTypes\n     * @returns {Array}\n     */\n    TextParameter.prototype.getContentTypes = function () {\n        return this.contentTypes;\n    };\n\n    /**\n     * Set content types\n     *\n     * @method setContentTypes\n     * @param {Array} contentTypes\n     */\n    TextParameter.prototype.setContentTypes = function (contentTypes) {\n        this.contentTypes = contentTypes;\n    };\n\n    /**\n     * Get SK\n     *\n     * @method getSubsetKnowledges\n     * @returns {Array}\n     */\n    TextParameter.prototype.getSubsetKnowledges = function () {\n        return this.subsetKnowledges;\n    };\n\n    /**\n     * Set SK\n     *\n     * @method setSubsetKnowledges\n     * @param {Array} subsetKnowledges\n     */\n    TextParameter.prototype.setSubsetKnowledges = function (subsetKnowledges) {\n        this.subsetKnowledges = subsetKnowledges;\n    };\n\n    /**\n     * Get user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    TextParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get user LK words\n     *\n     * @method getUserLkWords\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserLkWords = function () {\n        return this.userLkWords;\n    };\n\n    /**\n     * Set user LK words\n     *\n     * @method setUserLkWords\n     * @param {Array} userLkWords\n     */\n    TextParameter.prototype.setUserLkWords = function (userLkWords) {\n        this.userLkWords = userLkWords;\n    };\n\n    /**\n     * Get result detail (e.g. TEXT, WORD ...)\n     *\n     * @method getResultDetail\n     * @returns {'TEXT'|'WORD'|'CHARACTER'}\n     */\n    TextParameter.prototype.getResultDetail = function () {\n        return this.resultDetail;\n    };\n\n    /**\n     * Set result detail (e.g. TEXT, WORD ...)\n     *\n     * @method setResultDetail\n     * @param {'TEXT'|'WORD'|'CHARACTER'} resultDetail\n     */\n    TextParameter.prototype.setResultDetail = function (resultDetail) {\n        this.resultDetail = resultDetail;\n    };\n\n    /**\n     * Get text properties\n     *\n     * @method getTextProperties\n     * @returns {TextProperties}\n     */\n    TextParameter.prototype.getTextProperties = function () {\n        return this.textProperties;\n    };\n\n    /**\n     * Set text properties\n     *\n     * @method setTextProperties\n     * @param {TextProperties} properties\n     */\n    TextParameter.prototype.setTextProperties = function (textProperties) {\n        this.textProperties = textProperties;\n    };\n\n    // Export\n    scope.TextParameter = TextParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text recognition properties\n     *\n     * @class TextProperties\n     * @constructor\n     */\n    function TextProperties(obj) {\n        if (obj) {\n            if (obj.textCandidateListSize) {\n                this.textCandidateListSize = obj.textCandidateListSize;\n            }\n            if (obj.wordCandidateListSize) {\n                this.wordCandidateListSize = obj.wordCandidateListSize;\n            }\n            if (obj.wordPredictionListSize) {\n                this.wordPredictionListSize = obj.wordPredictionListSize;\n            }\n            if (obj.wordCompletionListSize) {\n                this.wordCompletionListSize = obj.wordCompletionListSize;\n            }\n            if (obj.characterCandidateListSize) {\n                this.characterCandidateListSize = obj.characterCandidateListSize;\n            }\n            if (obj.discardCaseVariations) {\n                this.discardCaseVariations = obj.discardCaseVariations;\n            }\n            if (obj.discardAccentuationVariations) {\n                this.discardAccentuationVariations = obj.discardAccentuationVariations;\n            }\n            if (obj.disableSpatialOrdering) {\n                this.disableSpatialOrdering = obj.disableSpatialOrdering;\n            }\n            if (obj.glyphDistortion) {\n                this.glyphDistortion = obj.glyphDistortion;\n            }\n            if (obj.enableOutOfLexicon) {\n                this.enableOutOfLexicon = obj.enableOutOfLexicon;\n            }\n            if (obj.spellingDistortion) {\n                this.spellingDistortion = obj.spellingDistortion;\n            }\n        }\n    }\n\n    /**\n     * Get the number of text candidates requested\n     *\n     * @method getTextCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getTextCandidateListSize = function () {\n        return this.textCandidateListSize;\n    };\n\n    /**\n     * Set the number of text candidates requested\n     *\n     * @method setTextCandidateListSize\n     * @param {Number} textCandidateListSize\n     */\n    TextProperties.prototype.setTextCandidateListSize = function (textCandidateListSize) {\n        this.textCandidateListSize = textCandidateListSize;\n    };\n\n    /**\n     * Get the number of word candidates requested\n     *\n     * @method getWordCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCandidateListSize = function () {\n        return this.wordCandidateListSize;\n    };\n\n    /**\n     * Set the number of word candidates requested\n     *\n     * @method setWordCandidateListSize\n     * @param {Number} wordCandidateListSize\n     */\n    TextProperties.prototype.setWordCandidateListSize = function (wordCandidateListSize) {\n        this.wordCandidateListSize = wordCandidateListSize;\n    };\n\n    /**\n     * Get the number of word prediction candidates requested\n     *\n     * @method getWordPredictionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordPredictionListSize = function () {\n        return this.wordPredictionListSize;\n    };\n\n    /**\n     * Set the number of word prediction candidates requested\n     *\n     * @method setWordPredictionListSize\n     * @param {Number} wordPredictionListSize\n     */\n    TextProperties.prototype.setWordPredictionListSize = function (wordPredictionListSize) {\n        this.wordPredictionListSize = wordPredictionListSize;\n    };\n\n    /**\n     * Get the number of word completion candidates requested\n     *\n     * @method getWordCompletionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCompletionListSize = function () {\n        return this.wordCompletionListSize;\n    };\n\n    /**\n     * Set the number of word completion candidates requested\n     *\n     * @method setWordCompletionListSize\n     * @param {Number} wordCompletionListSize\n     */\n    TextProperties.prototype.setWordCompletionListSize = function (wordCompletionListSize) {\n        this.wordCompletionListSize = wordCompletionListSize;\n    };\n\n    /**\n     * Get the number of character candidates requested\n     *\n     * @method getCharacterCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getCharacterCandidateListSize = function () {\n        return this.characterCandidateListSize;\n    };\n\n    /**\n     * Set the number of character candidates requested\n     *\n     * @method setCharacterCandidateListSize\n     * @param {Number} characterCandidateListSize\n     */\n    TextProperties.prototype.setCharacterCandidateListSize = function (characterCandidateListSize) {\n        this.characterCandidateListSize = characterCandidateListSize;\n    };\n\n    /**\n     * Get the discard case variations\n     *\n     * @method getDiscardCaseVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardCaseVariations = function () {\n        return this.discardCaseVariations;\n    };\n\n    /**\n     * Set the discard case variations\n     *\n     * @method setDiscardCaseVariations\n     * @param {boolean} discardCaseVariations\n     */\n    TextProperties.prototype.setDiscardCaseVariations = function (discardCaseVariations) {\n        this.discardCaseVariations = discardCaseVariations;\n    };\n\n    /**\n     * Get the discard accentuation variations\n     *\n     * @method getDiscardAccentuationVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardAccentuationVariations = function () {\n        return this.discardAccentuationVariations;\n    };\n\n    /**\n     * Set the discard accentuation variations\n     *\n     * @method setDiscardAccentuationVariations\n     * @param {boolean} discardAccentuationVariations\n     */\n    TextProperties.prototype.setDiscardAccentuationVariations = function (discardAccentuationVariations) {\n        this.discardAccentuationVariations = discardAccentuationVariations;\n    };\n\n    /**\n     * Get disable spatial ordering\n     *\n     * @method getDisableSpatialOrdering\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getDisableSpatialOrdering = function () {\n        return this.disableSpatialOrdering;\n    };\n\n    /**\n     * Set disable spatial ordering\n     *\n     * @method setDisableSpatialOrdering\n     * @param {Boolean} disableSpatialOrdering\n     */\n    TextProperties.prototype.setDisableSpatialOrdering = function (disableSpatialOrdering) {\n        this.disableSpatialOrdering = disableSpatialOrdering;\n    };\n\n    /**\n     * Get glyph distortion\n     *\n     * @method getGlyphDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getGlyphDistortion = function () {\n        return this.glyphDistortion;\n    };\n\n    /**\n     * Set glyph distortion\n     *\n     * @method setGlyphDistortion\n     * @param {Number} glyphDistortion\n     */\n    TextProperties.prototype.setGlyphDistortion = function (glyphDistortion) {\n        this.glyphDistortion = glyphDistortion;\n    };\n\n    /**\n     * Get enable out of lexicon\n     *\n     * @method getEnableOutOfLexicon\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getEnableOutOfLexicon = function () {\n        return this.enableOutOfLexicon;\n    };\n\n    /**\n     * Set enable out of lexicon\n     *\n     * @method setEnableOutOfLexicon\n     * @param {Boolean} enableOutOfLexicon\n     */\n    TextProperties.prototype.setEnableOutOfLexicon = function (enableOutOfLexicon) {\n        this.enableOutOfLexicon = enableOutOfLexicon;\n    };\n\n    /**\n     * Get spelling distortion\n     *\n     * @method getSpellingDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getSpellingDistortion = function () {\n        return this.spellingDistortion;\n    };\n\n    /**\n     * Set spelling distortion\n     *\n     * @method setSpellingDistortion\n     * @param {Number} spellingDistortion\n     */\n    TextProperties.prototype.setSpellingDistortion = function (spellingDistortion) {\n        this.spellingDistortion = spellingDistortion;\n    };\n\n    // Export\n    scope.TextProperties = TextProperties;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for text recognition\n     *\n     * @class TextRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function TextRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionInput.prototype.constructor = TextRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextRecognitionInput.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextRecognitionInput.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @param {TextInkRange} [inkRange]\n     * @returns {TextInputUnit[]}\n     */\n    TextRecognitionInput.prototype.getInputUnits = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.inputUnits.slice(inkRange.getStartUnit(), inkRange.getEndUnit() + 1);\n        }\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextRecognitionInput.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextRecognitionInput = TextRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition data for text input\n     *\n     * @class TextRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function TextRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionData.prototype.constructor = TextRecognitionData;\n\n    /**\n     * Get text input\n     *\n     * @method getRecognitionInput\n     * @returns {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.getRecognitionInput = function () {\n        return this.textInput;\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setRecognitionInput\n     * @param {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.textInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.TextRecognitionData = TextRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket start text recognition message\n     *\n     * @class TextStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextStartRequestWSMessage.prototype.constructor = TextStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextStartRequestWSMessage.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextStartRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextStartRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextStartRequestWSMessage = TextStartRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket continue text recognition message\n     *\n     * @class TextContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextContinueRequestWSMessage(obj) {\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextContinueRequestWSMessage.prototype.constructor = TextContinueRequestWSMessage;\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextContinueRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextContinueRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextContinueRequestWSMessage = TextContinueRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Parameters used for shape recognition\n     *\n     * @class ShapeParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function ShapeParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        if (obj) {\n            if (obj.rejectDetectionSensitivity) {\n                this.rejectDetectionSensitivity = obj.rejectDetectionSensitivity;\n            }\n            if (obj.doBeautification) {\n                this.doBeautification = obj.doBeautification;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    ShapeParameter.prototype.constructor = ShapeParameter;\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Boolean} rejectDetectionSensitivity\n     */\n    ShapeParameter.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method hasBeautification\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.hasBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeParameter.prototype.setBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    ShapeParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    ShapeParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    // Export\n    scope.ShapeParameter = ShapeParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for shape recognition\n     *\n     * @class ShapeRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function ShapeRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionInput.prototype.constructor = ShapeRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {ShapeParameter}\n     */\n    ShapeRecognitionInput.prototype.getParameters = function () {\n        return new ShapeParameter({\n            rejectDetectionSensitivity: this.rejectDetectionSensitivity,\n            doBeautification: this.doBeautification,\n            userResources: this.userResources\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {ShapeParameter} parameters\n     */\n    ShapeRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.rejectDetectionSensitivity = parameters.getRejectDetectionSensitivity();\n            this.doBeautification = parameters.hasBeautification();\n            this.userResources = parameters.getUserResources();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    ShapeRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    ShapeRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.ShapeRecognitionInput = ShapeRecognitionInput;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition data for shape input\n     *\n     * @class ShapeRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function ShapeRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionData.prototype.constructor = ShapeRecognitionData;\n\n    /**\n     * Get shape input\n     *\n     * @method getRecognitionInput\n     * @returns {ShapeRecognitionInput}\n     */\n    ShapeRecognitionData.prototype.getRecognitionInput = function () {\n        return this.shapeInput;\n    };\n\n    /**\n     * Set shape input\n     *\n     * @method setRecognitionInput\n     * @param {ShapeRecognitionInput} input\n     */\n    ShapeRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.shapeInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.ShapeRecognitionData = ShapeRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Parameters used for math recognition\n     *\n     * @class MathParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MathParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n        if (obj) {\n            if (obj.resultTypes) {\n                this.resultTypes = obj.resultTypes;\n            }\n            if (obj.columnarOperation) {\n                this.columnarOperation = obj.columnarOperation;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.scratchOutDetectionSensitivity) {\n                this.scratchOutDetectionSensitivity = obj.scratchOutDetectionSensitivity;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MathParameter.prototype.constructor = MathParameter;\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method isColumnar\n     * @returns {Boolean}\n     */\n    MathParameter.prototype.isColumnar = function () {\n        return this.columnarOperation;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setColumnar\n     * @param  {Boolean} columnar\n     */\n    MathParameter.prototype.setColumnar = function (columnar) {\n        this.columnarOperation = columnar;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    // Export\n    scope.MathParameter = MathParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for math recognition\n     *\n     * @class MathRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MathRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionInput.prototype.constructor = MathRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathRecognitionInput.prototype.getParameters = function () {\n        return new MathParameter({\n            resultTypes: this.resultTypes,\n            columnarOperation: this.columnarOperation,\n            userResources: this.userResources,\n            scratchOutDetectionSensitivity: this.scratchOutDetectionSensitivity\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.resultTypes = parameters.getResultTypes();\n            this.columnarOperation = parameters.isColumnar();\n            this.userResources = parameters.getUserResources();\n            this.scratchOutDetectionSensitivity = parameters.getScratchOutDetectionSensitivity();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MathRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MathRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathRecognitionInput = MathRecognitionInput;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition data for math input\n     *\n     * @class MathRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MathRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionData.prototype.constructor = MathRecognitionData;\n\n\n    /**\n     * Get math input\n     *\n     * @method getRecognitionInput\n     * @returns {MathRecognitionInput}\n     */\n    MathRecognitionData.prototype.getRecognitionInput = function () {\n        return this.mathInput;\n    };\n\n    /**\n     * Set math input\n     *\n     * @method setRecognitionInput\n     * @param {MathRecognitionInput} input\n     */\n    MathRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.mathInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MathRecognitionData = MathRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class MathStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathStartRequestWSMessage.prototype.constructor = MathStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathStartRequestWSMessage.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathStartRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathStartRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathStartRequestWSMessage = MathStartRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class MathContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathContinueRequestWSMessage.prototype.constructor = MathContinueRequestWSMessage;\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathContinueRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathContinueRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathContinueRequestWSMessage = MathContinueRequestWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract music input component\n     *\n     * @class AbstractMusicInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractMusicInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        if (obj) {\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractMusicInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractMusicInputComponent.prototype.constructor = AbstractMusicInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractMusicInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractMusicInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractMusicInputComponent = AbstractMusicInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Accidental input component\n     *\n     * @class MusicAccidentalInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicAccidentalInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'accidental';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidentalInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidentalInputComponent.prototype.constructor = MusicAccidentalInputComponent;\n\n    /**\n     * Get accidental input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicAccidentalInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set accidental input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicAccidentalInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicAccidentalInputComponent = MusicAccidentalInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Arpeggiate input component\n     *\n     * @class MusicArpeggiateInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicArpeggiateInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'arpeggiate';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiateInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiateInputComponent.prototype.constructor = MusicArpeggiateInputComponent;\n\n    /**\n     * Get arpeggiate input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicArpeggiateInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set arpeggiate input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicArpeggiateInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicArpeggiateInputComponent = MusicArpeggiateInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Bar input component\n     *\n     * @class MusicBarInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBarInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'bar';\n        this.value = new scope.MusicBar();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicBar(obj.value);\n            }\n        }\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBarInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBarInputComponent.prototype.constructor = MusicBarInputComponent;\n\n    /**\n     * Get bar component value\n     *\n     * @method getValue\n     * @returns {MusicBar}\n     */\n    MusicBarInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set bar component value\n     *\n     * @method setValue\n     * @param {MusicBar} value\n     */\n    MusicBarInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBarInputComponent = MusicBarInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Beam input component\n     *\n     * @class MusicBeamInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBeamInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'beam';\n        this.value = new scope.MusicBeam();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicBeam(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeamInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBeamInputComponent.prototype.constructor = MusicBeamInputComponent;\n\n    /**\n     * Get beam input component value\n     *\n     * @method getValue\n     * @returns {MusicBeam}\n     */\n    MusicBeamInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set beam input component value\n     *\n     * @method setValue\n     * @param {MusicBeam} value\n     */\n    MusicBeamInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBeamInputComponent = MusicBeamInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Clef input component\n     * default clef values: symbol='G', octave=0\n     *\n     * @class MusicClefInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicClefInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'clef';\n        this.value = new scope.MusicClef();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicClef(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClefInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicClefInputComponent.prototype.constructor = MusicClefInputComponent;\n\n    /**\n     * Get clef input component value\n     *\n     * @method getValue\n     * @returns {MusicClef}\n     */\n    MusicClefInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set clef input component value\n     *\n     * @method setValue\n     * @param {MusicClef} value\n     */\n    MusicClefInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicClefInputComponent = MusicClefInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Decoration input component\n     *\n     * @class MusicDecorationInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDecorationInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'decoration';\n        this.value = new scope.MusicDecoration();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicDecoration(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecorationInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDecorationInputComponent.prototype.constructor = MusicDecorationInputComponent;\n\n    /**\n     * Get decoration input component value\n     *\n     * @method getValue\n     * @returns {MusicDecoration}\n     */\n    MusicDecorationInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set decoration input component value\n     *\n     * @method setValue\n     * @param {MusicDecoration} value\n     */\n    MusicDecorationInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDecorationInputComponent = MusicDecorationInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Dots input component\n     *\n     * @class MusicDotsInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDotsInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'dots';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDotsInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDotsInputComponent.prototype.constructor = MusicDotsInputComponent;\n\n    /**\n     * Get dots input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicDotsInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set dots input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicDotsInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDotsInputComponent = MusicDotsInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Head input component\n     *\n     * @class MusicHeadInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicHeadInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'head';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHeadInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicHeadInputComponent.prototype.constructor = MusicHeadInputComponent;\n\n    /**\n     * Get head input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicHeadInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set head input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicHeadInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicHeadInputComponent = MusicHeadInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Ledger line input component\n     *\n     * @class MusicLedgerLineInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicLedgerLineInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'ledgerLine';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLineInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLineInputComponent.prototype.constructor = MusicLedgerLineInputComponent;\n\n    // Export\n    scope.MusicLedgerLineInputComponent = MusicLedgerLineInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Rest input component\n     *\n     * @class MusicRestInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicRestInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'rest';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRestInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicRestInputComponent.prototype.constructor = MusicRestInputComponent;\n\n    /**\n     * Get rest input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicRestInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set rest input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicRestInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicRestInputComponent = MusicRestInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Stem input component\n     *\n     * @class MusicStemInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicStemInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'stem';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStemInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicStemInputComponent.prototype.constructor = MusicStemInputComponent;\n\n    /**\n     * Get stem input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicStemInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set stem input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicStemInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicStemInputComponent = MusicStemInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Tie ro slur input component\n     *\n     * @class MusicTieOrSlurInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTieOrSlurInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'tieOrSlur';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTieOrSlurInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTieOrSlurInputComponent.prototype.constructor = MusicTieOrSlurInputComponent;\n\n    /**\n     * Get tie or slur input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTieOrSlurInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set tie or slur input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTieOrSlurInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTieOrSlurInputComponent = MusicTieOrSlurInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Time signature input component\n     *\n     * @class MusicTimeSignatureInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTimeSignatureInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'timeSignature';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignatureInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignatureInputComponent.prototype.constructor = MusicTimeSignatureInputComponent;\n\n    /**\n     * Get time signature input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTimeSignatureInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set time signature input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTimeSignatureInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTimeSignatureInputComponent = MusicTimeSignatureInputComponent;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represents a staff used for music recognition\n     * default values: count=5, gap=20\n     *\n     * @class MusicStaff\n     * @constructor\n     */\n    function MusicStaff(obj) {\n        this.count = 5;\n        this.gap = 20;\n        if (obj) {\n            if (obj.count) {\n                this.count = obj.count;\n            }\n            if (obj.gap) {\n                this.gap = obj.gap;\n            }\n            if (obj.top) {\n                this.top = obj.top;\n            }\n        }\n    }\n\n    /**\n     * Get the lines count\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getCount = function () {\n        return this.count;\n    };\n\n    /**\n     * Set the lines count\n     *\n     * @method setCount\n     * @param {Number} count\n     */\n    MusicStaff.prototype.setCount = function (count) {\n        this.count = count;\n    };\n\n    /**\n     * Get the spacing from the top\n     *\n     * @method getTop\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Set the spacing from the top\n     *\n     * @method setTop\n     * @param {Number} top\n     */\n    MusicStaff.prototype.setTop = function (top) {\n        this.top = top;\n    };\n\n    /**\n     * Get the gap between lines\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set the gap between lines\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicStaff.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    // Export\n    scope.MusicStaff = MusicStaff;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Parameters used for music recognition\n     *\n     * @class MusicParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MusicParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n        if (obj) {\n            if (obj.divisions) {\n                this.divisions = obj.divisions;\n            }\n            if (obj.staff) {\n                this.staff = new scope.MusicStaff(obj.staff);\n            }\n            if (obj.scratchOutDetectionSensitivity) {\n                this.scratchOutDetectionSensitivity = obj.scratchOutDetectionSensitivity;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.resultTypes) {\n                this.resultTypes = obj.resultTypes;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MusicParameter.prototype.constructor = MusicParameter;\n\n    /**\n     * Get the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicParameter.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicParameter.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicParameter.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicParameter = MusicParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for music recognition\n     *\n     * @class MusicRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MusicRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionInput.prototype.constructor = MusicRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MusicParameter}\n     */\n    MusicRecognitionInput.prototype.getParameters = function () {\n        return new MusicParameter({\n            divisions: this.divisions,\n            staff: this.staff,\n            scratchOutDetectionSensitivity: this.scratchOutDetectionSensitivity,\n            resultTypes: this.resultTypes,\n            userResources: this.userResources\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MusicParameter} parameters\n     */\n    MusicRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.divisions = parameters.getDivisions();\n            this.staff = parameters.getStaff();\n            this.scratchOutDetectionSensitivity = parameters.getScratchOutDetectionSensitivity();\n            this.resultTypes = parameters.getResultTypes();\n            this.userResources = parameters.getUserResources();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MusicRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MusicRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MusicRecognitionInput = MusicRecognitionInput;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition data for music input\n     *\n     * @class MusicRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MusicRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionData.prototype.constructor = MusicRecognitionData;\n\n    /**\n     * Get music input\n     *\n     * @method getRecognitionInput\n     * @returns {MusicRecognitionInput}\n     */\n    MusicRecognitionData.prototype.getRecognitionInput = function () {\n        return this.musicInput;\n    };\n\n    /**\n     * Set music input\n     *\n     * @method setRecognitionInput\n     * @param {MusicRecognitionInput} input\n     */\n    MusicRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.musicInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MusicRecognitionData = MusicRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Parameters used for analyzer recognition\n     *\n     * @class AnalyzerParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function AnalyzerParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textParameter = new scope.TextParameter();\n        this.textParameter.setLanguage('en_US');\n        this.textParameter.setInputMode('CURSIVE');\n        if (obj) {\n            if (obj.coordinateResolution) {\n                this.coordinateResolution = obj.coordinateResolution;\n            }\n            if (obj.textParameter) {\n                this.textParameter = new scope.TextParameter(obj.textParameter);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerParameter.prototype.constructor = AnalyzerParameter;\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter}\n     */\n    AnalyzerParameter.prototype.getTextParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} parameters\n     */\n    AnalyzerParameter.prototype.setTextParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get analyzer coordinate resolution\n     *\n     * @method getCoordinateResolution\n     * @returns {Number}\n     */\n    AnalyzerParameter.prototype.getCoordinateResolution = function () {\n        return this.coordinateResolution;\n    };\n\n    /**\n     * Set analyzer coordinate resolution\n     *\n     * @method setCoordinateResolution\n     * @param {Number} coordinateResolution\n     */\n    AnalyzerParameter.prototype.setCoordinateResolution = function (coordinateResolution) {\n        this.coordinateResolution = coordinateResolution;\n    };\n\n    // Export\n    scope.AnalyzerParameter = AnalyzerParameter;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Recognition input object for analyzer recognition\n     *\n     * @class AnalyzerRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function AnalyzerRecognitionInput() {\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionInput.prototype.constructor = AnalyzerRecognitionInput;\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getParameters\n     * @returns {AnalyzerParameter}\n     */\n    AnalyzerRecognitionInput.prototype.getParameters = function () {\n        return this.parameter;\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setParameters\n     * @param {AnalyzerParameter} parameters\n     */\n    AnalyzerRecognitionInput.prototype.setParameters = function (parameters) {\n        this.parameter = parameters;\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    AnalyzerRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    AnalyzerRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.AnalyzerRecognitionInput = AnalyzerRecognitionInput;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Recognition data for analyzer input\n     *\n     * @class AnalyzerRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function AnalyzerRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionData.prototype.constructor = AnalyzerRecognitionData;\n\n    /**\n     * Get analyzer input\n     *\n     * @method getRecognitionInput\n     * @returns {AnalyzerRecognitionInput}\n     */\n    AnalyzerRecognitionData.prototype.getRecognitionInput = function () {\n        return this.analyzerInput;\n    };\n\n    /**\n     * Set analyzer input\n     *\n     * @method setRecognitionInput\n     * @param {AnalyzerRecognitionInput} input\n     */\n    AnalyzerRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.analyzerInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.AnalyzerRecognitionData = AnalyzerRecognitionData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract result\n     *\n     * @class AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractResult(obj) {\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractResult.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractResult.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractResult = AbstractResult;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class AbstractRecoResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractRecoResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractRecoResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractRecoResponseWSMessage.prototype.constructor = AbstractRecoResponseWSMessage;\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecoResponseWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractRecoResponseWSMessage.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractRecoResponseWSMessage = AbstractRecoResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.challenge = obj.challenge;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeResponseWSMessage.prototype.constructor = ChallengeResponseWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeResponseWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    // Export\n    scope.ChallengeResponseWSMessage = ChallengeResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition error message\n     *\n     * @class ErrorResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ErrorResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.error = obj.error;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ErrorResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ErrorResponseWSMessage.prototype.constructor = ErrorResponseWSMessage;\n\n    /**\n     * Get the error\n     *\n     * @method getError\n     * @returns {String}\n     */\n    ErrorResponseWSMessage.prototype.getError = function () {\n        return this.error;\n    };\n\n    // Export\n    scope.ErrorResponseWSMessage = ErrorResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition init message\n     *\n     * @class InitResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitResponseWSMessage.prototype.constructor = InitResponseWSMessage;\n\n    // Export\n    scope.InitResponseWSMessage = InitResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition reset message\n     *\n     * @class ResetResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetResponseWSMessage.prototype.constructor = ResetResponseWSMessage;\n\n    // Export\n    scope.ResetResponseWSMessage = ResetResponseWSMessage;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text ink ranges\n     *\n     * @class TextInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextInkRange(obj) {\n        if (obj) {\n            if (typeof obj === 'string') {\n                var cpt = obj.split(/[:-]+/);\n                this.startUnit = Number(cpt[0]);\n                this.startComponent = Number(cpt[1]);\n                this.startPoint = Number(cpt[2]);\n                this.endUnit = Number(cpt[3]);\n                this.endComponent = Number(cpt[4]);\n                this.endPoint = Number(cpt[5]);\n            } else {\n                this.startUnit = obj.startUnit;\n                this.startComponent = obj.startComponent;\n                this.startPoint = obj.startPoint;\n                this.endUnit = obj.endUnit;\n                this.endComponent = obj.endComponent;\n                this.endPoint = obj.endPoint;\n            }\n        }\n    }\n\n    /**\n     * Get start unit\n     *\n     * @method getStartUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartUnit = function () {\n        return this.startUnit;\n    };\n\n    /**\n     * Get end unit\n     *\n     * @method getEndUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndUnit = function () {\n        return this.endUnit;\n    };\n\n    /**\n     * Get start component\n     *\n     * @method getStartComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartComponent = function () {\n        return this.startComponent;\n    };\n\n    /**\n     * Get end component\n     *\n     * @method getEndComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndComponent = function () {\n        return this.endComponent;\n    };\n\n    /**\n     * Get start point\n     *\n     * @method getStartPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n\n    /**\n     * Get end point\n     *\n     * @method getEndPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n\n    // Export\n    scope.TextInkRange = TextInkRange;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text candidate\n     *\n     * @class TextCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextCandidate(obj) {\n        this.flags = [];\n        this.children = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedScore = obj.normalizedScore;\n            this.spellingDistortionRatio = obj.spellingDistortionRatio;\n            for (var i in obj.flags) {\n                this.flags.push(obj.flags[i]);\n            }\n            for (var j in obj.children) {\n                this.children.push(new scope.TextSegment(obj.children[j]));\n            }\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    TextCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getNormalizedScore = function () {\n        return this.normalizedScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    /**\n     * Get spelling distortion ratio\n     *\n     * @method getSpellingDistortionRatio\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getSpellingDistortionRatio = function () {\n        return this.spellingDistortionRatio;\n    };\n\n    /**\n     * Get flags\n     *\n     * @method getFlags\n     * @returns {Array}\n     */\n    TextCandidate.prototype.getFlags = function () {\n        return this.flags;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {TextSegment[]}\n     */\n    TextCandidate.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    // Export\n    scope.TextCandidate = TextCandidate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text document\n     *\n     * @class TextDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextDocument(obj) {\n        this.tagItems = [];\n        this.wordCandidates = [];\n        this.charCandidates = [];\n        if (obj) {\n            if (obj.textSegmentResult) {\n                this.textSegmentResult = new scope.TextSegment(obj.textSegmentResult);\n            }\n            for (var i in obj.tagItems) {\n                this.tagItems.push(new scope.TextTagItem(obj.tagItems[i]));\n            }\n            for (var j in obj.wordCandidates) {\n                this.wordCandidates.push(new scope.TextSegment(obj.wordCandidates[j]));\n            }\n            for (var k in obj.charCandidates) {\n                this.charCandidates.push(new scope.TextSegment(obj.charCandidates[k]));\n            }\n        }\n    }\n\n    /**\n     * Get tag items\n     *\n     * @method getTagItems\n     * @returns {TextTagItem[]}\n     */\n    TextDocument.prototype.getTagItems = function () {\n        return this.tagItems;\n    };\n\n    /**\n     * Get word segments\n     *\n     * @method getWordSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getWordSegments = function () {\n        return this.wordCandidates;\n    };\n\n    /**\n     * Get word segment\n     *\n     * @method getWordSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getWordSegment = function (inkRanges) {\n        for (var i = 0; i < this.getWordSegments().length; i++) {\n            if (JSON.stringify(this.getWordSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getWordSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get char segments\n     *\n     * @method getCharSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getCharSegments = function () {\n        return this.charCandidates;\n    };\n\n    /**\n     * Get char segment\n     *\n     * @method getCharSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getCharSegment = function (inkRanges) {\n        for (var i = 0; i < this.getCharSegments().length; i++) {\n            if (JSON.stringify(this.getCharSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getCharSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get text segment\n     *\n     * @method getTextSegment\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getTextSegment = function () {\n        return this.textSegmentResult;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    TextDocument.prototype.hasScratchOutResults = function () {\n        return false;\n    };\n\n    // Export\n    scope.TextDocument = TextDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Text result\n     *\n     * @class TextResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    TextResult.prototype.constructor = TextResult;\n\n    // Export\n    scope.TextResult = TextResult;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text segment\n     *\n     * @class TextSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextSegment(obj) {\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidateIdx = obj.selectedCandidateIdx;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges;\n                if (!Array.isArray(ranges)) {\n                    ranges = ranges.split(/[\\s]+/);\n                }\n                for (var j in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[j]));\n                }\n            }\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.TextCandidate(obj.candidates[i]));\n            }\n        }\n    }\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {TextCandidate[]}\n     */\n    TextSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    TextSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIdx;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {TextCandidate}\n     */\n    TextSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextSegment = TextSegment;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text tag item\n     *\n     * @class TextTagItem\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextTagItem(obj) {\n        this.inkRanges = [];\n        if (obj) {\n            this.tagType = obj.tagType;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges;\n                if (!Array.isArray(ranges)) {\n                    ranges = ranges.split(/[\\s]+/);\n                }\n                for (var i in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[i]));\n                }\n            }\n        }\n    }\n\n    /**\n     * Get tag type\n     *\n     * @method getTagType\n     * @returns {String}\n     */\n    TextTagItem.prototype.getTagType = function () {\n        return this.tagType;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextTagItem.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextTagItem = TextTagItem;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class TextResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextResponseWSMessage.prototype.constructor = TextResponseWSMessage;\n\n    // Export\n    scope.TextResponseWSMessage = TextResponseWSMessage;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract shape primitive\n     *\n     * @class AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractShapePrimitive(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.beginDecoration = obj.beginDecoration;\n            this.beginTangentAngle = obj.beginTangentAngle;\n            this.endDecoration = obj.endDecoration;\n            this.endTangentAngle = obj.endTangentAngle;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is line\n     *\n     * @method isLine\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isLine = function () {\n        return this.type === 'line';\n    };\n\n    /**\n     * Is ellipse\n     *\n     * @method isEllipse\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isEllipse = function () {\n        return this.type === 'ellipse';\n    };\n\n    /**\n     * Has begin decoration\n     *\n     * @method hasBeginDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasBeginDecoration = function () {\n        return typeof this.beginDecoration !== 'undefined';\n    };\n\n    /**\n     * Has end decoration\n     *\n     * @method hasEndDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasEndDecoration = function () {\n        return typeof this.endDecoration !== 'undefined';\n    };\n\n    /**\n     * Get begin decoration\n     *\n     * @method getBeginDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getBeginDecoration = function () {\n        return this.beginDecoration;\n    };\n\n    /**\n     * Get end decoration\n     *\n     * @method getEndDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getEndDecoration = function () {\n        return this.endDecoration;\n    };\n\n    /**\n     * Get begin tangent angle\n     *\n     * @method getBeginTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getBeginTangentAngle = function () {\n        return this.beginTangentAngle;\n    };\n\n    /**\n     * Get end tangent angle\n     *\n     * @method getEndTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getEndTangentAngle = function () {\n        return this.endTangentAngle;\n    };\n\n    // Export\n    scope.AbstractShapePrimitive = AbstractShapePrimitive;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape candidate\n     *\n     * @class ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeCandidate(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    ShapeCandidate.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is erased\n     *\n     * @method isErased\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isErased = function () {\n        return this.type === 'erased';\n    };\n\n    /**\n     * Is scratch-out\n     *\n     * @method isScratchOut\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isScratchOut = function () {\n        return this.type === 'scratchOut';\n    };\n\n    /**\n     * Is not recognized\n     *\n     * @method isNotRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isNotRecognized = function () {\n        return this.type === 'notRecognized';\n    };\n\n    /**\n     * Is recognized\n     *\n     * @method isRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isRecognized = function () {\n        return this.type === 'recognizedShape';\n    };\n\n    // Export\n    scope.ShapeCandidate = ShapeCandidate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape document\n     *\n     * @class ShapeDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeDocument(obj) {\n        this.segments = [];\n        if (obj) {\n            for (var i in obj.segments) {\n                this.segments.push(new scope.ShapeSegment(obj.segments[i]));\n            }\n        }\n    }\n\n    /**\n     * Get segments\n     *\n     * @method getSegments\n     * @returns {ShapeSegment[]}\n     */\n    ShapeDocument.prototype.getSegments = function () {\n        return this.segments;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeDocument.prototype.getInkRanges = function () {\n        var inkRanges = [];\n        for (var i in this.segments) {\n            inkRanges = inkRanges.concat(this.segments[i].getInkRanges());\n        }\n        return inkRanges;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    ShapeDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getSegments()) {\n            var currentSeg = this.getSegments()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.ShapeDocument = ShapeDocument;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Shape ellipse\n     *\n     * @class ShapeEllipse\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeEllipse(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.center = new scope.Point(obj.center);\n            this.minRadius = obj.minRadius;\n            this.maxRadius = obj.maxRadius;\n            this.orientation = obj.orientation;\n            this.startAngle = obj.startAngle;\n            this.sweepAngle = obj.sweepAngle;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeEllipse.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeEllipse.prototype.constructor = ShapeEllipse;\n\n    /**\n     * Get center\n     *\n     * @method getCenter\n     * @returns {Point}\n     */\n    ShapeEllipse.prototype.getCenter = function () {\n        return this.center;\n    };\n\n    /**\n     * Get min radius\n     *\n     * @method getMinRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMinRadius = function () {\n        return this.minRadius;\n    };\n\n    /**\n     * Get max radius\n     *\n     * @method getMaxRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMaxRadius = function () {\n        return this.maxRadius;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    ShapeEllipse.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get start angle\n     *\n     * @method getStartAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getStartAngle = function () {\n        return this.startAngle;\n    };\n\n    /**\n     * Get sweep angle\n     *\n     * @method getSweepAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getSweepAngle = function () {\n        return this.sweepAngle;\n    };\n\n    // Export\n    scope.ShapeEllipse = ShapeEllipse;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape erased\n     *\n     * @class ShapeErased\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeErased(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeErased.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeErased.prototype.constructor = ShapeErased;\n\n    // Export\n    scope.ShapeErased = ShapeErased;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape ink range\n     *\n     * @class ShapeInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeInkRange(obj) {\n        if (obj) {\n            this.firstStroke = obj.firstStroke;\n            this.lastStroke = obj.lastStroke;\n            this.firstPoint = obj.firstPoint;\n            this.lastPoint = obj.lastPoint;\n        }\n    }\n\n    /**\n     * Get first stroke\n     *\n     * @method getFirstStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstStroke = function () {\n        return this.firstStroke;\n    };\n\n    /**\n     * Get last stroke\n     *\n     * @method getLastStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastStroke = function () {\n        return this.lastStroke;\n    };\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeInkRange = ShapeInkRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape line\n     *\n     * @class ShapeLine\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeLine(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeLine.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeLine.prototype.constructor = ShapeLine;\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeLine = ShapeLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape not recognized\n     *\n     * @class ShapeNotRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeNotRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeNotRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeNotRecognized.prototype.constructor = ShapeNotRecognized;\n\n    // Export\n    scope.ShapeNotRecognized = ShapeNotRecognized;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape recognized\n     *\n     * @class ShapeRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.primitives = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n            this.resemblanceScore = obj.resemblanceScore;\n            for (var i in obj.primitives) {\n                switch (obj.primitives[i].type) {\n                    case 'line':\n                        this.primitives.push(new scope.ShapeLine(obj.primitives[i]));\n                        break;\n                    case 'ellipse':\n                        this.primitives.push(new scope.ShapeEllipse(obj.primitives[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown shape primitive');\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognized.prototype.constructor = ShapeRecognized;\n\n    /**\n     * Get primitives\n     *\n     * @method getPrimitives\n     * @returns {AbstractShapePrimitive[]}\n     */\n    ShapeRecognized.prototype.getPrimitives = function () {\n        return this.primitives;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    ShapeRecognized.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    // Export\n    scope.ShapeRecognized = ShapeRecognized;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape result\n     *\n     * @class ShapeResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.ShapeDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    ShapeResult.prototype.constructor = ShapeResult;\n\n    // Export\n    scope.ShapeResult = ShapeResult;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Shape scratch-out\n     *\n     * @class ShapeScratchOut\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeScratchOut(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeScratchOut.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeScratchOut.prototype.constructor = ShapeScratchOut;\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.ShapeScratchOut = ShapeScratchOut;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Shape segment\n     *\n     * @class ShapeSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeSegment(obj) {\n        this.inkRanges = [];\n        this.candidates = [];\n        if (obj) {\n            this.elementType = obj.elementType;\n            this.uniqueID = obj.uniqueID;\n            this.selectedCandidateIndex = obj.selectedCandidateIndex;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'erased':\n                        this.candidates.push(new scope.ShapeErased(obj.candidates[i]));\n                        break;\n                    case 'scratchOut':\n                        this.candidates.push(new scope.ShapeScratchOut(obj.candidates[i]));\n                        break;\n                    case 'recognizedShape':\n                        this.candidates.push(new scope.ShapeRecognized(obj.candidates[i]));\n                        break;\n                    default:\n                        this.candidates.push(new scope.ShapeNotRecognized(obj.candidates[i]));\n                        break;\n                }\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    ShapeSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIndex;\n    };\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {ShapeCandidate[]}\n     */\n    ShapeSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {ShapeCandidate}\n     */\n    ShapeSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.ShapeSegment = ShapeSegment;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math node\n     *\n     * @class MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNode(obj) {\n        if (obj) {\n            this.name = obj.name;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathNode.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathNode = MathNode;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math non-terminal node\n     *\n     * @class MathNonTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNonTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'nonTerminalNode':\n                        this.candidates.push(new scope.MathNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'terminalNode':\n                        this.candidates.push(new scope.MathTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'rule':\n                        this.candidates.push(new scope.MathRuleNode(obj.candidates[i]));\n                        break;\n                    case 'cell':\n                        this.candidates.push(new scope.MathCellNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'border':\n                        this.candidates.push(new scope.MathBorderNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'table':\n                        this.candidates.push(new scope.MathTableRuleNode(obj.candidates[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.candidates[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathNonTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathNonTerminalNode.prototype.constructor = MathNonTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathNode[]}\n     */\n    MathNonTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathNode}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathNonTerminalNode.prototype.getInkRanges = function () {\n        if (this.getSelectedCandidate()) {\n            return this.getSelectedCandidate().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    // Export\n    scope.MathNonTerminalNode = MathNonTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract math result\n     *\n     * @class MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is LaTeX result\n     *\n     * @method isLatex\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isLaTex = function () {\n        return this.type === 'LATEX';\n    };\n\n    /**\n     * Is MathML result\n     *\n     * @method isMathMl\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isMathMl = function () {\n        return this.type === 'MATHML';\n    };\n\n    /**\n     * Is SymbolTree result\n     *\n     * @method isSymbolTree\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isSymbolTree = function () {\n        return this.type === 'SYMBOLTREE';\n    };\n\n    // Export\n    scope.MathResultElement = MathResultElement;\n})(MyScript);\n(function (scope) {\n    \n    /**\n     * Math rule node\n     *\n     * @class MathRuleNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathRuleNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.children = [];\n        if (obj) {\n            this.name = obj.name;\n            for (var i in obj.children) {\n                switch (obj.children[i].type) {\n                    case 'nonTerminalNode':\n                        this.children.push(new scope.MathNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'terminalNode':\n                        this.children.push(new scope.MathTerminalNode(obj.children[i]));\n                        break;\n                    case 'rule':\n                        this.children.push(new scope.MathRuleNode(obj.children[i]));\n                        break;\n                    case 'cell':\n                        this.children.push(new scope.MathCellNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'border':\n                        this.children.push(new scope.MathBorderNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'table':\n                        this.children.push(new scope.MathTableRuleNode(obj.children[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.children[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRuleNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathRuleNode.prototype.constructor = MathRuleNode;\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathRuleNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {MathNode[]}\n     */\n    MathRuleNode.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathRuleNode.prototype.getInkRanges = function () {\n        var inkRanges = [];\n        for (var i in this.getChildren()) {\n            var childInkRanges = this.getChildren()[i].getInkRanges();\n            for (var j in childInkRanges) {\n                inkRanges.push(childInkRanges[j]);\n            }\n        }\n        return inkRanges;\n    };\n\n    // Export\n    scope.MathRuleNode = MathRuleNode;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math document\n     *\n     * @class MathDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                var result = obj.results[i];\n                switch (result.type) {\n                    case 'MATHML':\n                        this.results.push(new scope.MathMathMLResultElement(result));\n                        break;\n                    case 'LATEX':\n                        this.results.push(new scope.MathLaTexResultElement(result));\n                        break;\n                    case 'SYMBOLTREE':\n                        this.results.push(new scope.MathSymbolTreeResultElement(result));\n                        break;\n                    case 'OFFICEOPENXMLMATH':\n                        this.results.push(new scope.MathOfficeOpenXmlMathResultElement(result));\n                        break;\n                    default:\n                        throw new Error('Unknown math result type: ' + result.type);\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MathScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MathResultElement[]}\n     */\n    MathDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MathScratchOut[]}\n     */\n    MathDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MathDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MathDocument = MathDocument;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math ink range\n     *\n     * @class MathInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathInkRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MathInkRange = MathInkRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * MathOfficeOpenXmlMathResultElement result element\n     *\n     * @class MathOfficeOpenXmlMathResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathOfficeOpenXmlMathResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n\n    /**\n     * Inheritance property\n     */\n    MathOfficeOpenXmlMathResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathOfficeOpenXmlMathResultElement.prototype.constructor = MathOfficeOpenXmlMathResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathOfficeOpenXmlMathResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathOfficeOpenXmlMathResultElement = MathOfficeOpenXmlMathResultElement;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * LaTex result element\n     *\n     * @class MathLaTexResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathLaTexResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathLaTexResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathLaTexResultElement.prototype.constructor = MathLaTexResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathLaTexResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathLaTexResultElement = MathLaTexResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * MathML result element\n     *\n     * @class MathMathMLResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathMathMLResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathMathMLResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathMathMLResultElement.prototype.constructor = MathMathMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathMathMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathMathMLResultElement = MathMathMLResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math result\n     *\n     * @class MathResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MathResult.prototype.constructor = MathResult;\n\n    // Export\n    scope.MathResult = MathResult;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math scratch-out\n     *\n     * @class MathScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathScratchOut(obj) {\n        this.inkRanges = [];\n        this.erasedInkRanges = [];\n        if (obj) {\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.erasedInkRanges) {\n                this.erasedInkRanges.push(new scope.MathInkRange(obj.erasedInkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get erased ink ranges\n     *\n     * @method getErasedInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getErasedInkRanges = function () {\n        return this.erasedInkRanges;\n    };\n\n    // Export\n    scope.MathScratchOut = MathScratchOut;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math symbol tree\n     *\n     * @class MathSymbolTreeResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathSymbolTreeResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            if (obj.root) {\n                switch (obj.root.type) {\n                    case 'nonTerminalNode':\n                        this.root = new scope.MathNonTerminalNode(obj.root);\n                        break;\n                    case 'terminalNode':\n                        this.root = new scope.MathTerminalNode(obj.root);\n                        break;\n                    case 'rule':\n                        this.root = new scope.MathRuleNode(obj.root);\n                        break;\n                    case 'cell':\n                        this.root = new scope.MathCellNonTerminalNode(obj.root);\n                        break;\n                    case 'border':\n                        this.root = new scope.MathBorderNonTerminalNode(obj.root);\n                        break;\n                    case 'table':\n                        this.root = new scope.MathTableRuleNode(obj.root);\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.root.type);\n                }\n                this.value = JSON.stringify(obj.root, null, '  ');\n            } else {\n                throw new Error('Missing root');\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSymbolTreeResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathSymbolTreeResultElement.prototype.constructor = MathSymbolTreeResultElement;\n\n    /**\n     * Get tree root\n     *\n     * @method getRoot\n     * @returns {MathNode}\n     */\n    MathSymbolTreeResultElement.prototype.getRoot = function () {\n        return this.root;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathSymbolTreeResultElement.prototype.getInkRanges = function () {\n        if (this.getRoot()) {\n            return this.getRoot().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    /**\n    * Get value\n    *\n    * @method getValue\n    * @returns {String}\n    */\n    MathSymbolTreeResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathSymbolTreeResultElement = MathSymbolTreeResultElement;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math terminal node\n     *\n     * @class MathTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.MathTerminalNodeCandidate(obj.candidates[i]));\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathTerminalNode.prototype.constructor = MathTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathTerminalNodeCandidate[]}\n     */\n    MathTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathTerminalNode.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathTerminalNodeCandidate}\n     */\n    MathTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.MathTerminalNode = MathTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math terminal node candidate\n     *\n     * @class MathTerminalNodeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNodeCandidate(obj) {\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MathTerminalNodeCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    MathTerminalNodeCandidate.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    // Export\n    scope.MathTerminalNodeCandidate = MathTerminalNodeCandidate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Math border data\n     *\n     * @class MathBorderData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderData(obj) {\n        if (obj) {\n            this.position = obj.position;\n            this.start = obj.start;\n            this.stop = obj.stop;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get position\n     *\n     * @method getPosition\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getPosition = function () {\n        return this.position;\n    };\n\n    /**\n     * Get start\n     *\n     * @method getStart\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStart = function () {\n        return this.start;\n    };\n\n    /**\n     * Get stop\n     *\n     * @method getStop\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStop = function () {\n        return this.stop;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathBorderData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathBorderData = MathBorderData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math border non-terminal node\n     *\n     * @class MathBorderNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathBorderData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathBorderNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathBorderNonTerminalNode.prototype.constructor = MathBorderNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathBorderData}\n     */\n    MathBorderNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathBorderNonTerminalNode = MathBorderNonTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math cell data\n     *\n     * @class MathCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellData(obj) {\n        if (obj) {\n            this.columnStart = obj.columnStart;\n            this.columnStop = obj.columnStop;\n            this.rowStart = obj.rowStart;\n            this.rowStop = obj.rowStop;\n        }\n    }\n\n    /**\n     * Get column start\n     *\n     * @method getColumnStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStart = function () {\n        return this.columnStart;\n    };\n\n    /**\n     * Get column stop\n     *\n     * @method getColumnStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStop = function () {\n        return this.columnStop;\n    };\n\n    /**\n     * Get row start\n     *\n     * @method getRowStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStart = function () {\n        return this.rowStart;\n    };\n\n    /**\n     * Get row stop\n     *\n     * @method getRowStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStop = function () {\n        return this.rowStop;\n    };\n\n    // Export\n    scope.MathCellData = MathCellData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math cell non-terminal node\n     *\n     * @class MathCellNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathCellNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathCellNonTerminalNode.prototype.constructor = MathCellNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathCellData}\n     */\n    MathCellNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathCellNonTerminalNode = MathCellNonTerminalNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math table data\n     *\n     * @class MathTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.MathTableData = MathTableData;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math table rule node\n     *\n     * @class MathTableRuleNode\n     * @extends MathRuleNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableRuleNode(obj) {\n        scope.MathRuleNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathTableData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTableRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathTableRuleNode.prototype.constructor = MathTableRuleNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathTableData}\n     */\n    MathTableRuleNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathTableRuleNode = MathTableRuleNode;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * WebSocket recognition math result message\n     *\n     * @class MathResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathResponseWSMessage.prototype.constructor = MathResponseWSMessage;\n\n    // Export\n    scope.MathResponseWSMessage = MathResponseWSMessage;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Abstract music element\n     *\n     * @class MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicElement(obj) {\n        if (obj) {\n            this.inputRanges = [];\n            this.elementType = obj.elementType;\n            this.inputRanges = obj.inputRanges;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    MusicElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicElement.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    // Export\n    scope.MusicElement = MusicElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Abstract music result element\n     *\n     * @class MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is MusicXML\n     *\n     * @method isMusicXML\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isMusicXML = function () {\n        return this.type === 'MUSICXML';\n    };\n\n    /**\n     * Is ScoreTree\n     *\n     * @method isScoreTree\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isScoreTree = function () {\n        return this.type === 'SCORETREE';\n    };\n\n    // Export\n    scope.MusicResultElement = MusicResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music accidental\n     *\n     * @class MusicAccidental\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAccidental(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidental.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidental.prototype.constructor = MusicAccidental;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicAccidental.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicAccidental = MusicAccidental;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music annotation\n     *\n     * @class MusicAnnotation\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAnnotation(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.label = obj.label;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAnnotation.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAnnotation.prototype.constructor = MusicAnnotation;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MusicAnnotation.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    // Export\n    scope.MusicAnnotation = MusicAnnotation;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music arpeggiate\n     *\n     * @class MusicArpeggiate\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicArpeggiate(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiate.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiate.prototype.constructor = MusicArpeggiate;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicArpeggiate.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicArpeggiate = MusicArpeggiate;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music bar\n     *\n     * @class MusicBar\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBar(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        if (obj) {\n            this.repeatDirection = obj.repeatDirection;\n            this.style = obj.style;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBar.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBar.prototype.constructor = MusicBar;\n\n    /**\n     * Get repeat direction\n     *\n     * @method getRepeatDirection\n     * @returns {String}\n     */\n    MusicBar.prototype.getRepeatDirection = function () {\n        return this.repeatDirection;\n    };\n\n    /**\n     * Set repeat direction\n     *\n     * @method setRepeatDirection\n     * @param {String} repeatDirection\n     */\n    MusicBar.prototype.setRepeatDirection = function (repeatDirection) {\n        this.repeatDirection = repeatDirection;\n    };\n\n    /**\n     * Get style\n     *\n     * @method getStyle\n     * @returns {String}\n     */\n    MusicBar.prototype.getStyle = function () {\n        return this.style;\n    };\n\n    /**\n     * Set style\n     *\n     * @method setStyle\n     * @param {String} style\n     */\n    MusicBar.prototype.setStyle = function (style) {\n        this.style = style;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicBar.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Set decorations\n     *\n     * @method setDecorations\n     * @param {MusicDecoration[]}\n     */\n    MusicBar.prototype.setDecorations = function (decorations) {\n        this.decorations = decorations;\n    };\n\n    // Export\n    scope.MusicBar = MusicBar;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music beam\n     *\n     * @class MusicBeam\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBeam(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.gap = obj.gap;\n            this.slope = obj.slope;\n            this.placement = obj.placement;\n            this.leftCount = obj.leftCount;\n            this.rightCount = obj.rightCount;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeam.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBeam.prototype.constructor = MusicBeam;\n\n    /**\n     * Get gap\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set gap\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicBeam.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    /**\n     * Get slope\n     *\n     * @method getSlope\n     * @returns {String}\n     */\n    MusicBeam.prototype.getSlope = function () {\n        return this.slope;\n    };\n\n    /**\n     * Set slope\n     *\n     * @method setSlope\n     * @param {String} slope\n     */\n    MusicBeam.prototype.setSlope = function (slope) {\n        this.slope = slope;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicBeam.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicBeam.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    /**\n     * Get left count\n     *\n     * @method getLeftCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getLeftCount = function () {\n        return this.leftCount;\n    };\n\n    /**\n     * Set left count\n     *\n     * @method setLeftCount\n     * @param {Number} leftCount\n     */\n    MusicBeam.prototype.setLeftCount = function (leftCount) {\n        this.leftCount = leftCount;\n    };\n\n    /**\n     * Get right count\n     *\n     * @method getRightCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getRightCount = function () {\n        return this.rightCount;\n    };\n\n    /**\n     * Set right count\n     *\n     * @method setRightCount\n     * @param {Number} rightCount\n     */\n    MusicBeam.prototype.setRightCount = function (rightCount) {\n        this.rightCount = rightCount;\n    };\n\n\n    // Export\n    scope.MusicBeam = MusicBeam;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music chord\n     *\n     * @class MusicChord\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicChord(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.notes = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.duration = obj.duration;\n            this.arpeggiate = new scope.MusicArpeggiate(obj.arpeggiate);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.notes) {\n                this.notes.push(new scope.MusicNote(obj.notes[j]));\n            }\n            for (var k in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[k]);\n            }\n            for (var l in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[l]));\n            }\n            for (var m in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[m]));\n            }\n            for (var n in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[n]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicChord.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicChord.prototype.constructor = MusicChord;\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicChord.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get arpeggiate\n     *\n     * @method getArpeggiate\n     * @returns {MusicArpeggiate}\n     */\n    MusicChord.prototype.getArpeggiate = function () {\n        return this.arpeggiate;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicChord.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicChord.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get notes\n     *\n     * @method getNotes\n     * @returns {MusicNote[]}\n     */\n    MusicChord.prototype.getNotes = function () {\n        return this.notes;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicChord.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicChord.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicChord = MusicChord;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music clef\n     * default values: symbol='G', octave=0\n     *\n     * @class MusicClef\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicClef(obj) {\n        scope.MusicElement.call(this, obj);\n        this.symbol = 'G';\n        this.octave = 0;\n        if (obj) {\n            this.line = obj.line;\n            this.yAnchor = obj.yAnchor;\n            this.octave = obj.octave;\n            this.symbol = obj.symbol;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClef.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicClef.prototype.constructor = MusicClef;\n\n    /**\n     * Get y anchor\n     *\n     * @method getYAnchor\n     * @returns {Number}\n     */\n    MusicClef.prototype.getYAnchor = function () {\n        return this.yAnchor;\n    };\n\n    /**\n     * Set y anchor\n     *\n     * @method setYAnchor\n     * @param {Number} yAnchor\n     */\n    MusicClef.prototype.setYAnchor = function (yAnchor) {\n        this.yAnchor = yAnchor;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicClef.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Set line\n     *\n     * @method setLine\n     * @param {Number} line\n     */\n    MusicClef.prototype.setLine = function (line) {\n        this.line = line;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicClef.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Set octave\n     *\n     * @method setOctave\n     * @param {Number} octave\n     */\n    MusicClef.prototype.setOctave = function (octave) {\n        this.octave = octave;\n    };\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicClef.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicClef.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    // Export\n    scope.MusicClef = MusicClef;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music decoration\n     *\n     * @class MusicDecoration\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDecoration(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.symbol = obj.symbol;\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecoration.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDecoration.prototype.constructor = MusicDecoration;\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicDecoration.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicDecoration.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    // Export\n    scope.MusicDecoration = MusicDecoration;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music document\n     *\n     * @class MusicDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                switch (obj.results[i].type) {\n                    case 'MUSICXML':\n                        this.results.push(new scope.MusicXMLResultElement(obj.results[i]));\n                        break;\n                    default:\n                        this.results.push(new scope.MusicScoreTreeResultElement(obj.results[i]));\n                        break;\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MusicScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MusicResultElement[]}\n     */\n    MusicDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MusicScratchOut[]}\n     */\n    MusicDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MusicDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MusicDocument = MusicDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music dots\n     *\n     * @class MusicDots\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDots(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.count = obj.count;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDots.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDots.prototype.constructor = MusicDots;\n\n    /**\n     * Get dots counts\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicDots.prototype.getCount = function () {\n        return this.count;\n    };\n\n    // Export\n    scope.MusicDots = MusicDots;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music head\n     *\n     * @class MusicHead\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicHead(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHead.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicHead.prototype.constructor = MusicHead;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicHead.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicHead = MusicHead;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music input range\n     *\n     * @class MusicInputRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicInputRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MusicInputRange = MusicInputRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music key signature\n     *\n     * @class MusicKeySignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignature(obj) {\n        scope.MusicElement.call(this, obj);\n        this.accidentals = [];\n        if (obj) {\n            this.signature = new scope.MusicKeySignatureData(obj.signature);\n            for (var i in obj.accidentals) {\n                this.accidentals.push(new scope.MusicAccidental(obj.accidentals[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicKeySignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicKeySignature.prototype.constructor = MusicKeySignature;\n\n    /**\n     * Get signature\n     *\n     * @method getSignature\n     * @returns {MusicKeySignatureData}\n     */\n    MusicKeySignature.prototype.getSignature = function () {\n        return this.signature;\n    };\n\n    /**\n     * Get accidentals\n     *\n     * @method getAccidentals\n     * @returns {MusicAccidental[]}\n     */\n    MusicKeySignature.prototype.getAccidentals = function () {\n        return this.accidentals;\n    };\n\n    // Export\n    scope.MusicKeySignature = MusicKeySignature;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music key signature data\n     *\n     * @class MusicKeySignatureData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignatureData(obj) {\n        if (obj) {\n            this.fifths = obj.fifths;\n            this.cancel = obj.cancel;\n        }\n    }\n\n    /**\n     * Get fifths\n     *\n     * @method getFifths\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getFifths = function () {\n        return this.fifths;\n    };\n\n    /**\n     * Get cancel\n     *\n     * @method getCancel\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getCancel = function () {\n        return this.cancel;\n    };\n\n    // Export\n    scope.MusicKeySignatureData = MusicKeySignatureData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music ledger line\n     *\n     * @class MusicLedgerLine\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicLedgerLine(obj) {\n        scope.MusicElement.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLine.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLine.prototype.constructor = MusicLedgerLine;\n\n    // Export\n    scope.MusicLedgerLine = MusicLedgerLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music note\n     *\n     * @class MusicNote\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicNote(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.accidental = new scope.MusicAccidental(obj.accidental);\n            this.dots = new scope.MusicDots(obj.dots);\n            this.duration = obj.duration;\n            this.head = new scope.MusicHead(obj.head);\n            this.line = obj.line;\n            this.pitch = new scope.MusicPitchData(obj.pitch);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            this.startTie = new scope.MusicTie(obj.startTie);\n            this.stopTie = new scope.MusicTie(obj.stopTie);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.type = obj.type;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[j]);\n            }\n            for (var k in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[k]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicNote.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicNote.prototype.constructor = MusicNote;\n\n    /**\n     * Get accidental\n     *\n     * @method getAccidental\n     * @returns {MusicAccidental}\n     */\n    MusicNote.prototype.getAccidental = function () {\n        return this.accidental;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicNote.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicNote.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get head\n     *\n     * @method getHead\n     * @returns {MusicHead}\n     */\n    MusicNote.prototype.getHead = function () {\n        return this.head;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicNote.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Get pitch\n     *\n     * @method getPitch\n     * @returns {MusicPitchData}\n     */\n    MusicNote.prototype.getPitch = function () {\n        return this.pitch;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicNote.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get start tie\n     *\n     * @method getStartTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStartTie = function () {\n        return this.startTie;\n    };\n\n    /**\n     * Get stop tie\n     *\n     * @method getStopTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStopTie = function () {\n        return this.stopTie;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicNote.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicNote.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicNote.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicNote.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicNote.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicNote = MusicNote;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music part\n     *\n     * @class MusicPart\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPart(obj) {\n        this.elements = [];\n        if (obj) {\n            for (var i in obj.elements) {\n                switch (obj.elements[i].elementType) {\n                    case 'accidental':\n                        this.elements.push(new scope.MusicAccidental(obj.elements[i]));\n                        break;\n                    case 'annotation':\n                        this.elements.push(new scope.MusicAnnotation(obj.elements[i]));\n                        break;\n                    case 'arpeggiate':\n                        this.elements.push(new scope.MusicArpeggiate(obj.elements[i]));\n                        break;\n                    case 'bar':\n                        this.elements.push(new scope.MusicBar(obj.elements[i]));\n                        break;\n                    case 'beam':\n                        this.elements.push(new scope.MusicBeam(obj.elements[i]));\n                        break;\n                    case 'chord':\n                        this.elements.push(new scope.MusicChord(obj.elements[i]));\n                        break;\n                    case 'clef':\n                        this.elements.push(new scope.MusicClef(obj.elements[i]));\n                        break;\n                    case 'decoration':\n                        this.elements.push(new scope.MusicDecoration(obj.elements[i]));\n                        break;\n                    case 'dots':\n                        this.elements.push(new scope.MusicDots(obj.elements[i]));\n                        break;\n                    case 'head':\n                        this.elements.push(new scope.MusicHead(obj.elements[i]));\n                        break;\n                    case 'keySignature':\n                        this.elements.push(new scope.MusicKeySignature(obj.elements[i]));\n                        break;\n                    case 'ledgerLine':\n                        this.elements.push(new scope.MusicLedgerLine(obj.elements[i]));\n                        break;\n                    case 'note':\n                        this.elements.push(new scope.MusicNote(obj.elements[i]));\n                        break;\n                    case 'rest':\n                        this.elements.push(new scope.MusicRest(obj.elements[i]));\n                        break;\n                    case 'slur':\n                        this.elements.push(new scope.MusicSlur(obj.elements[i]));\n                        break;\n                    case 'stem':\n                        this.elements.push(new scope.MusicStem(obj.elements[i]));\n                        break;\n                    case 'tie':\n                        this.elements.push(new scope.MusicTie(obj.elements[i]));\n                        break;\n                    case 'timeSignature':\n                        this.elements.push(new scope.MusicTimeSignature(obj.elements[i]));\n                        break;\n                    case 'tuplet':\n                        this.elements.push(new scope.MusicTuplet(obj.elements[i]));\n                        break;\n                    case 'tupletBracket':\n                        this.elements.push(new scope.MusicTupletBracket(obj.elements[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown music element');\n                }\n            }\n        }\n    }\n\n    /**\n     * Get elements\n     *\n     * @method getElements\n     * @returns {MusicElement[]}\n     */\n    MusicPart.prototype.getElements = function () {\n        return this.elements;\n    };\n\n    // Export\n    scope.MusicPart = MusicPart;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music pitch data\n     *\n     * @class MusicPitchData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPitchData(obj) {\n        if (obj) {\n            this.alteration = obj.alteration;\n            this.octave = obj.octave;\n            this.step = obj.step;\n        }\n    }\n\n    /**\n     * Get alteration\n     *\n     * @method getAlteration\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getAlteration = function () {\n        return this.alteration;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Get step\n     *\n     * @method getStep\n     * @returns {String}\n     */\n    MusicPitchData.prototype.getStep = function () {\n        return this.step;\n    };\n\n    // Export\n    scope.MusicPitchData = MusicPitchData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music rest\n     *\n     * @class MusicRest\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicRest(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.type = obj.type;\n            this.dots = new scope.MusicDots(obj.dots);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.duration = obj.duration;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRest.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicRest.prototype.constructor = MusicRest;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicRest.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicRest.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicRest.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicRest.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicRest.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicRest = MusicRest;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music result\n     *\n     * @class MusicResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MusicDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MusicResult.prototype.constructor = MusicResult;\n\n    // Export\n    scope.MusicResult = MusicResult;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Music score\n     *\n     * @class MusicScore\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScore(obj) {\n        this.parts = [];\n        if (obj) {\n            for (var i in obj.parts) {\n                this.parts.push(new scope.MusicPart(obj.parts[i]));\n            }\n        }\n    }\n\n    /**\n     * Get parts\n     *\n     * @method getParts\n     * @returns {MusicPart[]}\n     */\n    MusicScore.prototype.getParts = function () {\n        return this.parts;\n    };\n\n    // Export\n    scope.MusicScore = MusicScore;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music score tree\n     *\n     * @class MusicScoreTreeResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScoreTreeResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.score = new scope.MusicScore(obj.score);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicScoreTreeResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicScoreTreeResultElement.prototype.constructor = MusicScoreTreeResultElement;\n\n    /**\n     * Get score\n     *\n     * @method getScore\n     * @returns {MusicScore}\n     */\n    MusicScoreTreeResultElement.prototype.getScore = function () {\n        return this.score;\n    };\n\n    // Export\n    scope.MusicScoreTreeResultElement = MusicScoreTreeResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music scratch-out\n     *\n     * @class MusicScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScratchOut(obj) {\n        this.inputRanges = [];\n        this.erasedInputRanges = [];\n        if (obj) {\n            for (var i in obj.inputRanges) {\n                this.inputRanges.push(new scope.MusicInputRange(obj.inputRanges[i]));\n            }\n            for (var j in obj.erasedInputRanges) {\n                this.erasedInputRanges.push(new scope.MusicInputRange(obj.erasedInputRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    /**\n     * Get erased input ranges\n     *\n     * @method getErasedInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getErasedInputRanges = function () {\n        return this.erasedInputRanges;\n    };\n\n    // Export\n    scope.MusicScratchOut = MusicScratchOut;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music slur\n     *\n     * @class MusicSlur\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicSlur(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicSlur.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicSlur.prototype.constructor = MusicSlur;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicSlur.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicSlur = MusicSlur;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music stem\n     *\n     * @class MusicStem\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicStem(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStem.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicStem.prototype.constructor = MusicStem;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicStem.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicStem = MusicStem;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music tie\n     *\n     * @class MusicTie\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTie(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTie.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTie.prototype.constructor = MusicTie;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTie.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicTie = MusicTie;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music time modification data\n     *\n     * @class MusicTimeModificationData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeModificationData(obj) {\n        if (obj) {\n            this.actual = obj.actual;\n            this.dots = obj.dots;\n            this.normal = obj.normal;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get actual\n     *\n     * @method getActual\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getActual = function () {\n        return this.actual;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get normal\n     *\n     * @method getNormal\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getNormal = function () {\n        return this.normal;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeModificationData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeModificationData = MusicTimeModificationData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music time signature\n     *\n     * @class MusicTimeSignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeSignature(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.top = new scope.MusicAnnotation(obj.top);\n            this.bottom = new scope.MusicAnnotation(obj.bottom);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignature.prototype.constructor = MusicTimeSignature;\n\n    /**\n     * Get top\n     *\n     * @method getTop\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Get bottom\n     *\n     * @method getBottom\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getBottom = function () {\n        return this.bottom;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeSignature.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeSignature = MusicTimeSignature;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music tuplet bracket\n     *\n     * @class MusicTupletBracket\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTupletBracket(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTupletBracket.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTupletBracket.prototype.constructor = MusicTupletBracket;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTupletBracket.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTupletBracket = MusicTupletBracket;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Music tuplet\n     *\n     * @class MusicTuplet\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTuplet(obj) {\n        scope.MusicElement.call(this, obj);\n        this.brackets = [];\n        if (obj) {\n            this.placement = obj.placement;\n            this.number = new scope.MusicAnnotation(obj.number);\n            for (var i in obj.brackets) {\n                this.brackets.push(new scope.MusicTupletBracket(obj.brackets[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTuplet.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTuplet.prototype.constructor = MusicTuplet;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTuplet.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Get number\n     *\n     * @method getNumber\n     * @returns {MusicAnnotation}\n     */\n    MusicTuplet.prototype.getNumber = function () {\n        return this.number;\n    };\n\n    /**\n     * Get brackets\n     *\n     * @method getBrackets\n     * @returns {Array}\n     */\n    MusicTuplet.prototype.getBrackets = function () {\n        return this.brackets;\n    };\n\n    // Export\n    scope.MusicTuplet = MusicTuplet;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * MusicXML result\n     *\n     * @class MusicXMLResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicXMLResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicXMLResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicXMLResultElement.prototype.constructor = MusicXMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicXMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MusicXMLResultElement = MusicXMLResultElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer element\n     *\n     * @class AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElement(obj) {\n        if (obj) {\n            this.elementType = obj.elementType;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    AnalyzerElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    // Export\n    scope.AnalyzerElement = AnalyzerElement;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer table cell\n     *\n     * @class AnalyzerCell\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCell(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerCell.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerCell.prototype.constructor = AnalyzerCell;\n\n    /**\n     * Get analyzer cell data\n     *\n     * @method getData\n     * @returns {AnalyzerCellData}\n     */\n    AnalyzerCell.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerCell = AnalyzerCell;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer cell data\n     *\n     * @class AnalyzerCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCellData(obj) {\n        if (obj) {\n            this.firstColumn = obj.firstColumn;\n            this.lastColumn = obj.lastColumn;\n            this.firstRow = obj.firstRow;\n            this.lastRow = obj.lastRow;\n            this.height = obj.height;\n            this.width = obj.width;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.topBorder = obj.topBorder;\n            this.bottomBorder = obj.bottomBorder;\n            this.leftBorder = obj.leftBorder;\n            this.rightBorder = obj.rightBorder;\n        }\n    }\n\n    /**\n     * Get first column\n     *\n     * @method getFirstColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstColumn = function () {\n        return this.firstColumn;\n    };\n\n    /**\n     * Get last column\n     *\n     * @method getLastColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastColumn = function () {\n        return this.lastColumn;\n    };\n\n    /**\n     * Get first row\n     *\n     * @method getFirstRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstRow = function () {\n        return this.firstRow;\n    };\n\n    /**\n     * Get last row\n     *\n     * @method getLastRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastRow = function () {\n        return this.lastRow;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerCellData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerCellData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Has top border\n     *\n     * @method hasTopBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasTopBorder = function () {\n        return this.topBorder;\n    };\n\n    /**\n     * Has bottom border\n     *\n     * @method hasBottomBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasBottomBorder = function () {\n        return this.bottomBorder;\n    };\n\n    /**\n     * Has left border\n     *\n     * @method hasLeftBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasLeftBorder = function () {\n        return this.leftBorder;\n    };\n\n    /**\n     * Has right border\n     *\n     * @method hasRightBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasRightBorder = function () {\n        return this.rightBorder;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerCellData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        rectangle.setTopLeftPoint(this.getTopLeftPoint());\n        rectangle.setWidth(this.getWidth());\n        rectangle.setHeight(this.getHeight());\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerCellData = AnalyzerCellData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer document\n     *\n     * @class AnalyzerDocument\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerDocument(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.textLines = [];\n        this.shapes = [];\n        this.tables = [];\n        this.groups = [];\n        if (obj) {\n            for (var i in obj.textLines) {\n                this.textLines.push(new scope.AnalyzerTextLine(obj.textLines[i]));\n            }\n            for (var j in obj.shapes) {\n                this.shapes.push(new scope.ShapeSegment(obj.shapes[j]));\n            }\n            for (var k in obj.tables) {\n                this.tables.push(new scope.AnalyzerTable(obj.tables[k]));\n            }\n            for (var l in obj.groups) {\n                this.groups.push(new scope.AnalyzerGroup(obj.groups[l]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerDocument.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerDocument.prototype.constructor = AnalyzerDocument;\n\n    /**\n     * Get text lines\n     *\n     * @method getTextLines\n     * @returns {AnalyzerTextLine[]}\n     */\n    AnalyzerDocument.prototype.getTextLines = function () {\n        return this.textLines;\n    };\n\n    /**\n     * Get shapes\n     *\n     * @method getShapes\n     * @returns {ShapeSegment[]}\n     */\n    AnalyzerDocument.prototype.getShapes = function () {\n        return this.shapes;\n    };\n\n    /**\n     * Get tables\n     *\n     * @method getTables\n     * @returns {AnalyzerTable[]}\n     */\n    AnalyzerDocument.prototype.getTables = function () {\n        return this.tables;\n    };\n\n    /**\n     * Get groups\n     *\n     * @method getGroups\n     * @returns {AnalyzerGroup[]}\n     */\n    AnalyzerDocument.prototype.getGroups = function () {\n        return this.groups;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    AnalyzerDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getShapes()) {\n            var currentSeg = this.getShapes()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.AnalyzerDocument = AnalyzerDocument;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer element reference\n     *\n     * @class AnalyzerElementReference\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElementReference(obj) {\n        if (obj) {\n            this.uniqueID = obj.uniqueID;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerElementReference = AnalyzerElementReference;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer group\n     *\n     * @class AnalyzerGroup\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerGroup(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.elementReferences = [];\n        if (obj) {\n            this.type = obj.type;\n            this.uniqueID = obj.uniqueID;\n            for (var i in obj.elementReferences) {\n                this.elementReferences.push(new scope.AnalyzerElementReference(obj.elementReferences[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerGroup.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerGroup.prototype.constructor = AnalyzerGroup;\n\n    /**\n     * Get element references\n     *\n     * @method getElementReferences\n     * @returns {AnalyzerElementReference[]}\n     */\n    AnalyzerGroup.prototype.getElementReferences = function () {\n        return this.elementReferences;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get unique Id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    // Export\n    scope.AnalyzerGroup = AnalyzerGroup;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer ink range\n     *\n     * @class AnalyzerInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerInkRange(obj) {\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n            this.stroke = new scope.AnalyzerRecognizedStroke(obj.stroke);\n        }\n    }\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    /**\n     * Get stroke\n     *\n     * @method getStroke\n     * @returns {null|*}\n     */\n    AnalyzerInkRange.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    // Export\n    scope.AnalyzerInkRange = AnalyzerInkRange;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer line\n     *\n     * @class AnalyzerLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerLineData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerLine.prototype.constructor = AnalyzerLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerLineData}\n     */\n    AnalyzerLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerLine = AnalyzerLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer line data\n     *\n     * @class AnalyzerLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLineData(obj) {\n        if (obj) {\n            this.p1 = new scope.Point(obj.p1);\n            this.p2 = new scope.Point(obj.p2);\n        }\n    }\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    // Export\n    scope.AnalyzerLineData = AnalyzerLineData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * AnalyzerRecognizedStroke\n     *\n     * @class AnalyzerRecognizedStroke\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerRecognizedStroke(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerRecognizedStroke.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    // Export\n    scope.AnalyzerRecognizedStroke = AnalyzerRecognizedStroke;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer result\n     *\n     * @class AnalyzerResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.AnalyzerDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerResult.prototype.constructor = AnalyzerResult;\n\n    // Export\n    scope.AnalyzerResult = AnalyzerResult;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Analyzer stroke type\n     *\n     * @class AnalyzerStrokeType\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerStrokeType(obj) {\n        if (obj) {\n            this.inkRange = new scope.AnalyzerInkRange(obj.inkRange);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get ink range\n     *\n     * @method getInkRange\n     * @returns {AnalyzerInkRange}\n     */\n    AnalyzerStrokeType.prototype.getInkRange = function () {\n        return this.inkRange;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerStrokeType.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerStrokeType = AnalyzerStrokeType;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer table\n     *\n     * @class AnalyzerTable\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTable(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.lines = [];\n        this.cells = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTableData(obj.data);\n            for (var i in obj.lines) {\n                this.lines.push(new scope.AnalyzerLine(obj.lines[i]));\n            }\n            for (var j in obj.cells) {\n                this.cells.push(new scope.AnalyzerCell(obj.cells[j]));\n            }\n            for (var k in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[k]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTable.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTable.prototype.constructor = AnalyzerTable;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTableData}\n     */\n    AnalyzerTable.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get lines\n     *\n     * @method getLines\n     * @returns {AnalyzerLine[]}\n     */\n    AnalyzerTable.prototype.getLines = function () {\n        return this.lines;\n    };\n\n    /**\n     * Get cells\n     *\n     * @method getCells\n     * @returns {AnalyzerCell[]}\n     */\n    AnalyzerTable.prototype.getCells = function () {\n        return this.cells;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTable.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerTable = AnalyzerTable;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer table data\n     *\n     * @class AnalyzerTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.AnalyzerTableData = AnalyzerTableData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer text line\n     *\n     * @class AnalyzerTextLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        this.underlineList = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTextLineData(obj.data);\n            this.result = new scope.TextDocument(obj.result);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.underlineList) {\n                this.underlineList.push(new scope.AnalyzerUnderline(obj.underlineList[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTextLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTextLine.prototype.constructor = AnalyzerTextLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTextLineData}\n     */\n    AnalyzerTextLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get text document\n     *\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    AnalyzerTextLine.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTextLine.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get underline list\n     *\n     * @method getUnderlineList\n     * @returns {AnalyzerUnderline[]}\n     */\n    AnalyzerTextLine.prototype.getUnderlineList = function () {\n        return this.underlineList;\n    };\n\n    // Export\n    scope.AnalyzerTextLine = AnalyzerTextLine;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer text line data\n     *\n     * @class AnalyzerTextLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLineData(obj) {\n        if (obj) {\n            this.baselinePos = obj.baselinePos;\n            this.toMidline = obj.toMidline;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.textHeight = obj.textHeight;\n            this.justificationType = obj.justificationType;\n            this.height = obj.height;\n            this.width = obj.width;\n        }\n    }\n\n    /**\n     * Get baseline position\n     *\n     * @method getBaselinePos\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getBaselinePos = function () {\n        return this.baselinePos;\n    };\n\n    /**\n     * Get to midline\n     *\n     * @method getToMidline\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getToMidline = function () {\n        return this.toMidline;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerTextLineData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Get text height\n     *\n     * @method getTextHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getTextHeight = function () {\n        return this.textHeight;\n    };\n\n    /**\n     * Get justification type\n     *\n     * @method getJustificationType\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getJustificationType = function () {\n        return this.justificationType;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerTextLineData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        if (this.getTopLeftPoint() || this.getWidth() || this.getHeight()) {\n            rectangle.setTopLeftPoint(this.getTopLeftPoint());\n            rectangle.setWidth(this.getWidth());\n            rectangle.setHeight(this.getHeight());\n        }\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerTextLineData = AnalyzerTextLineData;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer underline\n     *\n     * @class AnalyzerUnderline\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderline(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerUnderlineData(obj.data);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerUnderline.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerUnderline.prototype.constructor = AnalyzerUnderline;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerUnderlineData}\n     */\n    AnalyzerUnderline.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerUnderline.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerUnderline = AnalyzerUnderline;\n})(MyScript);\n\n\n(function (scope) {\n    /**\n     * Analyzer underline data\n     *\n     * @class AnalyzerUnderlineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderlineData(obj) {\n        if (obj) {\n            this.firstCharacter = obj.firstCharacter;\n            this.lastCharacter = obj.lastCharacter;\n        }\n    }\n\n    /**\n     * Get first character\n     *\n     * @method getFirstCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getFirstCharacter = function () {\n        return this.firstCharacter;\n    };\n\n    /**\n     * Get last character\n     *\n     * @method getLastCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getLastCharacter = function () {\n        return this.lastCharacter;\n    };\n\n    // Export\n    scope.AnalyzerUnderlineData = AnalyzerUnderlineData;\n})(MyScript);\n\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkInterface\n     * @constructor\n     */\n    function NetworkInterface() {\n    }\n\n    NetworkInterface.parseURL = function (url) {\n\n        var parser = document.createElement('a'),\n            searchObject = {},\n            queries, split, i;\n        // Let the browser do the work\n        parser.href = url;\n        // Convert query string to object\n        queries = parser.search.replace(/^\\?/, '').split('&');\n        for (i = 0; i < queries.length; i++) {\n            split = queries[i].split('=');\n            searchObject[split[0]] = split[1];\n        }\n        return {\n            protocol: parser.protocol,\n            host: parser.host,\n            hostname: parser.hostname,\n            port: parser.port,\n            pathname: parser.pathname,\n            search: parser.search,\n            searchObject: searchObject,\n            hash: parser.hash\n        };\n    };\n\n    /**\n     * Parse JSON String to Object\n     *\n     * @method parse\n     * @param {Object} req\n     * @returns {Object}\n     */\n    NetworkInterface.parse = function (req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return result;\n    };\n\n    /**\n     * Transform object data request to a list of parameters\n     *\n     * @method transformRequest\n     * @param {Object} [obj]\n     * @returns {String}\n     */\n    NetworkInterface.transformRequest = function (obj) {\n        var str = [];\n        for (var p in obj) {\n            if ((typeof obj[p] !== 'undefined') &&\n                (typeof obj[p] !== 'function')) {\n                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n            }\n        }\n        return str.join('&');\n    };\n\n    /**\n     * Send request to the network and return a promise\n     *\n     * @method xhr\n     * @param {String} type\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.xhr = function (type, url, data) {\n\n        return Q.Promise(function (resolve, reject, notify) {\n\n            function onStateChange() {\n                if (request.readyState === 4) {\n                    if (request.status >= 200 && request.status < 300) {\n                        resolve(NetworkInterface.parse(request));\n                    }\n                }\n            }\n\n            function onLoad() {\n                if (request.status >= 200 && request.status < 300) {\n                    resolve(NetworkInterface.parse(request));\n                } else {\n                    reject(new Error(request.responseText));\n                }\n            }\n\n            function onError() {\n                reject(new Error('Can\\'t XHR ' + url));\n            }\n\n            function onProgress(e) {\n                notify(e.loaded / e.total);\n            }\n\n            var request = new XMLHttpRequest();\n            request.open(type, url, true);\n            request.withCredentials = true;\n            request.setRequestHeader('Accept', 'application/json');\n            request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n            request.onerror = onError;\n            request.onprogress = onProgress;\n            request.onload = onLoad;\n            request.onreadystatechange = onStateChange;\n            request.send(NetworkInterface.transformRequest(data));\n        });\n    };\n\n    /**\n     * Get request\n     *\n     * @method get\n     * @param {String} src\n     * @param {Object} params\n     * @returns {Promise}\n     */\n    NetworkInterface.get = function (src, params) {\n        if (params) {\n            src += '?' + NetworkInterface.transformRequest(params);\n        }\n        return scope.NetworkInterface.xhr('GET', src, undefined);\n    };\n\n    /**\n     * Put request\n     *\n     * @method put\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.put = function (url, data) {\n        return scope.NetworkInterface.xhr('PUT', url, data);\n    };\n\n    /**\n     * Post request\n     *\n     * @method post\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.post = function (url, data) {\n        return scope.NetworkInterface.xhr('POST', url, data);\n    };\n\n    /**\n     * Delete request\n     *\n     * @method delete\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.delete = function (url, data) {\n        return scope.NetworkInterface.xhr('DELETE', url, data);\n    };\n\n    // Export\n    scope.NetworkInterface = NetworkInterface;\n})(MyScript, Q);\n\n\n/* jshint ignore:start */\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkWSInterface\n     * @constructor\n     */\n    function NetworkWSInterface() {\n    }\n\n    NetworkWSInterface.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this.close();\n            this._url = url;\n        }\n    };\n\n    NetworkWSInterface.prototype.getUrl = function () {\n        return this._url;\n    };\n\n    NetworkWSInterface.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this.close();\n            this._callback = callback;\n        }\n    };\n\n    NetworkWSInterface.prototype.getCallback = function () {\n        return this._callback;\n    };\n\n    NetworkWSInterface.prototype.getState = function () {\n        return _getWebSocketState(this._socket);\n    };\n\n    NetworkWSInterface.prototype.isClosed = function () {\n        return this.getState() === 3;\n    };\n\n    NetworkWSInterface.prototype.isClosing = function () {\n        return this.getState() === 2;\n    };\n\n    NetworkWSInterface.prototype.isOpen = function () {\n        return this.getState() === 1;\n    };\n\n    NetworkWSInterface.prototype.isConnecting = function () {\n        return this.getState() === 0;\n    };\n\n    NetworkWSInterface.prototype.open = function () {\n        if (this.getUrl() && this.getCallback() && ((this.getState() < 0) || this.isClosed())) {\n            this._socket = _openWebSocket(this.getUrl(), this.getCallback());\n        }\n    };\n\n    NetworkWSInterface.prototype.close = function (code, reason) {\n        if (this.getState() < 2) {\n            _closeWebSocket(this._socket, code, reason);\n        }\n    };\n\n    NetworkWSInterface.prototype.send = function (request) {\n        var state = _getWebSocketState(this._socket);\n        if (state  === 1) {\n            _sendMessage(this._socket, request);\n        } else {\n            this.open();\n        }\n    };\n\n    /**\n     *\n     * @param url\n     * @param callback\n     * @returns {WebSocket}\n     * @private\n     */\n    var _openWebSocket = function (url, callback) {\n        function onOpen(e) {\n            callback(e);\n        }\n        function onClose(e) {\n            callback(e);\n        }\n        function onError(e) {\n            callback(e);\n        }\n        function onMessage(e) {\n            callback({\n                type: e.type,\n                data: JSON.parse(e.data)\n            });\n        }\n\n        var socket = new WebSocket(url);\n        socket.onopen = onOpen;\n        socket.onclose = onClose;\n        socket.onerror = onError;\n        socket.onmessage = onMessage;\n        return socket;\n    };\n\n    /**\n     *\n     * @param socket\n     * @param code\n     * @param reason\n     * @private\n     */\n    var _closeWebSocket = function (socket, code, reason) {\n        if (socket) {\n            socket.close(code, reason);\n        }\n    };\n\n    /**\n     *\n     * @param socket\n     * @returns {*}\n     * @private\n     */\n    var _getWebSocketState = function (socket) {\n        if (socket) {\n            return socket.readyState;\n        }\n        return -1;\n    };\n\n    /**\n     *\n     * @param socket\n     * @param message\n     * @private\n     */\n    var _sendMessage = function (socket, message) {\n        if (socket) {\n            socket.send(JSON.stringify(message));\n        }\n    };\n\n    // Export\n    scope.NetworkWSInterface = NetworkWSInterface;\n})(MyScript, Q);\n/* jshint ignore:end */\n\n\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract recognizer interface\n     *\n     * @class AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AbstractRecognizer(host) {\n        this.setUrl(this.getProtocol() + 'cloud.myscript.com');\n        if (host) {\n            this.setUrl(this.getProtocol() + host);\n        }\n        this.setSSL(true);\n    }\n\n    AbstractRecognizer.prototype.getProtocol = function() {\n        return this._ssl? 'https://': 'http://';\n    };\n\n    AbstractRecognizer.prototype.getSSL = function() {\n        return this._ssl;\n    };\n\n    AbstractRecognizer.prototype.setSSL = function (ssl) {\n        if (ssl !== undefined) {\n            this._ssl = ssl;\n            this.setUrl(this.getProtocol() + this.getHost());\n        }\n    };\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractRecognizer.prototype.getHost = function() {\n        return scope.NetworkInterface.parseURL(this.getUrl()).host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @method setHost\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.setUrl(this.getProtocol() + host);\n        }\n    };\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getUrl\n     * @returns {String}\n     */\n    AbstractRecognizer.prototype.getUrl = function() {\n        return this.url;\n    };\n\n    /**\n     * Set the recognition service url\n     *\n     * @method setUrl\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this.url = url;\n        }\n    };\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AbstractParameter}\n     */\n    AbstractRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AbstractParameter} parameters\n     */\n    AbstractRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get precision\n     *\n     * @method getPrecision\n     * @returns {Number}\n     */\n    AbstractRecognizer.prototype.getPrecision = function () {\n        return this.precision;\n    };\n\n    /**\n     * Set precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    AbstractRecognizer.prototype.setPrecision = function (precision) {\n        this.precision = precision;\n    };\n\n    /**\n     * Get the recognition languages available for an application and a specific inputMode\n     *\n     * @method getAvailableLanguageList\n     * @param {String} applicationKey\n     * @param {String} inputMode\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.getAvailableLanguageList = function (applicationKey, inputMode) {\n        var data = new scope.RecognitionLanguagesData();\n        data.setApplicationKey(applicationKey);\n        data.setInputMode(inputMode);\n\n        return scope.NetworkInterface.get(this.getUrl() + '/api/v3.0/recognition/rest/text/languages.json', data).then(\n            function success(response) {\n                return response.result;\n            }\n        );\n    };\n\n    /**\n     * Do REST recognition\n     *\n     * @private\n     * @method doRestRecognition\n     * @param {AbstractRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.doRestRecognition = function (input, applicationKey, hmacKey, instanceId) {\n        if (input.getComponents) {\n            _filterStrokes(input.getComponents(), this.getPrecision());\n        } else if (input.getInputUnits) {\n            for (var i in input.getInputUnits()) {\n                _filterStrokes(input.getInputUnits()[i].getComponents(), this.getPrecision());\n            }\n        }\n\n        if (input instanceof scope.TextRecognitionInput) {\n            return _doTextRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.ShapeRecognitionInput) {\n            return _doShapeRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.MathRecognitionInput) {\n            return _doMathRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.MusicRecognitionInput) {\n            return _doMusicRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.AnalyzerRecognitionInput) {\n            return _doAnalyzerRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * Clear REST recognition\n     *\n     * @method clearRestRecognition\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.clearRestRecognition = function (instanceId) {\n        var data = {\n            instanceSessionId: instanceId\n        };\n        return _clearShapeRecognition(this.getUrl(), data);\n    };\n\n    /**\n     * Do text recognition\n     *\n     * @private\n     * @method _doTextRecognition\n     * @param {String} url\n     * @param {TextRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doTextRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.TextRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/text/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.TextResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @private\n     * @method _doShapeRecognition\n     * @param {String} url\n     * @param {ShapeRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doShapeRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.ShapeRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/shape/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            }\n        );\n    };\n\n    /**\n     * Clear shape recognition\n     *\n     * @private\n     * @method _clearShapeRecognition\n     * @param {String} url\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _clearShapeRecognition = function (url, instanceId) {\n        var data = {\n            instanceSessionId: instanceId\n        };\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/shape/clearSessionId.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @private\n     * @method _doMathRecognition\n     * @param {String} url\n     * @param {MathRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doMathRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.MathRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/math/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MathResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do music recognition\n     *\n     * @private\n     * @method _doMusicRecognition\n     * @param {String} url\n     * @param {MusicRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doMusicRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.MusicRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/music/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MusicResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method _doAnalyzerRecognition\n     * @param {String} url\n     * @param {AnalyzerRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doAnalyzerRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.AnalyzerRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/analyzer/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.AnalyzerResult(response);\n            }\n        );\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @private\n     * @method _computeHmac\n     * @param {AbstractRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     */\n    var _computeHmac = function (input, applicationKey, hmacKey) {\n        var jsonInput = (typeof input === 'object') ? JSON.stringify(input) : input;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    var _filterStrokes = function (components, precision) {\n        components.forEach(function (currentValue) {\n            if (currentValue instanceof scope.StrokeComponent) {\n                currentValue.toFixed(precision);\n            }\n        });\n    };\n\n    var _fillData = function (data, input, instanceId, applicationKey, hmacKey) {\n        data.setRecognitionInput(input);\n        data.setApplicationKey(applicationKey);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(_computeHmac(data.getRecognitionInput(), applicationKey, hmacKey));\n        }\n    };\n\n    // Export\n    scope.AbstractRecognizer = AbstractRecognizer;\n})(MyScript, CryptoJS);\n\n\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract WebSocket recognizer interface\n     *\n     * @class AbstractWSRecognizer\n     * @constructor\n     */\n    function AbstractWSRecognizer() {\n        this._wsInterface = new scope.NetworkWSInterface();\n    }\n\n    AbstractWSRecognizer.prototype.getProtocol = function() {\n        return this._ssl? 'wss://': 'ws://';\n    };\n\n    AbstractWSRecognizer.prototype.getSSL = function() {\n        return this._ssl;\n    };\n\n    AbstractWSRecognizer.prototype.setSSL = function (ssl) {\n        if (ssl !== undefined) {\n            this._ssl = ssl;\n            this.setUrl(this.getProtocol() + this.getHost());\n        }\n    };\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractWSRecognizer.prototype.getHost = function() {\n        return scope.NetworkInterface.parseURL(this.getUrl()).host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @method setHost\n     * @param {String}\n     */\n    AbstractWSRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.setUrl(this.getProtocol() + host);\n        }\n    };\n\n    AbstractWSRecognizer.prototype.setUrl = function (url) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    AbstractWSRecognizer.prototype.getUrl = function () {\n        return this._wsInterface.getUrl();\n    };\n\n    AbstractWSRecognizer.prototype.setCallback = function (callback) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AbstractParameter}\n     */\n    AbstractWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AbstractParameter} parameters\n     */\n    AbstractWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get precision\n     *\n     * @method getPrecision\n     * @returns {Number}\n     */\n    AbstractWSRecognizer.prototype.getPrecision = function () {\n        return this.precision;\n    };\n\n    /**\n     * Set precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    AbstractWSRecognizer.prototype.setPrecision = function (precision) {\n        this.precision = precision;\n    };\n\n    AbstractWSRecognizer.prototype.isClosed = function () {\n        return this._wsInterface.isClosed();\n    };\n\n    AbstractWSRecognizer.prototype.isClosing = function () {\n        return this._wsInterface.isClosing();\n    };\n\n    AbstractWSRecognizer.prototype.isOpen = function () {\n        return this._wsInterface.isOpen();\n    };\n\n    AbstractWSRecognizer.prototype.isConnecting = function () {\n        return this._wsInterface.isConnecting();\n    };\n\n    /**\n     * Open the socket\n     *\n     * @method open\n     */\n    AbstractWSRecognizer.prototype.open = function () {\n        this._wsInterface.open();\n    };\n\n    /**\n     * Close the socket\n     *\n     * @method close\n     */\n    AbstractWSRecognizer.prototype.close = function () {\n        this._wsInterface.close();\n    };\n\n    /**\n     * Send a message\n     *\n     * @method sendMessage\n     * @param {AbstractWSMessage} message\n     */\n    AbstractWSRecognizer.prototype.sendMessage = function (message) {\n        if (message.getComponents) {\n            _filterStrokes(message.getComponents(), this.getPrecision());\n        } else if (message.getInputUnits) {\n            for (var i in message.getInputUnits()) {\n                _filterStrokes(message.getInputUnits()[i].getComponents(), this.getPrecision());\n            }\n        }\n        this._wsInterface.send(message);\n    };\n\n    /**\n     * Initialize the WebSocket\n     *\n     * @method initWSRecognition\n     * @param {String} applicationKey\n     */\n    AbstractWSRecognizer.prototype.initWSRecognition = function (applicationKey) {\n        var message = new scope.InitRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Authenticate the WebSocket client end with a handshake of HMAC signature\n     *\n     * @method takeUpHmacChallenge\n     * @param {String} applicationKey\n     * @param {String} challenge\n     * @param {String} hmacKey\n     */\n    AbstractWSRecognizer.prototype.takeUpHmacChallenge = function (applicationKey, challenge, hmacKey) {\n        var message = new scope.ChallengeRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        message.setChallenge(challenge);\n        if (hmacKey) {\n            message.setHmacSignature(_computeHmac(challenge, applicationKey, hmacKey));\n        }\n        this.sendMessage(message);\n    };\n\n    /**\n     * Reset the WebSocket recognition session\n     *\n     * @method resetWSRecognition\n     */\n    AbstractWSRecognizer.prototype.resetWSRecognition = function () {\n        var message = new scope.ResetRequestWSMessage();\n        this.sendMessage(message);\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @private\n     * @method _computeHmac\n     * @param {String} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     */\n    var _computeHmac = function (input, applicationKey, hmacKey) {\n        var jsonInput = (typeof input === 'object') ? JSON.stringify(input) : input;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    var _filterStrokes = function (components, precision) {\n        components.forEach(function (currentValue) {\n            if (currentValue instanceof scope.StrokeComponent) {\n                currentValue.toFixed(precision);\n            }\n        });\n    };\n\n    // Export\n    scope.AbstractWSRecognizer = AbstractWSRecognizer;\n})(MyScript, CryptoJS);\n\n\n\n(function (scope) {\n    /**\n     * Text recognizer interface\n     *\n     * @class TextRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextRecognizer.prototype.constructor = TextRecognizer;\n\n    /**\n     * Do text recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]|TextInputUnit[]} components\n     * @param {String} hmacKey\n     * @param {TextParameter} [parameters]\n     * @returns {Promise}\n     */\n    TextRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var inputUnits = [];\n        if (components && components.length > 0) {\n            if (components[0] instanceof scope.TextInputUnit) {\n                inputUnits = components;\n            } else {\n                var unit = new scope.TextInputUnit();\n                unit.setComponents(components);\n                inputUnits.push(unit);\n            }\n        }\n        var input = new scope.TextRecognitionInput();\n        input.setParameters(params);\n        input.setInputUnits(inputUnits);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.TextRecognizer = TextRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Text WebSocket recognizer interface\n     *\n     * @class TextWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n        this.setUrl(this.getProtocol() + 'cloud.myscript.com');\n        if (host) {\n            this.setUrl(this.getProtocol() + host);\n        }\n        this.setSSL(true);\n        this.setCallback(callback);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextWSRecognizer.prototype.constructor = TextWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    TextWSRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this._wsInterface.setUrl(url + '/api/v3.0/recognition/ws/text');\n        }\n    };\n\n    TextWSRecognizer.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this._wsInterface.setCallback(function (message) {\n                switch (message.type) {\n                    case 'open':\n                        callback(message);\n                        break;\n                    case 'close':\n                        callback(message);\n                        break;\n                    case 'error':\n                        callback(undefined, message);\n                        break;\n                    default:\n                        switch (message.data.type) {\n                            case 'init':\n                                message.data = new scope.InitResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'reset':\n                                message.data = new scope.ResetResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'error':\n                                message.data = new scope.ErrorResponseWSMessage(message.data);\n                                callback(undefined, new Error(JSON.stringify(message.data.getError())));\n                                break;\n                            case 'hmacChallenge':\n                                message.data = new scope.ChallengeResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            default:\n                                message.data = new scope.TextResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                        }\n                        break;\n                }\n            });\n        }\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {AbstractComponent[]|TextInputUnit[]} components\n     * @param {TextParameter} [parameters]\n     */\n    TextWSRecognizer.prototype.startWSRecognition = function (components, parameters) {\n        var message = new scope.TextStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var inputUnits = [];\n        if (components && components.length > 0) {\n            if (components[0] instanceof scope.TextInputUnit) {\n                inputUnits = components;\n            } else {\n                var unit = new scope.TextInputUnit();\n                unit.setComponents(components);\n                inputUnits.push(unit);\n            }\n        }\n        message.setParameters(params);\n        message.setInputUnits(inputUnits);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {AbstractComponent[]|TextInputUnit[]} components\n     * @param {String} instanceId\n     */\n    TextWSRecognizer.prototype.continueWSRecognition = function (components, instanceId) {\n        var message = new scope.TextContinueRequestWSMessage();\n        var inputUnits = [];\n        if (components && components.length > 0) {\n            if (components[0] instanceof scope.TextInputUnit) {\n                inputUnits = components;\n            } else {\n                var unit = new scope.TextInputUnit();\n                unit.setComponents(components);\n                inputUnits.push(unit);\n            }\n        }\n        message.setInputUnits(inputUnits);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.TextWSRecognizer = TextWSRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Shape recognizer interface\n     *\n     * @class ShapeRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function ShapeRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.ShapeParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognizer.prototype.constructor = ShapeRecognizer;\n\n    /**\n     * Do shape recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {ShapeParameter} [parameters]\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.ShapeRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    /**\n     * Clear shape recognition session\n     *\n     * @method clearShapeRecognitionSession\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.clearShapeRecognitionSession = function (applicationKey, instanceId) {\n        return scope.AbstractRecognizer.prototype.clearRestRecognition.call(this, instanceId); // super\n    };\n\n    // Export\n    scope.ShapeRecognizer = ShapeRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math recognizer interface\n     *\n     * @class MathRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MathParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathRecognizer.prototype.constructor = MathRecognizer;\n\n    /**\n     * Do math recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MathParameter} [parameters]\n     * @returns {Promise}\n     */\n    MathRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.MathRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.MathRecognizer = MathRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Math WebSocket recognizer interface\n     *\n     * @class MathWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this);\n        this.parameters = new scope.MathParameter();\n        this.setUrl(this.getProtocol() + 'cloud.myscript.com');\n        if (host) {\n            this.setUrl(this.getProtocol() + host);\n        }\n        this.setSSL(true);\n        this.setCallback(callback);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathWSRecognizer.prototype.constructor = MathWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    MathWSRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this._wsInterface.setUrl(url + '/api/v3.0/recognition/ws/math');\n        }\n    };\n\n    MathWSRecognizer.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this._wsInterface.setCallback(function (message) {\n                switch (message.type) {\n                    case 'open':\n                        callback(message);\n                        break;\n                    case 'close':\n                        callback(message);\n                        break;\n                    case 'error':\n                        callback(undefined, message);\n                        break;\n                    default:\n                        switch (message.data.type) {\n                            case 'init':\n                                message.data = new scope.InitResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'reset':\n                                message.data = new scope.ResetResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'error':\n                                message.data = new scope.ErrorResponseWSMessage(message.data);\n                                callback(undefined, new Error(JSON.stringify(message.data.getError())));\n                                break;\n                            case 'hmacChallenge':\n                                message.data = new scope.ChallengeResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            default:\n                                message.data = new scope.MathResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                        }\n                        break;\n                }\n            });\n        }\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {MathParameter} [parameters]\n     */\n    MathWSRecognizer.prototype.startWSRecognition = function (components, parameters) {\n        var message = new scope.MathStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setComponents(components);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {String} instanceId\n     */\n    MathWSRecognizer.prototype.continueWSRecognition = function (components, instanceId) {\n        var message = new scope.MathContinueRequestWSMessage();\n        message.setComponents(components);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.MathWSRecognizer = MathWSRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Music recognizer interface\n     *\n     * @class MusicRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MusicRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MusicParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognizer.prototype.constructor = MusicRecognizer;\n\n    /**\n     * Do music recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MusicParameter} [parameters]\n     * @returns {Promise}\n     */\n    MusicRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.MusicRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.MusicRecognizer = MusicRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Analyzer recognizer interface\n     *\n     * @class AnalyzerRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AnalyzerRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.AnalyzerParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognizer.prototype.constructor = AnalyzerRecognizer;\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {AnalyzerParameter} [parameters]\n     * @returns {Promise}\n     */\n    AnalyzerRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.AnalyzerRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.AnalyzerRecognizer = AnalyzerRecognizer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Abstract Renderer. It's used to calculate the ink rendering in HTML5 canvas\n     *\n     * @class AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AbstractRenderer(context) {\n        this.penParameters = new scope.PenParameters();\n        this.showBoundingBoxes = false;\n        this.typeset = true;\n        this.context = context;\n    }\n\n    /**\n     * Get the context\n     *\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype.getContext = function () {\n        return this.context;\n    };\n\n    /**\n     * This property is use to show or not show the bounding box\n     *\n     * @method getShowBoundingBoxes\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.getShowBoundingBoxes = function () {\n        return this.showBoundingBoxes;\n    };\n\n    /**\n     * Set the show state of bounding box\n     *\n     * @method setShowBoundingBoxes\n     * @param {Boolean} showBoundingBoxes\n     */\n    AbstractRenderer.prototype.setShowBoundingBoxes = function (showBoundingBoxes) {\n        this.showBoundingBoxes = showBoundingBoxes;\n    };\n\n    /**\n     * Get the default pen parameters\n     *\n     * @returns {PenParameters}\n     */\n    AbstractRenderer.prototype.getParameters = function () {\n        return this.penParameters;\n    };\n\n    /**\n     * Set the default pen parameters\n     *\n     * @param {PenParameters} penParameters\n     */\n    AbstractRenderer.prototype.setParameters = function (penParameters) {\n        this.penParameters = penParameters;\n    };\n\n    /**\n     * Is typesetting\n     *\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.isTypesetting = function () {\n        return this.typeset;\n    };\n\n    /**\n     * Enable / disable typesetting\n     *\n     * @param {Boolean} typeset\n     */\n    AbstractRenderer.prototype.setTypeset = function (typeset) {\n        this.typeset = typeset;\n    };\n\n    /**\n     * Clear the recognition context\n     *\n     * @method clear\n     */\n    AbstractRenderer.prototype.clear = function () {\n        this.getContext().clearRect(0, 0, this.getContext().canvas.width, this.getContext().canvas.height);\n    };\n\n    /**\n     * Draw recognition result on HTML5 canvas.\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {Object} recognitionResult\n     */\n    AbstractRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw input components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    AbstractRenderer.prototype.drawComponents = function (components) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw component\n     *\n     * @method drawComponent\n     * @param {AbstractComponent} component\n     */\n    AbstractRenderer.prototype.drawComponent = function (component) {\n        if (component instanceof scope.StrokeComponent) {\n            _drawStroke(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.CharacterInputComponent) {\n            _drawCharacter(component, this.getContext(), this.getParameters());\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw stroke component\n     *\n     * @private\n     * @method _drawStroke\n     * @param {StrokeComponent} stroke\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawStroke = function (stroke, context, parameters) { // jshint ignore:line\n        if (stroke && stroke.getLength() > 0) {\n            _renderStroke(stroke, context);\n        }\n    };\n\n    /**\n     * Draw character component\n     *\n     * @private\n     * @method _drawCharacter\n     * @param {CharacterInputComponent} character\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawCharacter = function (character, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw a rectangle on context\n     *\n     * @private\n     * @method _drawRectangle\n     * @param {Rectangle} rectangle\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawRectangle = function (rectangle, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getRectColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n            context.fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n        } finally {\n            context.restore();\n        }\n    };\n\n    /*******************************************************************************************************************\n     * Algorithm methods to compute rendering\n     ******************************************************************************************************************/\n\n    function _computeLinksPoints(point, angle, width) {\n        var radius = point.p * width;\n        return [{\n            x: (point.x - Math.sin(angle) * radius),\n            y: (point.y + Math.cos(angle) * radius)\n        }, {\n            x: (point.x + Math.sin(angle) * radius),\n            y: (point.y - Math.cos(angle) * radius)\n        }\n        ];\n    }\n\n    function _computeMiddlePoint(point1, point2) {\n        return {\n            x: ((point2.x + point1.x) / 2),\n            y: ((point2.y + point1.y) / 2),\n            p: ((point2.p + point1.p) / 2)\n        };\n    }\n\n    function _computeAxeAngle(begin, end) {\n        return Math.atan2(end.y - begin.y, end.x - begin.x);\n    }\n\n    function _fill(context, color) {\n        if (color !== undefined) {\n            context.fillStyle = color;\n            context.fill();\n        }\n    }\n\n    /**\n     *\n     * @param stroke\n     * @param context\n     * @param parameters\n     * @private\n     */\n    function _renderStroke(stroke, context) {\n        context.beginPath();\n        var length = stroke.getLength();\n        var width = stroke.getWidth();\n        var firstPoint = stroke.getPointByIndex(0);\n        if (length < 3) {\n            context.arc(firstPoint.x, firstPoint.y, width * 0.6, 0, Math.PI * 2, true);\n        } else {\n            context.arc(firstPoint.x, firstPoint.y, width * firstPoint.p, 0, Math.PI * 2, true);\n            _renderLine(context, firstPoint, _computeMiddlePoint(firstPoint, stroke.getPointByIndex(1)), width);\n\n            // Possibility to try this (the start looks better when the ink is large)\n            //var first = _computeMiddlePoint(stroke[0], stroke[1]);\n            //context.arc(first.x, first.y, width * first.p, 0, Math.PI * 2, true);\n\n            var nbquadratics = length - 2;\n            for (var i = 0; i < nbquadratics; i++) {\n                _renderQuadratic(context, _computeMiddlePoint(stroke.getPointByIndex(i), stroke.getPointByIndex(i + 1)), _computeMiddlePoint(stroke.getPointByIndex(i + 1), stroke.getPointByIndex(i + 2)), stroke.getPointByIndex(i + 1), width);\n            }\n            _renderLine(context, _computeMiddlePoint(stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1)), stroke.getPointByIndex(length - 1), width);\n            _renderFinal(context, stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1), width);\n        }\n        context.closePath();\n        _fill(context, stroke.getColor());\n    }\n\n    function _renderFinal(context, begin, end, width) {\n        var ARCSPLIT = 6;\n        var angle = _computeAxeAngle(begin, end);\n        var linkPoints = _computeLinksPoints(end, angle, width);\n        context.moveTo(linkPoints[0].x, linkPoints[0].y);\n        for (var i = 1; i <= ARCSPLIT; i++) {\n            var newAngle = angle - i * Math.PI / ARCSPLIT;\n            context.lineTo(end.x - end.p * width * Math.sin(newAngle), end.y + end.p * width * Math.cos(newAngle));\n        }\n    }\n\n    function _renderLine(context, begin, end, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, end), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.lineTo(linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.lineTo(linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    function _renderQuadratic(context, begin, end, ctrl, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, ctrl), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(ctrl, end), width);\n        var linkPoints3 = _computeLinksPoints(ctrl, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.quadraticCurveTo(linkPoints3[0].x, linkPoints3[0].y, linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.quadraticCurveTo(linkPoints3[1].x, linkPoints3[1].y, linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    // Export\n    scope.AbstractRenderer = AbstractRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Text Renderer. It's used to calculate the text ink rendering in HTML5 canvas\n     *\n     * @class TextRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function TextRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    TextRenderer.prototype.constructor = TextRenderer;\n\n    /**\n     * Draw text recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {TextDocument} recognitionResult\n     */\n    TextRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) {\n        this.clear();\n        if (recognitionResult) {\n            this.drawComponents(components);\n        } else {\n            this.drawComponents(components);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    TextRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.TextInputUnit) {\n                this.drawComponents(component.getComponents());\n            } else if (component instanceof scope.AbstractTextInputComponent) {\n                _drawTextComponent(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw text component\n     *\n     * @private\n     * @method _drawTextComponent\n     * @param {AbstractTextInputComponent} component\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTextComponent = function (component, context, parameters) {\n        if (component instanceof scope.CharInputComponent) {\n            _drawChar(component, context, parameters);\n        } else if (component instanceof scope.StringInputComponent) {\n            _drawString(component, context, parameters);\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw char\n     *\n     * @private\n     * @method _drawChar\n     * @param {CharInputComponent} char\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawChar = function (char, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw string\n     *\n     * @private\n     * @method _drawString\n     * @param {StringInputComponent} string\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawString = function (string, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.TextRenderer = TextRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Shape Renderer. It's used to calculate the shape ink rendering in HTML5 canvas\n     *\n     * @class ShapeRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function ShapeRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRenderer.prototype.constructor = ShapeRenderer;\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {ShapeDocument} document\n     */\n    ShapeRenderer.prototype.drawRecognitionResult = function (components, document) {\n        this.clear();\n        if (document && (document instanceof scope.ShapeDocument)) {\n            this.drawShapes(components, document.getSegments());\n            var lastComponents = [];\n            var processedComponents = _extractComponents(components, document.getInkRanges());\n\n            for (var i in components) {\n                var component = components[i];\n                if (processedComponents.indexOf(component) !== -1) {\n                    lastComponents.push(component);\n                }\n            }\n            this.drawComponents(lastComponents);\n        } else {\n            this.drawComponents(components);\n        }\n        return {components : components, document : document}\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    ShapeRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                _drawShapePrimitive(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw the shapes\n     *\n     * @method drawShapes\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment[]} shapes\n     */\n    ShapeRenderer.prototype.drawShapes = function (components, shapes) {\n        for (var i in shapes) {\n            this.drawShapeSegment(components, shapes[i]);\n        }\n    };\n\n    /**\n     * Draw shape segment\n     *\n     * @method drawShapeSegment\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment} segment\n     */\n    ShapeRenderer.prototype.drawShapeSegment = function (components, segment) {\n        var candidate = segment.getSelectedCandidate();\n        if (candidate instanceof scope.ShapeRecognized) {\n            _drawShapeRecognized(candidate, this.getContext(), this.getParameters());\n        } else if (candidate instanceof scope.ShapeNotRecognized) {\n            this.drawComponents(_extractComponents(components, segment.getInkRanges()));\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * This method allow you to draw not recognized shape\n     *\n     * @method drawShapeNotRecognized\n     * @param {AbstractComponent[]} components\n     * @param {ShapeInkRange[]} inkRanges\n     */\n    ShapeRenderer.prototype.drawShapeNotRecognized = function (components, inkRanges) {\n        this.drawComponents(_extractComponents(components, inkRanges));\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @method drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     */\n    ShapeRenderer.prototype.drawShapePrimitive = function (primitive) {\n        _drawShapePrimitive(primitive, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @private\n     * @method _drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeRecognized = function (shapeRecognized, context, parameters) {\n        for (var i in shapeRecognized.getPrimitives()) {\n            _drawShapePrimitive(shapeRecognized.getPrimitives()[i], context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @private\n     * @method _drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapePrimitive = function (primitive, context, parameters) {\n        if (primitive instanceof scope.ShapeEllipse) {\n            _drawShapeEllipse(primitive, context, parameters);\n        } else if (primitive instanceof scope.ShapeLine) {\n            _drawShapeLine(primitive, context, parameters);\n        } else {\n            throw new Error('Primitive not implemented: ' + primitive.getType());\n        }\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @private\n     * @method _drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeLine = function (shapeLine, context, parameters) {\n        _drawLine(shapeLine.getFirstPoint(), shapeLine.getLastPoint(), context, parameters);\n        if (shapeLine.hasBeginDecoration() && shapeLine.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getFirstPoint(), shapeLine.getBeginTangentAngle(), 12.0, context, parameters);\n        }\n        if (shapeLine.hasEndDecoration() && shapeLine.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getLastPoint(), shapeLine.getEndTangentAngle(), 12.0, context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @private\n     * @method _drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeEllipse = function (shapeEllipse, context, parameters) {\n        var points = _drawEllipseArc(\n            shapeEllipse.getCenter(),\n            shapeEllipse.getMaxRadius(),\n            shapeEllipse.getMinRadius(),\n            shapeEllipse.getOrientation(),\n            shapeEllipse.getStartAngle(),\n            shapeEllipse.getSweepAngle(),\n            context, parameters);\n\n        if (shapeEllipse.hasBeginDecoration() && shapeEllipse.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[0], shapeEllipse.getBeginTangentAngle(), 12.0, context, parameters);\n        }\n        if (shapeEllipse.hasEndDecoration() && shapeEllipse.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[1], shapeEllipse.getEndTangentAngle(), 12.0, context, parameters);\n        }\n    };\n\n    /**\n     * Draw an ellipse arc on context\n     *\n     * @private\n     * @method _drawEllipseArc\n     * @param {Point} centerPoint\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {String} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     * @returns {Point[]}\n     */\n    var _drawEllipseArc = function (centerPoint, maxRadius, minRadius, orientation, startAngle, sweepAngle, context, parameters) {\n\n        var angleStep = 0.02; // angle delta between interpolated\n\n        var z1 = Math.cos(orientation);\n        var z3 = Math.sin(orientation);\n        var z2 = z1;\n        var z4 = z3;\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        var n = Math.floor(Math.abs(sweepAngle) / angleStep);\n\n        var boundariesPoints = [];\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n\n            for (var i = 0; i <= n; i++) {\n\n                var angle = startAngle + (i / n) * sweepAngle; // points on the arc, in radian\n                var alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n                var cosAlpha = Math.cos(alpha);\n                var sinAlpha = Math.sin(alpha);\n\n                // current point\n                var x = centerPoint.x + z1 * cosAlpha - z4 * sinAlpha;\n                var y = centerPoint.y + z2 * sinAlpha + z3 * cosAlpha;\n                if (i === 0) {\n                    context.moveTo(x, y);\n                } else {\n                    context.lineTo(x, y);\n                }\n\n                if (i === 0 || i === n) {\n                    boundariesPoints.push(new scope.Point({x: x, y: y}));\n                }\n            }\n\n            context.stroke();\n\n        } finally {\n            context.restore();\n        }\n\n        return boundariesPoints;\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Clamp an angle into the range [-PI, +PI]\n     *\n     * @private\n     * @method _phi\n     * @param {Number} angle\n     * @returns {Number}\n     */\n    var _phi = function (angle) {\n        angle = ((angle + Math.PI) % (Math.PI * 2)) - Math.PI;\n        if (angle < -Math.PI) {\n            angle += Math.PI * 2;\n        }\n        return angle;\n    };\n\n    /**\n     * Draw an arrow head on context\n     *\n     * @private\n     * @method _drawArrowHead\n     * @param {Point} headPoint\n     * @param {Number} angle\n     * @param {Number} length\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawArrowHead = function (headPoint, angle, length, context, parameters) {\n        var alpha = _phi(angle + Math.PI - (Math.PI / 8)),\n            beta = _phi(angle - Math.PI + (Math.PI / 8));\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.moveTo(headPoint.getX(), headPoint.getY());\n            context.beginPath();\n            context.lineTo(headPoint.getX() + (length * Math.cos(alpha)), headPoint.getY() + (length * Math.sin(alpha)));\n            context.lineTo(headPoint.getX() + (length * Math.cos(beta)), headPoint.getY() + (length * Math.sin(beta)));\n            context.lineTo(headPoint.getX(), headPoint.getY());\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Return components from ink ranges\n     *\n     * @private\n     * @param components\n     * @param inkRanges\n     * @returns {AbstractComponent[]}\n     */\n    var _extractComponents = function (components, inkRanges) {\n        var result = [];\n\n        for (var i in inkRanges) {\n            var inkRange = inkRanges[i];\n\n            var firstPointIndex = Math.floor(inkRange.getFirstPoint());\n            var lastPointIndex = Math.ceil(inkRange.getLastPoint());\n\n            for (var strokeIndex = inkRange.getFirstStroke(); strokeIndex <= inkRange.getLastStroke(); strokeIndex++) {\n                var currentStroke = components[strokeIndex];\n                var currentStrokePointCount = currentStroke.getX().length;\n\n                var newStroke = new scope.StrokeComponent();\n                newStroke.setColor(currentStroke.getColor());\n                newStroke.setWidth(currentStroke.getWidth());\n\n                for (var pointIndex = firstPointIndex; (strokeIndex === inkRange.getLastStroke() && pointIndex <= lastPointIndex && pointIndex < currentStrokePointCount) || (strokeIndex !== inkRange.getLastStroke() && pointIndex < currentStrokePointCount); pointIndex++) {\n                    newStroke.addPoint(currentStroke.getX()[pointIndex], currentStroke.getY()[pointIndex], currentStroke.getT()[pointIndex]);\n                }\n                result.push(newStroke);\n            }\n        }\n        return result;\n\n    };\n\n    // Export\n    scope.ShapeRenderer = ShapeRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Math Renderer. It's used to calculate the math ink rendering in HTML5 canvas\n     *\n     * @class MathRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MathRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MathRenderer.prototype.constructor = MathRenderer;\n\n    /**\n     * Draw math recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MathDocument} recognitionResult\n     */\n    MathRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) {\n        this.clear();\n        if (recognitionResult) {\n            var notScratchOutComponents = _filterScratchOut(components, recognitionResult.getScratchOutResults());\n            this.drawComponents(notScratchOutComponents);\n        } else {\n            this.drawComponents(components);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    MathRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractComponent) {\n                if(!component.scratchedStroke){\n                    scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n                }\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param scratchOutResults\n     * @returns {*}\n     */\n    var _filterScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n        for (var k in scratchOutResults) {\n            for (var n in scratchOutResults[k].getErasedInkRanges()) {\n                components[scratchOutResults[k].getErasedInkRanges()[n].getComponent()].scratchedStroke = true;\n            }\n            for (var p in scratchOutResults[k].getInkRanges()) {\n                components[scratchOutResults[k].getInkRanges()[p].getComponent()].scratchedStroke = true;;\n            }\n        }\n        return components;\n    };\n\n    // Export\n    scope.MathRenderer = MathRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Music Renderer. It's used to calculate the music ink rendering in HTML5 canvas\n     *\n     * @class MusicRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MusicRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MusicRenderer.prototype.constructor = MusicRenderer;\n\n    /**\n     * Draw music recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MusicDocument} recognitionResult\n     */\n    MusicRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) {\n        this.clear();\n        if (recognitionResult) {\n            var notScratchOutComponents = _removeMusicScratchOut(components, recognitionResult.getScratchOutResults());\n            this.drawComponents(notScratchOutComponents);\n        } else {\n            this.drawComponents(components);\n        }\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @method drawStaff\n     * @param {MusicStaff} staff\n     */\n    MusicRenderer.prototype.drawStaff = function (staff) {\n        _drawStaff(staff, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    MusicRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractMusicInputComponent) {\n                _drawMusicNode(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @private\n     * @method _drawStaff\n     * @param {MusicStaff} staff\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawStaff = function (staff, context, parameters) {\n        var staffHeight = staff.getTop() + ((staff.getCount() - 1) * staff.getGap());\n//            var staves = Math.floor(context.canvas.clientHeight / staff.height);\n        var staves = 1;\n\n        context.beginPath();\n\n        // Drawing horizontal staff lines\n        for (var i = 0; i < staves; i++) {\n            var offset = staffHeight * i;\n            for (var j = 0; j < staff.getCount(); j++) {\n                context.moveTo(0, (staff.getTop() + offset) + j * staff.getGap());\n                context.lineTo(context.canvas.clientWidth, (staff.getTop() + offset) + j * staff.getGap());\n            }\n        }\n\n        context.stroke();\n    };\n\n    /**\n     * Draw music node\n     *\n     * @private\n     * @method _drawMusicNode\n     * @param {AbstractMusicInputComponent} component\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawMusicNode = function (component, context, parameters) {\n        if (component instanceof scope.MusicAccidentalInputComponent) {\n            _drawAccidental(component, context, parameters);\n        } else if (component instanceof scope.MusicArpeggiateInputComponent) {\n            _drawArpeggiate(component, context, parameters);\n        } else if (component instanceof scope.MusicBarInputComponent) {\n            _drawBar(component, context, parameters);\n        } else if (component instanceof scope.MusicBeamInputComponent) {\n            _drawBeam(component, context, parameters);\n        } else if (component instanceof scope.MusicClefInputComponent) {\n            _drawClef(component, context, parameters);\n        } else if (component instanceof scope.MusicDecorationInputComponent) {\n            _drawDecoration(component, context, parameters);\n        } else if (component instanceof scope.MusicDotsInputComponent) {\n            _drawDots(component, context, parameters);\n        } else if (component instanceof scope.MusicHeadInputComponent) {\n            _drawHead(component, context, parameters);\n        } else if (component instanceof scope.MusicLedgerLineInputComponent) {\n            _drawLedgerLine(component, context, parameters);\n        } else if (component instanceof scope.MusicRestInputComponent) {\n            _drawRest(component, context, parameters);\n        } else if (component instanceof scope.MusicStemInputComponent) {\n            _drawStem(component, context, parameters);\n        } else if (component instanceof scope.MusicTieOrSlurInputComponent) {\n            _drawTieOrSlur(component, context, parameters);\n        } else if (component instanceof scope.MusicTimeSignatureInputComponent) {\n            _drawTimeSignature(component, context, parameters);\n        } else {\n            throw new Error('Node not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw accidental\n     *\n     * @private\n     * @method _drawAccidental\n     * @param {MusicAccidentalInputComponent} accidental\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawAccidental = function (accidental, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw arpeggiate\n     *\n     * @private\n     * @method _drawArpeggiate\n     * @param {MusicArpeggiateInputComponent} arpeggiate\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawArpeggiate = function (arpeggiate, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw bar\n     *\n     * @private\n     * @method _drawBar\n     * @param {MusicBarInputComponent} bar\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBar = function (bar, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw beam\n     *\n     * @private\n     * @method _drawBeam\n     * @param {MusicBeamInputComponent} beam\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBeam = function (beam, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw clef\n     *\n     * @private\n     * @method _drawClef\n     * @param {MusicClefInputComponent} clef\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawClef = function (clef, context, parameters) { // jshint ignore:line\n        var src = 'data:image/svg+xml,';\n        switch (clef.getValue().getSymbol()) {\n            case 'F':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" x=\"0\" y=\"0\" width=\"18\" height=\"20\"><defs/><g transform=\"translate(6.600000e-3,3.125356e-3)\"><g><path d=\"M17.3 3.1 C17.3 3.5 17.1 3.8 16.8 4.1 C16.5 4.4 15.9 4.5 15.5 4.3 C15 4.1 14.7 3.7 14.7 3.2 C14.6 2.8 14.8 2.5 15 2.2 C15.3 1.9 15.7 1.8 16 1.8 C16.4 1.8 16.8 2 17 2.3 C17.2 2.5 17.3 2.8 17.3 3.1 z\"/></g><g><path d=\"M17.3 8.9 C17.3 9.3 17.1 9.7 16.8 9.9 C16.5 10.3 15.9 10.3 15.5 10.2 C15 10 14.7 9.5 14.7 9.1 C14.6 8.7 14.8 8.3 15 8 C15.3 7.8 15.7 7.6 16 7.6 C16.5 7.7 17 8 17.2 8.4 C17.2 8.6 17.3 8.8 17.3 8.9 z\"/></g><g><path d=\"M13 7.2 C13 10 11.8 12.7 9.8 14.7 C7.3 17.2 4 18.8 0.7 19.8 C0.3 20.1 -0.4 19.8 0.3 19.4 C1.6 18.8 3 18.3 4.2 17.5 C7 15.8 9.3 13.1 9.8 9.9 C10.1 8 10.1 5.9 9.6 4 C9.2 2.6 8.2 1.1 6.7 0.9 C5.3 0.7 3.7 1.2 2.7 2.2 C2.5 2.4 2 3.2 2 4 C2.6 3.6 2.6 3.6 3.1 3.4 C4.2 2.9 5.7 3.6 6 4.9 C6.3 6 6.1 7.5 5 8.1 C3.8 8.7 2 8.5 1.4 7.2 C0.3 5.3 0.9 2.6 2.6 1.2 C4.4 -0.3 7.1 -0.3 9.2 0.4 C11.4 1.3 12.7 3.5 12.9 5.8 C13 6.2 13 6.7 13 7.2 z\"/></g></g></svg>';\n                break;\n            case 'C':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"18\" height=\"25\"><defs/><g><g transform=\"matrix(1,0,0,1.030698,-309.364,-543.8647)\"><path d=\"M 325.9 546.8 C 325.8 548.7 324.7 550.7 322.8 551.5 C 321.1 552.1 319.1 552.2 317.6 551 C 316.6 550.2 316.2 548.4 317.3 547.5 C 318.3 546.5 320.4 547.4 320.3 548.9 C 320.7 549.9 318.5 550.5 319.7 551.3 C 321 551.6 322.3 550.5 322.6 549.3 C 323.1 547.5 323.1 545.6 322.7 543.8 C 322.4 542.9 321.9 541.5 320.7 541.9 C 319.2 542.2 318.3 543.8 317.9 545.1 C 317.6 543.2 316.4 541.5 315 540.2 C 315 544.1 315 548 315 551.9 L 314.1 551.9 C 314.1 543.9 314.1 535.7 314.1 527.7 L 315 527.7 C 315 531.5 315 535.5 315 539.4 C 316.4 538.1 317.6 536.4 317.8 534.5 C 318.3 535.9 319.3 537.5 321 537.8 C 322.2 537.8 322.5 536.3 322.8 535.4 C 323.1 533.7 323.1 531.8 322.6 530.1 C 322.2 529 320.9 528 319.6 528.3 C 318.6 529 320.6 529.6 320.3 530.6 C 320.5 532 318.8 533 317.6 532.3 C 316.3 531.6 316.4 529.7 317.4 528.8 C 318 528.1 319.3 527.7 320.3 527.7 C 321.2 527.7 321.8 527.7 322.6 528 C 324.6 528.7 325.7 530.7 325.9 532.7 C 326.2 534.9 324.9 537.3 322.8 538.2 C 321.5 538.7 319.9 538.3 318.8 537.3 C 318.7 538.3 318.2 539.2 317.7 539.9 C 318.1 540.6 318.6 541.8 318.8 542.1 C 320.1 540.9 322.5 540.8 323.8 542 C 325.2 543.1 326.1 545 325.9 546.8 z \"/></g><g transform=\"matrix(1,0,0,1.030928,-309.364,-543.9805)\"><path d=\"M 312.2 551.9 L 309.4 551.9 L 309.4 527.7 L 312.2 527.7 L 312.2 551.9 z \"/></g></g></svg>';\n                break;\n            case 'G':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"15\" height=\"40\"><defs/><path d=\"m 12 3.4 c 0.3 3.1 -2 5.6 -4.1 7.6 -0.9 0.9 -0.2 0.1 -0.6 0.6 -0.1 -0.5 -0.3 -1.7 -0.3 -2.1 0.1 -2.6 2.3 -6.5 4.2 -7.9 0.3 0.6 0.6 0.6 0.8 1.8 z m 0.7 15.9 c -1.2 -0.9 -2.8 -1.1 -4.3 -0.9 -0.2 -1.2 -0.4 -2.5 -0.6 -3.7 2.4 -2.3 4.9 -4.9 5 -8.4 0.1 -2.2 -0.3 -4.6 -1.7 -6.4 C 9.5 0.1 8.3 2.1 7.4 3.3 c -1.5 2.6 -1.1 5.8 -0.6 8.6 -0.8 0.9 -1.9 1.7 -2.7 2.7 -2.4 2.3 -4.4 5.3 -4 8.7 0.2 3.3 2.6 6.3 5.9 7.1 1.2 0.3 2.6 0.3 3.8 0.1 0.2 2.2 1 4.5 0.1 6.7 -0.7 1.6 -2.8 2.9 -4.3 2.2 -0.6 -0.3 -0.1 -0.1 -0.5 -0.2 1.1 -0.3 2 -1 2.3 -1.5 0.8 -1.4 -0.4 -3.6 -2.2 -3.3 -2.3 0 -3.2 3.1 -1.7 4.6 1.3 1.5 3.8 1.3 5.4 0.3 1.8 -1.2 2 -3.5 1.8 -5.5 -0.1 -0.7 -0.4 -2.6 -0.4 -3.3 0.7 -0.2 0.2 -0.1 1.2 -0.4 2.7 -1 4.4 -4.2 3.6 -7 -0.3 -1.4 -1 -2.9 -2.3 -3.7 z m 0.6 5.7 c 0.2 2 -1.1 4.2 -3.1 4.9 -0.1 -0.8 -0.2 -1 -0.3 -1.4 -0.5 -2.4 -0.7 -4.9 -1.1 -7.3 1.6 -0.2 3.5 0.5 4 2.1 0.2 0.6 0.3 1.2 0.4 1.8 z m -5.1 5.1 c -2.5 0.1 -5 -1.6 -5.6 -4 -0.7 -2.1 -0.5 -4.5 0.8 -6.4 1.1 -1.7 2.6 -3 4 -4.5 0.2 1.1 0.4 2.2 0.5 3.3 -3 0.8 -5 4.6 -3.2 7.3 0.5 0.8 2 2.2 2.8 1.6 -1.1 -0.7 -2 -1.8 -1.8 -3.2 -0.1 -1.3 1.4 -2.9 2.7 -3.1 0.4 2.8 0.9 6 1.4 8.8 -0.5 0.1 -1 0.1 -1.5 0.1 z\"/></svg>';\n                break;\n            default:\n                throw new Error('Unknown music clef symbol');\n        }\n\n        var imageObj = new Image();\n        imageObj.onload = function () {\n            var ratio = clef.getBoundingBox().getHeight() / this.height;\n            clef.getBoundingBox().setWidth(this.width * ratio);\n            context.drawImage(imageObj, clef.getBoundingBox().getX(), clef.getBoundingBox().getY(), clef.getBoundingBox().getWidth(), clef.getBoundingBox().getHeight());\n        };\n        imageObj.src = src;\n    };\n\n    /**\n     * Draw decoration\n     *\n     * @private\n     * @method _drawDecoration\n     * @param {MusicDecorationInputComponent} decoration\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDecoration = function (decoration, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw dots\n     *\n     * @private\n     * @method _drawDots\n     * @param {MusicDotsInputComponent} dots\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDots = function (dots, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw head\n     *\n     * @private\n     * @method _drawHead\n     * @param {MusicHeadInputComponent} head\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawHead = function (head, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw ledgerLine\n     *\n     * @private\n     * @method _drawLedgerLine\n     * @param {MusicLedgerLineInputComponent} ledgerLine\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawLedgerLine = function (ledgerLine, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw rest\n     *\n     * @private\n     * @method _drawRest\n     * @param {MusicRestInputComponent} rest\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawRest = function (rest, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stem\n     *\n     * @private\n     * @method _drawStem\n     * @param {MusicStemInputComponent} stem\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawStem = function (stem, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw tieOrSlur\n     *\n     * @private\n     * @method _drawTieOrSlur\n     * @param {MusicTieOrSlurInputComponent} tieOrSlur\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTieOrSlur = function (tieOrSlur, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw timeSignature\n     *\n     * @private\n     * @method _drawTimeSignature\n     * @param {MusicTimeSignatureInputComponent} timeSignature\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTimeSignature = function (timeSignature, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param scratchOutResults\n     * @returns {*}\n     */\n    var _removeMusicScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            if (scratchOutResults[k].getErasedInputRanges()) {\n                for (var n in scratchOutResults[k].getErasedInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getErasedInputRanges()[n].getComponent());\n                }\n                for (var p in scratchOutResults[k].getInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getInputRanges()[p].getComponent());\n                }\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    // Export\n    scope.MusicRenderer = MusicRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Analyzer Renderer. It's used to calculate the analyzer ink rendering in HTML5 canvas\n     *\n     * @class AnalyzerRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AnalyzerRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.shapeRenderer = new scope.ShapeRenderer(context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRenderer.prototype.constructor = AnalyzerRenderer;\n\n    /**\n     * Get shape renderer\n     *\n     * @method getShapeRenderer\n     * @returns {ShapeRenderer}\n     */\n    AnalyzerRenderer.prototype.getShapeRenderer = function () {\n        return this.shapeRenderer;\n    };\n\n    /**\n     * Set shape renderer\n     *\n     * @method setShapeRenderer\n     * @param {ShapeRenderer} shapeRenderer\n     */\n    AnalyzerRenderer.prototype.setShapeRenderer = function (shapeRenderer) {\n        this.shapeRenderer = shapeRenderer;\n    };\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerDocument} recognitionResult\n     */\n    AnalyzerRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) {\n        this.clear();\n        if (recognitionResult) {\n            this.shapeRenderer.drawShapes(components, recognitionResult.getShapes());\n            _drawTables(components, recognitionResult.getTables(), this.getContext(), this.getParameters());\n            _drawTextLines(components, recognitionResult.getTextLines(), this.getContext(), this.getParameters());\n            //_drawGroups(components, recognitionResult.getGroups(), this.getContext(), this.getParameters()); // TODO: not implemented\n        } else {\n            this.drawComponents(components);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    AnalyzerRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                this.shapeRenderer.drawShapePrimitive(component);\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw table\n     *\n     * @private\n     * @method _drawTables\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTable[]} tables\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTables = function (components, tables, context, parameters) {\n        for (var i in tables) {\n            for (var k in tables[i].getLines()) {\n                var data = tables[i].getLines()[k].getData();\n                _drawLine(data.getP1(), data.getP2(), context, parameters);\n            }\n        }\n    };\n\n    /**\n     * Draw the text line\n     *\n     * @private\n     * @method _drawTextLines\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTextLine[]} textLines\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTextLines = function (components, textLines, context, parameters) {\n        for (var i in textLines) {\n            var textLine = textLines[i];\n            var data = textLine.getData();\n            if (data) {\n                var text = textLine.getTextDocument().getTextSegment().getSelectedCandidate().getLabel();\n                _drawText(data.getBoundingBox(), text, data.getJustificationType(), data.getTextHeight(), data.getBaselinePos(), context, parameters);\n\n                var underlines = textLine.getUnderlineList();\n                for (var j in underlines) {\n                    _drawUnderline(data.getBoundingBox(), underlines[j], text, data.getTextHeight(), data.getBaselinePos() + data.getTextHeight() / 10, context, parameters);\n                }\n            }\n        }\n    };\n\n    /**\n     * Draw text on analyser\n     *\n     * @private\n     * @method _drawText\n     * @param {Rectangle} boundingBox\n     * @param {String} text\n     * @param {String} justificationType\n     * @param {Number} textHeight\n     * @param {Number} baseline\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawText = function (boundingBox, text, justificationType, textHeight, baseline, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n            context.font = parameters.getDecoration() + ' ' + textHeight + 'px' + ' ' + parameters.getFont();\n            context.textAlign = (justificationType === 'CENTER') ? 'center' : 'left';\n\n            context.fillText(text, boundingBox.getX(), baseline);\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw Groups\n     *\n     * @private\n     * @method _drawGroups\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerGroup[]} groups\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawGroups = function (components, groups, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n\n    /**\n     * Draw Underline\n     *\n     * @private\n     * @method _drawUnderline\n     * @param {Rectangle} boundingBox\n     * @param {AnalyzerUnderline} underline\n     * @param {String} text\n     * @param {Number} textHeight\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawUnderline = function (boundingBox, underline, text, textHeight, baseline, context, parameters) {\n        var topLeft = boundingBox.getTopLeftPoint();\n        var firstCharacter = underline.getData().getFirstCharacter();\n        var lastCharacter = underline.getData().getLastCharacter();\n\n        context.font = parameters.getDecoration() + ' ' + textHeight + 'px' + ' ' + parameters.getFont();\n\n        var textMetrics = context.measureText(text.substring(0, firstCharacter));\n        var x1 = topLeft.x + textMetrics.width;\n\n        textMetrics = context.measureText(text.substring(firstCharacter, lastCharacter + 1));\n        var x2 = x1 + textMetrics.width;\n        _drawLine(new scope.Point({x: x1, y: baseline}), new scope.Point({x: x2, y: baseline}), context, parameters);\n    };\n\n    /**\n     * Draw a cell\n     *\n     * @private\n     * @method _drawCell\n     * @param {AnalyzerCell} cell\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawCell = function (cell, context, parameters) {\n        if (cell.getData()) {\n            var rectangle = cell.getData().getBoundingBox();\n            context.save();\n            try {\n                context.fillStyle = parameters.getRectColor();\n                context.strokeStyle = parameters.getColor();\n                context.lineWidth = 0.5 * parameters.getWidth();\n                context.fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n            } finally {\n                context.restore();\n            }\n        }\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    // Export\n    scope.AnalyzerRenderer = AnalyzerRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * Represent the Image Renderer. It's used to calculate the Image ink rendering in HTML5 canvas\n     *\n     * @class ImageRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function ImageRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ImageRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    ImageRenderer.prototype.constructor = ImageRenderer;\n\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    ImageRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                console.log(components);\n                console.log(typeof component);\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    // Export\n    scope.ImageRenderer = ImageRenderer;\n})(MyScript);\n\n\n\n(function (scope) {\n    /**\n     * The InkGrabber class that render, capture and build strokes\n     *\n     * @class InkGrabber\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function InkGrabber(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.stroke = undefined;\n        this.writing = false;\n    }\n\n    /**\n     * Inheritance property\n     */\n    InkGrabber.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    InkGrabber.prototype.constructor = InkGrabber;\n\n    /**\n     * Is Writing a stroke\n     *\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    InkGrabber.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last wrote stroke\n     *\n     * @method getStroke\n     * @returns {StrokeComponent}\n     */\n    InkGrabber.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    InkGrabber.prototype.startCapture = function (x, y, t) {\n        if (!this.writing) {\n            this.writing = true;\n            this.stroke = new scope.StrokeComponent();\n            this.stroke.setColor(this.penParameters.getColor());\n            this.stroke.setWidth(this.penParameters.getWidth());\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawComponent(this.stroke);\n        } else {\n            throw new Error('StrokeComponent capture already running');\n        }\n    };\n\n    InkGrabber.prototype.continueCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawComponent(this.stroke);\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    InkGrabber.prototype.endCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawComponent(this.stroke);\n            this.writing = false;\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    // Export\n    scope.InkGrabber = InkGrabber;\n})(MyScript);\n\n\n\n\n(function (scope) {\n    /**\n     * InkPaper\n     *\n     * @class InkPaper\n     * @param {Element} element\n     * @param {Object} [options]\n     * @param {Function} [callback] callback function\n     * @param {Object} callback.data The recognition result\n     * @param {Object} callback.err The err to the callback\n     * @constructor\n     */\n    function InkPaper(element, options, callback) {\n        this._element = element;\n        this._instanceId = undefined;\n        this._timerId = undefined;\n        this._initialized = false;\n        this._lastSentComponentIndex = 0;\n        this._components = [];\n        this._redoComponents = [];\n        this.isStarted = false;\n        this.resultCallback = callback;\n        this.changeCallback = undefined;\n\n\n        // Capture\n        var tempCanvas = _createCanvas(element, 'ms-temp-canvas');\n        this.canvasRatio = _getCanvasRatio(tempCanvas);\n        element.removeChild(tempCanvas);\n        //this.canvasRatio = 1;\n\n        this._captureCanvas = _createCanvas(element, 'ms-capture-canvas');\n\n        this._inkGrabber = new scope.InkGrabber(this._captureCanvas.getContext('2d'));\n\n        // Rendering\n        this._renderingCanvas = _createCanvas(element, 'ms-rendering-canvas');\n\n\n        this._textRenderer = new scope.TextRenderer(this._renderingCanvas.getContext('2d'));\n        this._mathRenderer = new scope.MathRenderer(this._renderingCanvas.getContext('2d'));\n        this._shapeRenderer = new scope.ShapeRenderer(this._renderingCanvas.getContext('2d'));\n        this._musicRenderer = new scope.MusicRenderer(this._renderingCanvas.getContext('2d'));\n        this._analyzerRenderer = new scope.AnalyzerRenderer(this._renderingCanvas.getContext('2d'));\n\n        // Recognition\n        this._textRecognizer = new scope.TextRecognizer();\n        this._mathRecognizer = new scope.MathRecognizer();\n        this._shapeRecognizer = new scope.ShapeRecognizer();\n        this._musicRecognizer = new scope.MusicRecognizer();\n        this._analyzerRecognizer = new scope.AnalyzerRecognizer();\n\n        this._textWSRecognizer = new scope.TextWSRecognizer(this._handleMessage.bind(this));\n        this._mathWSRecognizer = new scope.MathWSRecognizer(this._handleMessage.bind(this));\n\n        this._attachListeners(element);\n\n        this.options = { // Default options\n            type: scope.RecognitionType.TEXT,\n            protocol: scope.Protocol.REST,\n            ssl: true,\n            width: 400,\n            height: 300,\n            timeout: 2000,\n            typeset: false,\n            components: [],\n            textParameters: new scope.TextParameter(),\n            mathParameters: new scope.MathParameter(),\n            shapeParameters: new scope.ShapeParameter(),\n            musicParameters: new scope.MusicParameter(),\n            analyzerParameters: new scope.AnalyzerParameter()\n        };\n\n        if (options) {\n            for (var idx in options) {\n                if (options[idx] !== undefined) {\n                    this.options[idx] = options[idx]; // Override current options\n                }\n            }\n        }\n\n        // Recognition type\n        this.setType(this.options.type);\n\n        this.setHost(this.options.host);\n        this.setSSL(this.options.ssl);\n\n        this.setTextParameters(this.options.textParameters); // jshint ignore:line\n        this.setMathParameters(this.options.mathParameters); // jshint ignore:line\n        this.setShapeParameters(this.options.shapeParameters); // jshint ignore:line\n        this.setMusicParameters(this.options.musicParameters); // jshint ignore:line\n        this.setAnalyzerParameters(this.options.analyzerParameters); // jshint ignore:line\n\n        this.setProtocol(this.options.protocol);\n        this.setTimeout(this.options.timeout);\n        this.setApplicationKey(this.options.applicationKey);\n        this.setHmacKey(this.options.hmacKey);\n\n        this.setPenParameters(this.options.penParameters);\n\n        this.setPrecision(this.options.precision);\n        this.setTypeset(this.options.typeset);\n        this.setComponents(this.options.components);\n\n        this.setWidth(this.options.width);\n        this.setHeight(this.options.height);\n    }\n\n    /**\n     * Set the width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    InkPaper.prototype.setWidth = function (width) {\n        if (width > 0) {\n            this._captureCanvas.width = width * this.canvasRatio;\n            this._captureCanvas.style.width = width + 'px';\n            this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n\n            this._renderingCanvas.width = width * this.canvasRatio;\n            this._renderingCanvas.style.width = width + 'px';\n            this._renderingCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        }\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    InkPaper.prototype.setHeight = function (height) {\n        if (height > 0) {\n            this._captureCanvas.height = height * this.canvasRatio;\n            this._captureCanvas.style.height = height + 'px';\n            this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n\n            this._renderingCanvas.height = height * this.canvasRatio;\n            this._renderingCanvas.style.height = height + 'px';\n\n            this._renderingCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        }\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the network protocol (REST or WebSocket)\n     *\n     * @param {'REST'|'WebSocket'} protocol\n     */\n    InkPaper.prototype.setProtocol = function (protocol) {\n        switch (protocol) {\n            case scope.Protocol.REST:\n                this._selectedRecognizer = this._selectedRESTRecognizer;\n                break;\n            case scope.Protocol.WS:\n                this.setTimeout(-1); // FIXME hack to avoid border issues\n                this._selectedRecognizer = this._selectedWSRecognizer;\n                break;\n            default:\n                throw new Error('Unknown protocol: ' + protocol);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this._lastSentComponentIndex = 0;\n    };\n\n    /**\n     * Get the network protocol (REST or WebSocket)\n     *\n     * @returns {'REST'|'WebSocket'}\n     */\n    InkPaper.prototype.getProtocol = function () {\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            return scope.Protocol.WS;\n        } else {\n            return scope.Protocol.REST;\n        }\n    };\n\n    /**\n     * Set recognition type\n     *\n     * @method setType\n     * @param {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.setType = function (type) {\n        switch (type) {\n            case scope.RecognitionType.TEXT:\n                this._selectedRenderer = this._textRenderer;\n                this._selectedRESTRecognizer = this._textRecognizer;\n                this._selectedWSRecognizer = this._textWSRecognizer;\n                break;\n            case scope.RecognitionType.MATH:\n                this._selectedRenderer = this._mathRenderer;\n                this._selectedRESTRecognizer = this._mathRecognizer;\n                this._selectedWSRecognizer = this._mathWSRecognizer;\n                break;\n            case scope.RecognitionType.SHAPE:\n                this._selectedRenderer = this._shapeRenderer;\n                this._selectedRESTRecognizer = this._shapeRecognizer;\n                break;\n            case scope.RecognitionType.MUSIC:\n                this._selectedRenderer = this._musicRenderer;\n                this._selectedRESTRecognizer = this._musicRecognizer;\n                break;\n            case scope.RecognitionType.ANALYZER:\n                this._selectedRenderer = this._analyzerRenderer;\n                this._selectedRESTRecognizer = this._analyzerRecognizer;\n                break;\n            default:\n                throw new Error('Unknown type: ' + type);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this._lastSentComponentIndex = 0;\n    };\n\n    /**\n     * Get recognition type\n     *\n     * @method getType\n     * @returns {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.getType = function () {\n        if (this._selectedRenderer instanceof scope.TextRenderer) {\n            return scope.RecognitionType.TEXT;\n        }\n        if (this._selectedRenderer instanceof scope.MathRenderer) {\n            return scope.RecognitionType.MATH;\n        }\n        if (this._selectedRenderer instanceof scope.ShapeRenderer) {\n            return scope.RecognitionType.SHAPE;\n        }\n        if (this._selectedRenderer instanceof scope.MusicRenderer) {\n            return scope.RecognitionType.MUSIC;\n        }\n        if (this._selectedRenderer instanceof scope.AnalyzerRenderer) {\n            return scope.RecognitionType.ANALYZER;\n        }\n        throw new Error('Unknown type');\n    };\n\n    /**\n     * Get the recognition timeout\n     *\n     * @method getTimeout\n     * @returns {Number}\n     */\n    InkPaper.prototype.getTimeout = function () {\n        return this.timeout;\n    };\n\n    /**\n     * Set the recognition timeout\n     *\n     * @method setTimeout\n     * @param {Number} timeout\n     */\n    InkPaper.prototype.setTimeout = function (timeout) {\n        this.timeout = timeout;\n    };\n\n    /**\n     * Set the recognition precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    InkPaper.prototype.setPrecision = function (precision) {\n        this._textRecognizer.setPrecision(precision);\n        this._textWSRecognizer.setPrecision(precision);\n        this._mathRecognizer.setPrecision(precision);\n        this._mathWSRecognizer.setPrecision(precision);\n        this._shapeRecognizer.setPrecision(precision);\n        this._musicRecognizer.setPrecision(precision);\n        this._analyzerRecognizer.setPrecision(precision);\n    };\n\n    /**\n     * Get the default components\n     *\n     * @method getComponents\n     * @return {Array} components\n     */\n    InkPaper.prototype.getComponents = function () {\n        return this.options.components;\n    };\n\n    /**\n     * Set the default components\n     *\n     * @method setComponents\n     * @param {Array} components\n     */\n    InkPaper.prototype.setComponents = function (components) {\n        this.options.components = components;\n        this._initRenderingCanvas();\n    };\n\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InkPaper.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the HMAC key\n     *\n     * @method getHmacKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getHmacKey = function () {\n        return this.hmacKey;\n    };\n\n    /**\n     * Set the HMAC key\n     *\n     * @method setHmacKey\n     * @param {String} hmacKey\n     */\n    InkPaper.prototype.setHmacKey = function (hmacKey) {\n        this.hmacKey = hmacKey;\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} textParameters\n     */\n    InkPaper.prototype.setTextParameters = function (textParameters) {\n        if (textParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in textParameters) {\n                if (textParameters[i] !== undefined) {\n                    this._textRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._textWSRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._analyzerRecognizer.getParameters().getTextParameters()[i] = textParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter} textParameters\n     */\n    InkPaper.prototype.getTextParameters = function () {\n        return this._textRecognizer.getParameters();\n    };\n\n    /**\n     * Set math recognition parameters\n     *\n     * @method setMathParameters\n     * @param {MathParameter} mathParameters\n     */\n    InkPaper.prototype.setMathParameters = function (mathParameters) {\n        if (mathParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in mathParameters) {\n                if (mathParameters[i] !== undefined) {\n                    this._mathRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                    this._mathWSRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get math recognition parameters\n     *\n     * @method getMathParameters\n     * @returns {MathParameter} mathParameters\n     */\n    InkPaper.prototype.getMathParameters = function () {\n        return this._mathRecognizer.getParameters();\n    };\n\n    /**\n     * Set shape recognition parameters\n     *\n     * @method setShapeParameters\n     * @param {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.setShapeParameters = function (shapeParameters) {\n        if (shapeParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in shapeParameters) {\n                if (shapeParameters[i] !== undefined) {\n                    this._shapeRecognizer.getParameters()[i] = shapeParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get shape recognition parameters\n     *\n     * @method getShapeParameters\n     * @returns {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.getShapeParameters = function () {\n        return this._shapeRecognizer.getParameters();\n    };\n\n    /**\n     * Set music recognition parameters\n     *\n     * @method setMusicParameters\n     * @param {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.setMusicParameters = function (musicParameters) {\n        if (musicParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in musicParameters) {\n                if (musicParameters[i] !== undefined) {\n                    this._musicRecognizer.getParameters()[i] = musicParameters[i]; // Override options\n                }\n            }\n            this._initRenderingCanvas();\n        }\n    };\n\n    /**\n     * Get music recognition parameters\n     *\n     * @method getMusicParameters\n     * @returns {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.getMusicParameters = function () {\n        return this._musicRecognizer.getParameters();\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setAnalyzerParameters\n     * @param {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.setAnalyzerParameters = function (analyzerParameters) {\n        if (analyzerParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in analyzerParameters) {\n                if (analyzerParameters[i] !== undefined) {\n                    this._analyzerRecognizer.getParameters()[i] = analyzerParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getAnalyzerParameters\n     * @returns {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.getAnalyzerParameters = function () {\n        return this._analyzerRecognizer.getParameters();\n    };\n\n    /**\n     * Set pen parameters\n     *\n     * @method setPenParameters\n     * @param {PenParameters} penParameters\n     */\n    InkPaper.prototype.setPenParameters = function (penParameters) {\n        if (penParameters) {\n            for (var i in penParameters) {\n                if (penParameters[i] !== undefined) {\n                    this._selectedRenderer.getParameters()[i] = penParameters[i]; // Override options\n                }\n            }\n            var params = this._selectedRenderer.getParameters();\n            this._inkGrabber.setParameters(params); // Override options\n            this._textRenderer.setParameters(params); // Override options\n            this._mathRenderer.setParameters(params); // Override options\n            this._shapeRenderer.setParameters(params); // Override options\n            this._musicRenderer.setParameters(params); // Override options\n            this._analyzerRenderer.setParameters(params); // Override options\n        }\n    };\n\n    /**\n     * Get pen parameters\n     *\n     * @method getPenParameters\n     * @returns {PenParameters} penParameters\n     */\n    InkPaper.prototype.getPenParameters = function () {\n        return this._selectedRenderer.getParameters();\n    };\n\n    /**\n     * Enable / disable typeset\n     *\n     * @method setTypeset\n     * @param {Boolean} typeset\n     */\n    InkPaper.prototype.setTypeset = function (typeset) {\n        this._textRenderer.setTypeset(typeset);\n        this._mathRenderer.setTypeset(typeset);\n        this._shapeRenderer.setTypeset(typeset);\n        this._musicRenderer.setTypeset(typeset);\n        this._analyzerRenderer.setTypeset(typeset);\n    };\n\n    /**\n     * Get available languages\n     *\n     * @method getAvailableLanguages\n     * @param {String} [inputMode] input mode\n     */\n    InkPaper.prototype.getAvailableLanguages = function (inputMode) {\n        this._selectedRESTRecognizer.getAvailableLanguageList(\n            this.getApplicationKey(),\n            inputMode ? inputMode : this._textRecognizer.getParameters().getInputMode()\n        ).then(\n            function (data) {\n                this._onResult(data);\n            }.bind(this),\n            function (error) {\n                this._onResult(undefined, error);\n            }.bind(this)\n        );\n    };\n\n    /**\n     * Get the renderer\n     *\n     * @method getRenderer\n     * @returns {AbstractRenderer}\n     */\n    InkPaper.prototype.getRenderer = function () {\n        return this._selectedRenderer;\n    };\n\n    /**\n     * Get the ink capturer\n     *\n     * @method getInkGrabber\n     * @returns {InkGrabber}\n     */\n    InkPaper.prototype.getInkGrabber = function () {\n        return this._inkGrabber;\n    };\n\n    /**\n     * Get the recognizer\n     *\n     * @method getRecognizer\n     * @returns {AbstractRecognizer}\n     */\n    InkPaper.prototype.getRecognizer = function () {\n        return this._selectedRecognizer;\n    };\n\n    /**\n     * Set the change callback\n     *\n     * @method setChangeCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The inkPaper state\n     */\n    InkPaper.prototype.setChangeCallback = function (changeCallback) {\n        this.changeCallback = changeCallback;\n    };\n\n    /**\n     * Set the recognition result callback\n     *\n     * @method setResultCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The recognition result\n     */\n    InkPaper.prototype.setResultCallback = function (callback) {\n        this.resultCallback = callback;\n    };\n\n    /**\n     * Recognize\n     *\n     * @method recognize\n     * @returns {Promise}\n     */\n    InkPaper.prototype.recognize = function () {\n        var input = this.getComponents().concat(this._components);\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            if (this._initialized) {\n                var lastInput = input.slice(this._lastSentComponentIndex);\n\n                if (lastInput.length > 0) {\n                    this._lastSentComponentIndex = input.length;\n                    if (!this.isStarted) {\n                        this.isStarted = true;\n                        this._selectedRecognizer.startWSRecognition(lastInput);\n                    } else {\n                        this._selectedRecognizer.continueWSRecognition(lastInput, this._instanceId);\n                    }\n                } else {\n                    this._renderResult();\n                }\n            }\n        } else {\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this._instanceId = undefined;\n            }\n\n            if (input.length > 0) {\n                if (!this.isStarted) {\n                    this._startRESTRecognition(input);\n                } else {\n                    this._continueRESTRecognition(input, this._instanceId);\n                }\n            } else {\n                this._renderResult();\n            }\n        }\n    };\n\n    InkPaper.prototype._startRESTRecognition = function (components) {\n\n        this._instanceId = undefined;\n        this._selectedRecognizer.doSimpleRecognition(\n            this.getApplicationKey(),\n            this._instanceId,\n            components,\n            this.getHmacKey()\n        ).then(\n            function (data) {\n                if (!this.isStarted) {\n                    this.isStarted = true;\n                    this._lastSentComponentIndex = components.length;\n                    this._instanceId = data.getInstanceId();\n                    this._renderResult(data);\n                }\n            }.bind(this),\n            function (error) {\n                this._onResult(undefined, error);\n            }.bind(this)\n        );\n    };\n\n    InkPaper.prototype._continueRESTRecognition = function (components, instanceId) {\n\n        this._selectedRecognizer.doSimpleRecognition(\n            this.getApplicationKey(),\n            instanceId,\n            components,\n            this.getHmacKey()\n        ).then(\n            function (data) {\n                this._lastSentComponentIndex = this._lastSentComponentIndex + components.length;\n                this._renderResult(data);\n            }.bind(this),\n            function (error) {\n                this._onResult(undefined, error);\n            }.bind(this)\n        );\n    };\n\n    InkPaper.prototype._clearRESTRecognition = function (instanceId) {\n\n        if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n            this.isStarted = false;\n            this._lastSentComponentIndex = 0;\n            this._selectedRecognizer.clearShapeRecognitionSession(\n                this.getApplicationKey(),\n                instanceId\n            ).then(\n                function (data) {\n                    this._instanceId = undefined;\n                    this._onResult(data);\n                }.bind(this),\n                function (error) {\n                    this._onResult(undefined, error);\n                }.bind(this)\n            );\n        } else {\n            this._onResult();\n        }\n    };\n\n    /**\n     * Return true if you can undo\n     *\n     * @method canUndo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canUndo = function () {\n        return this._components.length > 0;\n    };\n\n    /**\n     * Undo\n     *\n     * @method undo\n     */\n    InkPaper.prototype.undo = function () {\n        if (this.canUndo()) {\n            //Remove the scratched state for Math strokes\n            this._components.forEach(function(stroke){\n                stroke.scratchedStroke = false;\n            });\n            //Remove the latsModel used for Shape\n            this.updatedModel = undefined;\n\n            this._redoComponents.push(this._components.pop());\n\n            this._clearRESTRecognition(this._instanceId);\n\n            this._initRenderingCanvas();\n            this._onChange();\n\n            this.isStarted = false;\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this._selectedRecognizer.resetWSRecognition();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > -1) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Return true if you can redo\n     *\n     * @method canRedo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canRedo = function () {\n        return this._redoComponents.length > 0;\n    };\n\n    /**\n     * Redo\n     *\n     * @method redo\n     */\n    InkPaper.prototype.redo = function () {\n        if (this.canRedo()) {\n            this._components.push(this._redoComponents.pop());\n\n            this._clearRESTRecognition(this._instanceId);\n\n            this._initRenderingCanvas();\n            this._onChange();\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.recognize();\n            } else {\n                clearTimeout(this._timerId);\n                this.isStarted = false;\n                if (this.getTimeout() > -1) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Clear the ink paper\n     *\n     * @method clear\n     */\n    InkPaper.prototype.clear = function () {\n        this._components = [];\n        this._redoComponents = [];\n\n        this._clearRESTRecognition(this._instanceId);\n\n        this._initRenderingCanvas();\n        this._onChange();\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            this.isStarted = false;\n            this._selectedRecognizer.resetWSRecognition();\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > -1) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else {\n                this._onResult();\n            }\n        }\n    };\n\n    InkPaper.event = {\n        'addDomListener': function (element, useCapture, myfunction) {\n            element.addEventListener(useCapture, myfunction);\n        }\n    };\n\n    /**\n     *\n     * @private\n     * @method _down\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._down = function (x, y, t) {\n        clearTimeout(this._timerId);\n        var sizeChanged = false;\n        if (this._captureCanvas.clientHeight * this.canvasRatio !== this._captureCanvas.height) {\n            alert(this._captureCanvas.clientHeight + ' / ' + this._captureCanvas.height);\n            this._captureCanvas.height = this._captureCanvas.clientHeight * this.canvasRatio;\n            this._renderingCanvas.height = this._renderingCanvas.clientHeight * this.canvasRatio;\n            sizeChanged = true;\n        }\n\n        if (this._captureCanvas.clientWidth * this.canvasRatio !== this._captureCanvas.width) {\n            this._captureCanvas.width = this._captureCanvas.clientWidth * this.canvasRatio;\n            this._renderingCanvas.width = this._renderingCanvas.clientWidth * this.canvasRatio;\n            sizeChanged = true;\n        }\n\n        //Safari trash the canvas content when heigth or width are modified.\n        if (sizeChanged) {\n\n            this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n            this._renderingCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n            this._initRenderingCanvas();\n        }\n\n        if (this.canRedo()) {\n            this._redoComponents = [];\n            this._onChange();\n        }\n\n        this._inkGrabber.startCapture(x, y, t);\n\n\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._move = function (x, y, t) {\n        this._inkGrabber.continueCapture(x, y, t);\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._up = function (x, y, t) {\n        this._inkGrabber.endCapture(x, y, t);\n\n        var stroke = this._inkGrabber.getStroke();\n\n        this._inkGrabber.clear();\n        this._selectedRenderer.drawComponent(stroke);\n\n        this._components.push(stroke);\n        this._onChange();\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            if (!this._selectedRecognizer.isOpen() && !this._selectedRecognizer.isConnecting()) {\n                this._selectedRecognizer.open();\n            } else {\n                this.recognize();\n            }\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > -1) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            }\n        }\n    };\n\n    InkPaper.prototype._onResult = function (data, err) {\n        if (this.resultCallback) {\n            this.resultCallback(data, err);\n        }\n        if (err) {\n            this._element.dispatchEvent(new CustomEvent('error', {detail: err}));\n        } else {\n            this._element.dispatchEvent(new CustomEvent('success', {detail: data}));\n        }\n    };\n\n    InkPaper.prototype._onChange = function () {\n        var data = {\n            canUndo: this.canUndo(),\n            undoLength: this._components.length,\n            canRedo: this.canRedo(),\n            redoLength: this._redoComponents.length\n        };\n\n        if (this.changeCallback) {\n            this.changeCallback(data)\n        }\n        this._element.dispatchEvent(new CustomEvent('changed', {detail: data}));\n    };\n\n    InkPaper.prototype._renderResult = function (data) {\n        this.updatedModel = this._selectedRenderer.drawRecognitionResult(this.getComponents().concat(this._components), data? data.getDocument(): undefined);\n        if (this._selectedRecognizer instanceof scope.MusicRecognizer) {\n            if (this._selectedRecognizer.getParameters().getStaff() instanceof scope.MusicStaff) {\n                this._selectedRenderer.drawStaff(this._selectedRecognizer.getParameters().getStaff());\n            }\n        }\n        this._onResult(data);\n        return data;\n    };\n\n    /**\n     * Set recognition service url\n     *\n     * @param {String} host\n     */\n    InkPaper.prototype.setHost = function (host) {\n        this._textRecognizer.setHost(host);\n        this._textWSRecognizer.setHost(host);\n        this._mathRecognizer.setHost(host);\n        this._mathWSRecognizer.setHost(host);\n        this._shapeRecognizer.setHost(host);\n        this._musicRecognizer.setHost(host);\n        this._analyzerRecognizer.setHost(host);\n    };\n\n    /**\n     * @private\n     */\n    InkPaper.prototype.setSSL = function (ssl) {\n        this._textRecognizer.setSSL(ssl);\n        this._textWSRecognizer.setSSL(ssl);\n        this._mathRecognizer.setSSL(ssl);\n        this._mathWSRecognizer.setSSL(ssl);\n        this._shapeRecognizer.setSSL(ssl);\n        this._musicRecognizer.setSSL(ssl);\n        this._analyzerRecognizer.setSSL(ssl);\n    };\n\n    /**\n     * Tool to attach touch events\n     *\n     * @private\n     * @param {Element} element\n     */\n    InkPaper.prototype._attachListeners = function (element) {\n        var self = this;\n        var pointerId;\n\n        //Desactivation of contextmenu to prevent safari to fire pointerdown only once\n        element.addEventListener(\"contextmenu\", function (e) {\n                                     e.preventDefault();\n                                     e.stopPropagation();\n                                     return false;\n                                 }\n        );\n\n        element.addEventListener('pointerdown', function (e) {\n            if (!pointerId) {\n                pointerId = e.pointerId;\n                e.preventDefault();pointerId\n                var coord = _getCoordinates(e, element);\n                self._down(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointermove', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._move(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointerup', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n\n                pointerId = undefined;\n            }\n        }, false);\n\n        element.addEventListener('pointerleave', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n                pointerId = undefined;\n            }\n        }, false);\n\n        element.addEventListener('pointerout', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n                pointerId = undefined;\n            }\n        }, false);\n    };\n\n    InkPaper.prototype._initRenderingCanvas = function () {\n        this._selectedRenderer.clear();\n\n        if (this._selectedRecognizer instanceof scope.MusicRecognizer) {\n            if (this._selectedRecognizer.getParameters().getStaff() instanceof scope.MusicStaff) {\n                this._selectedRenderer.drawStaff(this._selectedRecognizer.getParameters().getStaff());\n            }\n        }\n        if(this._selectedRecognizer instanceof scope.ShapeRecognizer && this.updatedModel){\n            this._selectedRenderer.drawRecognitionResult(this.updatedModel.components, this.updatedModel.document);\n        } else {\n            this._selectedRenderer.drawComponents(this.getComponents().concat(this._components));\n        }\n    };\n\n    /**\n     *\n     * @param message\n     * @param error\n     * @returns {boolean} false no immediate replay needed, true when the call need to be replay ASAP\n     * @private\n     */\n    InkPaper.prototype._handleMessage = function (message, error) {\n        var replayNeeded = false;\n        if (error) {\n            replayNeeded = true;\n            this._instanceId = undefined;\n            this.isStarted = false;\n            this._lastSentComponentIndex = 0;\n            this._onResult(undefined, error);\n        }\n\n        if (message) {\n            switch (message.type) {\n                case 'open':\n                    this._selectedWSRecognizer.initWSRecognition(this.getApplicationKey());\n                    break;\n                case 'hmacChallenge':\n                    this._selectedWSRecognizer.takeUpHmacChallenge(this.getApplicationKey(), message.getChallenge(), this.getHmacKey());\n                    break;\n                case 'init':\n                    this.isStarted = false;\n                    this._initialized = true;\n                    this._instanceId = undefined;\n                    this._lastSentComponentIndex = 0;\n                    this.recognize();\n                    break;\n                case 'reset':\n                    this.isStarted = false;\n                    this._instanceId = undefined;\n                    this._lastSentComponentIndex = 0;\n                    this.recognize();\n                    break;\n                case 'close':\n                    this._initialized = false;\n                    this._instanceId = undefined;\n                    this._lastSentComponentIndex = 0;\n                    break;\n                default:\n                    this.isStarted = true;\n                    if (!this._instanceId) {\n                        this._instanceId = message.getInstanceId();\n                    }\n                    this._renderResult(message);\n                    break;\n            }\n        }\n        return replayNeeded;\n    };\n\n    /**\n     * Return the stats allowing to monitor what ink size is send to the server.\n     * @returns Stats objects format {strokesCount : 0, pointsCount : 0, byteSize : 0, humanSize : 0, humanUnit : 'BYTE'} humanUnit could have the values BYTE, BYTES, KiB, MiB\n     */\n    InkPaper.prototype.getStats = function () {\n        var stats = {strokesCount: 0, pointsCount: 0, byteSize: 0, humanSize: 0, humanUnit: 'BYTE'};\n        if (this._components) {\n            stats.strokesCount = this._components.length;\n            var pointsCount = 0;\n            for (var strokeNb = 0; strokeNb < this._components.length; strokeNb++) {\n                pointsCount = pointsCount + this._components[strokeNb].x.length;\n            }\n            stats.strokesCount = this._components.length;\n            stats.pointsCount = pointsCount;\n            //We start with 270 as it is the size in bytes. Make a real computation implies to recode a doRecogntion\n            var byteSize = 270;\n            byteSize = JSON.stringify(this._components).length;\n            stats.byteSize = byteSize;\n            if (byteSize < 270) {\n                stats.humanUnit = 'BYTE';\n                stats.byteSize = 0;\n                stats.humanSize = 0;\n            } else if (byteSize < 2048) {\n                stats.humanUnit = 'BYTES';\n                stats.humanSize = byteSize;\n            } else if (byteSize < 1024 * 1024) {\n                stats.humanUnit = 'KiB';\n                stats.humanSize = (byteSize / 1024).toFixed(2);\n            } else {\n                stats.humanUnit = 'MiB';\n                stats.humanSize = (byteSize / 1024 / 1024).toFixed(2);\n            }\n        }\n        return stats;\n    };\n\n    /**\n     *\n     * @param marginX the horizontal margin to apply (by default 10)\n     * @param marginY the vertical margin to apply (by default 10)\n     * @returns {ImageData} Build an ImageData object with content shrink to border of strokes.\n     * @private\n     */\n    InkPaper.prototype.getInkAsImageData = function (marginX, marginY) {\n        //Remove the scratched strokes\n        var componentCopy = [];\n        this._components.forEach(function(stroke) {\n                                     if (stroke.scratchedStroke !== true) {\n                                         componentCopy.push(stroke);\n                                     }\n                                 }\n        );\n\n        if (!marginX) {\n            marginX = 10;\n        }\n        if (!marginY) {\n            marginY = 10;\n        }\n\n        if (componentCopy && componentCopy.length > 0) {\n            var updatedStrokes;\n            var strokesCount = componentCopy.length;\n            //Initializing min and max\n            var minX = componentCopy[0].x[0];\n            var maxX = componentCopy[0].x[0];\n            var minY = componentCopy[0].y[0];\n            var maxY = componentCopy[0].y[0];\n\n            // Computing the min and max for x and y\n            for (var strokeNb = 0; strokeNb < componentCopy.length; strokeNb++) {\n                var pointCount = componentCopy[strokeNb].x.length;\n                for (var pointNb = 0; pointNb < pointCount; pointNb++) {\n                    var currentX = componentCopy[strokeNb].x[pointNb];\n                    var currentY = componentCopy[strokeNb].y[pointNb];\n                    if (currentX < minX) {\n                        minX = currentX;\n                    }\n                    if (currentX > maxX) {\n                        maxX = currentX;\n                    }\n                    if (currentY < minY) {\n                        minY = currentY;\n                    }\n                    if (currentY > maxY) {\n                        maxY = currentY;\n                    }\n                }\n            }\n            var nonDisplayCanvas = document.createElement('canvas');\n            nonDisplayCanvas.width = (maxX ) + (2 * marginX);\n            nonDisplayCanvas.height = (maxY ) + (2 * marginY)\n\n            var ctx = nonDisplayCanvas.getContext(\"2d\");\n\n            var imageRendered = new scope.ImageRenderer(ctx);\n            imageRendered.drawComponents(componentCopy, ctx);\n\n            // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData\n            return ctx.getImageData(minX - marginX, minY - marginY, (maxX - minX ) + (2 * marginX), (maxY - minY ) + (2 * marginY));\n        }\n    };\n\n    /**\n     *\n     * @param marginX the horizontal margin to apply (by default 10)\n     * @param marginY the vertical margin to apply (by default 10)\n     * @returns {String} Build an String containg dataUrl with content shrink to border of strokes.\n     * @private\n     */\n    InkPaper.prototype.getInkAsPng = function (marginX, marginY) {\n        var imageRenderingCanvas = document.createElement('canvas');\n        imageRenderingCanvas.style.display = 'none';\n\n        var imageDataToRender = this.getInkAsImageData();\n        imageRenderingCanvas.width = imageDataToRender.width;\n        imageRenderingCanvas.style.width = imageDataToRender.width + 'px';\n        imageRenderingCanvas.height = imageDataToRender.height;\n        imageRenderingCanvas.style.height = imageDataToRender.height + 'px';\n        var ctx = imageRenderingCanvas.getContext('2d');\n        ctx.putImageData(imageDataToRender, 0, 0);\n        return imageRenderingCanvas.toDataURL(\"image/png\");\n    };\n\n    /**\n     * Tool to create canvas\n     *\n     * @private\n     * @param {Element} parent\n     * @param {String} id\n     * @returns {Element}\n     */\n    function _createCanvas(parent, id) {\n        var count = document.querySelectorAll('canvas[id^=' + id + ']').length;\n        var canvas = document.createElement('canvas');\n        canvas.id = id + '-' + count;\n        parent.appendChild(canvas);\n        return canvas;\n    }\n\n    /**\n     * Tool to get canvas ratio (retina display)\n     *\n     * @private\n     * @param {Element} canvas\n     * @returns {Number}\n     */\n    function _getCanvasRatio(canvas) {\n        if (canvas) {\n            var context = canvas.getContext('2d'),\n                devicePixelRatio = window.devicePixelRatio || 1,\n                backingStoreRatio = context.webkitBackingStorePixelRatio ||\n                    context.mozBackingStorePixelRatio ||\n                    context.msBackingStorePixelRatio ||\n                    context.oBackingStorePixelRatio ||\n                    context.backingStorePixelRatio || 1;\n            return devicePixelRatio / backingStoreRatio;\n        }\n        return 1;\n    }\n\n\n    /**\n     * Tool to get proper coordinates\n     *\n     * @private\n     * @param {Event} e\n     * @param {Element} element\n     * @returns {Object}\n     */\n    function _getCoordinates(e, container) {\n        if (e.changedTouches) e = e.changedTouches[0];\n        var rect = container.getBoundingClientRect();\n        return {\n            x: e.clientX - rect.left - container.clientLeft,\n            y: e.clientY - rect.top - container.clientTop,\n            t: e.timeStamp\n        };\n    }\n\n    // Export\n    scope.InkPaper = InkPaper;\n})(MyScript);\n","/**\n * Polyfills\n */\n(function () {\n    /**\n     * CustomEvent\n     */\n    function CustomEvent ( event, params ) {    // jshint ignore:line\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent( 'CustomEvent' );\n        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n\n    /**\n     * bind()\n     */\n    if (!Function.prototype.bind) {\n        Function.prototype.bind = function(oThis) {\n            if (typeof this !== 'function') {\n                // closest thing possible to the ECMAScript 5\n                // internal IsCallable function\n                throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n            }\n\n            var aArgs   = Array.prototype.slice.call(arguments, 1),\n                fToBind = this,\n                fNOP    = function() {},\n                fBound  = function() {\n                    return fToBind.apply(this instanceof fNOP ? this : oThis,\n                        aArgs.concat(Array.prototype.slice.call(arguments)));\n                };\n\n            fNOP.prototype = this.prototype;\n            fBound.prototype = new fNOP(); // jshint ignore:line\n\n            return fBound;\n        };\n    }\n})();\n\n/**\n * MyScript javascript library\n *\n * @module MyScript\n * @requires Q\n * @requires CryptoJS\n */\n/*global MyScript:true */\nMyScript = {\n    RecognitionType: {\n        TEXT: 'TEXT',\n        MATH: 'MATH',\n        SHAPE: 'SHAPE',\n        MUSIC: 'MUSIC',\n        ANALYZER: 'ANALYZER'\n    },\n    InputMode: {\n        CURSIVE: 'CURSIVE',\n        ISOLATED: 'ISOLATED',\n        SUPERIMPOSED: 'SUPERIMPOSED',\n        VERTICAL: 'VERTICAL'\n    },\n    InputType: {\n        CHAR: 'CHAR',\n        WORD: 'WORD',\n        SINGLE_LINE_TEXT: 'SINGLE_LINE_TEXT',\n        MULTI_LINE_TEXT: 'MULTI_LINE_TEXT'\n    },\n    ResultDetail: {\n        TEXT: 'TEXT',\n        WORD: 'WORD',\n        CHARACTER: 'CHARACTER'\n    },\n    ResultType: {\n        Math: {\n            LATEX: 'LATEX',\n            MATHML: 'MATHML',\n            SYMBOLTREE: 'SYMBOLTREE',\n            OFFICEOPENXMLMATH : 'OFFICEOPENXMLMATH'\n        },\n        Music: {\n            MUSICXML: 'MUSICXML',\n            SCORETREE: 'SCORETREE'\n        }\n    },\n    Protocol: {\n        WS: 'WebSocket',\n        REST: 'REST'\n    }\n};\n","'use strict';\n\n(function (scope) {\n    /**\n     * Point\n     *\n     * @class Point\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Point(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Point.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Point.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Point.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Point.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    // Export\n    scope.Point = Point;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Rectangle\n     *\n     * @class Rectangle\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function Rectangle(obj) {\n        if (obj) {\n            this.x = obj.x;\n            this.y = obj.y;\n            this.width = obj.width;\n            this.height = obj.height;\n        }\n    }\n\n    /**\n     * Get top-left x\n     *\n     * @method getX\n     * @returns {Number}\n     */\n    Rectangle.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set top-left x\n     *\n     * @method setX\n     * @param {Number} x\n     */\n    Rectangle.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Get top-left y\n     *\n     * @method getY\n     * @returns {Number}\n     */\n    Rectangle.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set top-left y\n     *\n     * @method setY\n     * @param {Number} y\n     */\n    Rectangle.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    Rectangle.prototype.getTopLeftPoint = function () {\n        var point = new scope.Point();\n        point.setX(this.x);\n        point.setY(this.y);\n        return point;\n    };\n\n    /**\n     * Set top-left point\n     *\n     * @method setTopLeftPoint\n     * @param {Point} topLeftPoint\n     */\n    Rectangle.prototype.setTopLeftPoint = function (topLeftPoint) {\n        this.x = topLeftPoint.getX();\n        this.y = topLeftPoint.getY();\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    Rectangle.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    Rectangle.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    Rectangle.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Set height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    Rectangle.prototype.setHeight = function (height) {\n        this.height = height;\n    };\n\n    // Export\n    scope.Rectangle = Rectangle;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for both input and output canvas draw.\n     *\n     * @class PenParameters\n     * @constructor\n     */\n    function PenParameters(obj) {\n        this.color = 'rgba(0, 0, 0, 0.9)';\n        this.rectColor = 'rgba(0, 0, 0, 0.2)';\n        this.font = 'Times New Roman';\n        this.decoration = 'normal';\n        this.width = 4;\n        this.pressureType = 'SIMULATED';\n        this.alpha = '1.0';\n        if (obj) {\n            this.color = obj.color;\n            this.rectColor = obj.rectColor;\n            this.font = obj.font;\n            this.decoration = obj.decoration;\n            this.width = obj.width;\n            this.pressureType = obj.pressureType;\n            this.alpha = obj.alpha;\n        }\n    }\n\n    /**\n     * Get the color renderer parameter\n     *\n     * @method getColor\n     * @returns {String} The color of the ink\n     */\n    PenParameters.prototype.getColor = function () {\n        return this.color;\n    };\n\n    /**\n     * Set the color renderer parameter\n     *\n     * @method setColor\n     * @param {String} color\n     */\n    PenParameters.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    /**\n     * Get the rect renderer parameter\n     *\n     * @method getRectColor\n     * @returns {String} the rectangle color\n     */\n    PenParameters.prototype.getRectColor = function () {\n        return this.rectColor;\n    };\n\n    /**\n     * Set the rect renderer parameter\n     *\n     * @method setRectColor\n     * @param {String} rectColor\n     */\n    PenParameters.prototype.setRectColor = function (rectColor) {\n        this.rectColor = rectColor;\n    };\n\n    /**\n     * Get the font renderer parameter\n     *\n     * @method getFont\n     * @returns {String} The font\n     */\n    PenParameters.prototype.getFont = function () {\n        return this.font;\n    };\n\n    /**\n     * Set the font renderer parameter\n     *\n     * @method setFont\n     * @param {String} font\n     */\n    PenParameters.prototype.setFont = function (font) {\n        this.font = font;\n    };\n\n    /**\n     * Get the decoration renderer parameter\n     *\n     * @method getDecoration\n     * @returns {String} The decoration\n     */\n    PenParameters.prototype.getDecoration = function () {\n        return this.decoration;\n    };\n\n    /**\n     * Set the decoration renderer parameter\n     *\n     * @method setDecoration\n     * @param {String} decoration\n     */\n    PenParameters.prototype.setDecoration = function (decoration) {\n        this.decoration = decoration;\n    };\n\n    /**\n     * Get the width renderer parameter\n     *\n     * @method getWidth\n     * @returns {Number} The ink width\n     */\n    PenParameters.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Set the width renderer parameter\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    PenParameters.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    // Export\n    scope.PenParameters = PenParameters;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * The mathUtil class is use to calculate lines\n     *\n     * @class MathUtil\n     * @constructor\n     */\n    function MathUtils() {\n    }\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains an ellipse arc.\n     *\n     * @method getEllipseArcRect\n     * @param {Point} center\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {Number} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @returns {Rectangle}\n     */\n    MathUtils.getEllipseArcRect = function (center, maxRadius, minRadius, orientation, startAngle, sweepAngle) {\n\n        var angleStep = 0.02, // angle delta between interpolated points on the arc, in radian\n            angle, // angle\n            alpha, // angle\n            z1,\n            z2,\n            z3,\n            z4,\n            cosAlpha,\n            sinAlpha,\n            n,\n            xList,\n            yList,\n            i,\n            x,\n            y,\n            xMin,\n            xMax,\n            yMin,\n            yMax,\n            sortFloat = function (a, b) {\n                return a - b;\n            };\n\n        z1 = z2 = Math.cos(orientation);\n        z3 = z4 = Math.sin(orientation);\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        n = Math.abs(sweepAngle) / angleStep;\n\n        xList = [];\n        yList = [];\n\n        for (i = 0; i <= n; i++) {\n\n            angle = startAngle + (i / n) * sweepAngle;\n            alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n            cosAlpha = Math.cos(alpha);\n            sinAlpha = Math.sin(alpha);\n\n            // current point\n            x = center.x + z1 * cosAlpha - z4 * sinAlpha;\n            y = center.y + z2 * sinAlpha + z3 * cosAlpha;\n\n            xList.push(x);\n            yList.push(y);\n        }\n\n        xList.sort(sortFloat);\n        yList.sort(sortFloat);\n\n        xMin = xList[0];\n        xMax = xList[xList.length - 1];\n        yMin = yList[0];\n        yMax = yList[yList.length - 1];\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains a line.\n     *\n     * @method getLineRect\n     * @param {Point} firstPoint\n     * @param {Point} lastPoint\n     * @returns {Rectangle}\n     */\n    MathUtils.getLineRect = function (firstPoint, lastPoint) {\n\n        var xFirst = firstPoint.x,\n            xLast = lastPoint.x,\n            xMin = Math.min(xFirst, xLast),\n            xMax = Math.max(xFirst, xLast),\n\n            yFirst = firstPoint.y,\n            yLast = lastPoint.y,\n            yMin = Math.min(yFirst, yLast),\n            yMax = Math.max(yFirst, yLast);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    /**\n     * This method is use to calculate the size of the rectangle that contains bounding boxes.\n     *\n     * @method getBoundingRect\n     * @param {Rectangle[]} boundingBoxes List of bounding box\n     * @returns {Rectangle}\n     */\n    MathUtils.getBoundingRect = function (boundingBoxes) {\n\n        var xList = [],\n            yList = [];\n\n        for (var i in boundingBoxes) {\n            var rectangle = boundingBoxes[i];\n            xList.push(rectangle.getX());\n            xList.push(rectangle.getX() + rectangle.getWidth());\n            yList.push(rectangle.getY());\n            yList.push(rectangle.getY() + rectangle.getHeight());\n        }\n\n        var xMin = Math.min.apply(Math, xList);\n        var xMax = Math.max.apply(Math, xList);\n        var yMin = Math.min.apply(Math, yList);\n        var yMax = Math.max.apply(Math, yList);\n\n        return new scope.Rectangle({x: xMin, y: yMin, width: xMax - xMin, height: yMax - yMin});\n    };\n\n    // Export\n    scope.MathUtils = MathUtils;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract WebSocket recognition message\n     *\n     * @class AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractWSMessage(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get the message type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractWSMessage.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AbstractWSMessage = AbstractWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Represent an abstract input component\n     *\n     * @class AbstractComponent\n     * @constructor\n     */\n    function AbstractComponent() {\n    }\n\n    /**\n     * Get the type of the input component\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractComponent.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Set the type of the input component\n     *\n     * @method setType\n     * @param {String} type\n     */\n    AbstractComponent.prototype.setType = function (type) {\n        this.type = type;\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractComponent.prototype.getBoundingBox = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractComponent.prototype.setBoundingBox = function (boundingBox) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractComponent = AbstractComponent;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Represent a simple StrokeComponent input component\n     *\n     * @class StrokeComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function StrokeComponent(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'stroke';\n        this.x = [];\n        this.y = [];\n        this.t = [];\n        this.p = [];\n        this.d = [];\n        this.l = [];\n        this.color = undefined;\n        this.alpha = undefined;\n        this.width = 0;\n        if (obj) {\n            if (obj.x) {\n                this.x = obj.x;\n            }\n            if (obj.y) {\n                this.y = obj.y;\n            }\n            if (obj.t) {\n                this.t = obj.t;\n            }\n            if (obj.p) {\n                this.p = obj.p;\n            }\n            if (obj.d) {\n                this.d = obj.d;\n            }\n            if (obj.l) {\n                this.l = obj.l;\n            }\n            if (obj.color) {\n                this.color = obj.color;\n            }\n            if (obj.alpha) {\n                this.alpha = obj.alpha;\n            }\n            if (obj.width) {\n                this.width = obj.width;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StrokeComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    StrokeComponent.prototype.constructor = StrokeComponent;\n\n    /**\n     * @method toJSON\n     * @returns {Object}\n     */\n    StrokeComponent.prototype.toJSON = function () {\n        return {type: this.type, x: this.x, y: this.y, t: this.t};\n    };\n\n    /**\n     * Get the list of x coordinates\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    StrokeComponent.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Set the list of x coordinates\n     *\n     * @method setX\n     * @param {Number[]} x\n     */\n    StrokeComponent.prototype.setX = function (x) {\n        this.x = x;\n    };\n\n    /**\n     * Add a x to the list of x coordinates\n     *\n     * @method addX\n     * @param {Number} x\n     */\n    StrokeComponent.prototype.addX = function (x) {\n        if ((x !== null) && (x !== undefined)) {\n            this.x.push(x);\n        }\n    };\n\n    /**\n     * Get the list of y coordinates\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    StrokeComponent.prototype.getY = function () {\n        return this.y;\n    };\n\n    /**\n     * Set the list of y coordinates\n     *\n     * @method setY\n     * @param {Number[]} y\n     */\n    StrokeComponent.prototype.setY = function (y) {\n        this.y = y;\n    };\n\n    /**\n     * Add a y to the list of y coordinates\n     *\n     * @method addY\n     * @param {Number} y\n     */\n    StrokeComponent.prototype.addY = function (y) {\n        if ((y !== null) && (y !== undefined)) {\n            this.y.push(y);\n        }\n    };\n\n    /**\n     * Get the list of timestamps\n     *\n     * @method getT\n     * @returns {Number[]}\n     */\n    StrokeComponent.prototype.getT = function () {\n        return this.t;\n    };\n\n    /**\n     * Set the list of timestamps\n     *\n     * @method setT\n     * @param {Number[]} t\n     */\n    StrokeComponent.prototype.setT = function (t) {\n        this.t = t;\n    };\n\n    /**\n     * Add a timestamp to the list\n     *\n     * @method addT\n     * @param {Number} t\n     */\n    StrokeComponent.prototype.addT = function (t) {\n        if ((t !== null) && (t !== undefined)) {\n            this.t.push(t);\n        }\n    };\n\n    StrokeComponent.prototype.getLength = function () {\n        return this.x.length;\n    };\n\n    /**\n     * Get the boundingBox\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    StrokeComponent.prototype.getBoundingBox = function () {\n        var boundingBox = new scope.Rectangle();\n        boundingBox.setX(Math.min.apply(Math, this.getX()));\n        boundingBox.setY(Math.min.apply(Math, this.getY()));\n        boundingBox.setWidth(Math.max.apply(Math, this.getX()) - boundingBox.getX());\n        boundingBox.setHeight(Math.max.apply(Math, this.getY()) - boundingBox.getY());\n        return boundingBox;\n    };\n\n    StrokeComponent.prototype.toFixed = function (precision) {\n        if (precision !== undefined) {\n            for (var i in this.x) {\n                this.x[i] = this.x[i].toFixed(precision);\n                this.y[i] = this.y[i].toFixed(precision);\n            }\n        }\n    };\n\n    StrokeComponent.prototype.getP = function () {\n        return this.p;\n    };\n\n    StrokeComponent.prototype.setP = function (p) {\n        this.p = p;\n    };\n\n    StrokeComponent.prototype.addP = function (p) {\n        if ((p !== null) && (p !== undefined)) {\n            this.p.push(p);\n        }\n    };\n\n    StrokeComponent.prototype.getD = function () {\n        return this.d;\n    };\n\n    StrokeComponent.prototype.setD = function (d) {\n        this.d = d;\n    };\n\n    StrokeComponent.prototype.addD = function (d) {\n        if ((d !== null) && (d !== undefined)) {\n            this.d.push(d);\n        }\n    };\n\n    StrokeComponent.prototype.getL = function () {\n        return this.l;\n    };\n\n    StrokeComponent.prototype.setL = function (l) {\n        this.l = l;\n    };\n\n    StrokeComponent.prototype.addL = function (l) {\n        if ((l !== null) && (l !== undefined)) {\n            this.l.push(l);\n        }\n    };\n\n    StrokeComponent.prototype.getColor = function () {\n        return this.color;\n    };\n\n    StrokeComponent.prototype.setColor = function (color) {\n        this.color = color;\n    };\n\n    StrokeComponent.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    StrokeComponent.prototype.setWidth = function (width) {\n        this.width = width;\n    };\n\n    StrokeComponent.prototype.addPoint = function (x, y, t) {\n        if (_filterPointByAcquisitionDelta(x, y, this.getX(), this.getY(), this.getLastIndexPoint(), this.getWidth(), this.getLength())) {\n            this.addX(x);\n            this.addY(y);\n            this.addT(t);\n            this.addP(_computePressure(x, y, this.getX(), this.getY(), this.getL(), this.getLastIndexPoint()));\n            this.addD(_computeDistance(x, y, this.getX(), this.getY(), this.getLastIndexPoint()));\n            this.addL(_computeLength(x, y, this.getX(), this.getY(), this.getL(), this.getLastIndexPoint()));\n        }\n    };\n\n    StrokeComponent.prototype.getLastIndexPoint = function () {\n        return this.x.length - 1;\n    };\n\n    StrokeComponent.prototype.getPointByIndex = function (index) {\n        var point;\n        if (index !== undefined && index >= 0 && index < this.getLength()) {\n            point = {\n                x: this.getX()[index],\n                y: this.getY()[index],\n                t: this.getT()[index],\n                p: this.getP()[index],\n                d: this.getD()[index],\n                l: this.getL()[index]\n            };\n        }\n        return point;\n    };\n\n    function _computeDistance(x, y, xArray, yArray, lastIndexPoint) {\n        var distance = Math.sqrt(Math.pow((y - yArray[lastIndexPoint - 1]), 2) + Math.pow((x - xArray[lastIndexPoint - 1]), 2));\n\n        if (isNaN(distance)) {\n            distance = 0;\n        }\n\n        return distance;\n    }\n\n    function _computeLength(x, y, xArray, yArray, lArray, lastIndexPoint) {\n        var length = lArray[lastIndexPoint - 1] + _computeDistance(x, y, xArray, yArray, lastIndexPoint);\n\n        if (isNaN(length)) {\n            length = 0;\n        }\n\n        return length;\n    }\n\n    function _computePressure(x, y, xArray, yArray, lArray, lastIndexPoint) {\n        var ratio = 1.0;\n        var distance = _computeDistance(x, y, xArray, yArray, lastIndexPoint);\n        var length = _computeLength(x, y, xArray, yArray, lArray, lastIndexPoint);\n\n        if(length === 0) {\n            ratio = 0.5;\n        } else if(distance == length){\n            ratio = 1.0;\n        } else  if (distance < 10) {\n            ratio = 0.2 + Math.pow(0.1 * distance, 0.4);\n        } else if (distance > length - 10) {\n            ratio = 0.2 + Math.pow(0.1 * (length - distance), 0.4);\n        }\n        var pressure = ratio * Math.max(0.1, 1.0 - 0.1 * Math.sqrt(distance));\n        if (isNaN(parseFloat(pressure))) {\n            pressure = 0.5;\n        }\n        return pressure;\n    }\n\n    function _filterPointByAcquisitionDelta(x, y, xArray, yArray, lastIndexPoint, width, length) {\n        var delta = (2 + (width / 4));\n        var ret = false;\n        if (length === 0 || Math.abs(xArray[lastIndexPoint] - x) >= delta || Math.abs(yArray[lastIndexPoint] - y) >= delta) {\n            ret = true;\n        }\n        return ret;\n    }\n\n    // Export\n    scope.StrokeComponent = StrokeComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharacterInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function CharacterInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        this.type = 'inputCharacter';\n        this.alternates = [];\n        if (obj) {\n            if (obj.alternates) {\n                for (var i in obj.alternates) {\n                    this.alternates.push(new scope.CharacterInputComponentAlternate(obj.alternates[i]));\n                }\n            }\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharacterInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    CharacterInputComponent.prototype.constructor = CharacterInputComponent;\n\n    /**\n     * Get character input alternates\n     *\n     * @method getAlternates\n     * @returns {CharacterInputComponentAlternate[]}\n     */\n    CharacterInputComponent.prototype.getAlternates = function () {\n        return this.alternates;\n    };\n\n    /**\n     * Set character input alternates\n     *\n     * @method setAlternates\n     * @param {CharacterInputComponentAlternate[]} alternates\n     */\n    CharacterInputComponent.prototype.setAlternates = function (alternates) {\n        this.alternates = alternates;\n    };\n\n    /**\n     * Add a character input alternate\n     *\n     * @method addAlternate\n     * @param {CharacterInputComponent} alternate\n     */\n    CharacterInputComponent.prototype.addAlternate = function (alternate) {\n        this.alternates.push(alternate);\n    };\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    CharacterInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    CharacterInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.CharacterInputComponent = CharacterInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Character input component alternate\n     *\n     * @class CharacterInputComponentAlternate\n     * @constructor\n     */\n    function CharacterInputComponentAlternate(obj) {\n        if (obj) {\n            if (obj.alternate) {\n                this.alternate = obj.alternate;\n            }\n            if (obj.probability) {\n                this.probability = obj.probability;\n            }\n        }\n    }\n\n    /**\n     * Get alternate\n     *\n     * @method getAlternate\n     * @returns {String}\n     */\n    CharacterInputComponentAlternate.prototype.getAlternate = function () {\n        return this.alternate;\n    };\n\n    /**\n     * Set alternate\n     *\n     * @method setAlternate\n     * @param {String} alternate\n     */\n    CharacterInputComponentAlternate.prototype.setAlternate = function (alternate) {\n        this.alternate = alternate;\n    };\n\n    /**\n     * Get probability\n     *\n     * @method getProbability\n     * @returns {Number}\n     */\n    CharacterInputComponentAlternate.prototype.getProbability = function () {\n        return this.probability;\n    };\n\n    /**\n     * Set probability\n     *\n     * @method setProbability\n     * @param {Number} probability\n     */\n    CharacterInputComponentAlternate.prototype.setProbability = function (probability) {\n        this.probability = probability;\n    };\n\n    // Export\n    scope.CharacterInputComponentAlternate = CharacterInputComponentAlternate;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract parameters used for recognition\n     *\n     * @class AbstractParameter\n     * @constructor\n     */\n    function AbstractParameter() {\n    }\n\n    // Export\n    scope.AbstractParameter = AbstractParameter;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstraction of recognizer input\n     *\n     * @class AbstractRecognitionInput\n     * @constructor\n     */\n    function AbstractRecognitionInput() {\n    }\n\n    // Export\n    scope.AbstractRecognitionInput = AbstractRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract input recognition data\n     *\n     * @class AbstractRecognitionData\n     * @constructor\n     */\n    function AbstractRecognitionData() {\n    }\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    AbstractRecognitionData.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecognitionData.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set the instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractRecognitionData.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    /**\n     * @returns {string}\n     */\n    AbstractRecognitionData.prototype.getHmac = function () {\n        return this.hmac;\n    };\n\n    /**\n     * @param {string} hmac\n     */\n    AbstractRecognitionData.prototype.setHmac = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    /**\n     * Get recognition input\n     *\n     * @method getRecognitionInput\n     * @returns {AbstractRecognitionInput} input\n     */\n    AbstractRecognitionData.prototype.getRecognitionInput = function () {\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setRecognitionInput\n     * @param {AbstractRecognitionInput} input\n     */\n    AbstractRecognitionData.prototype.setRecognitionInput = function (input) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.AbstractRecognitionData = AbstractRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * List of languages recognition input\n     *\n     * @class RecognitionLanguagesData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function RecognitionLanguagesData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    RecognitionLanguagesData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    RecognitionLanguagesData.prototype.constructor = RecognitionLanguagesData;\n\n    /**\n     * Get the recognition input mode\n     *\n     * @method getInputMode\n     * @returns {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.getInputMode = function () {\n        return this.inputMode;\n    };\n\n    /**\n     * Set the recognition input mode\n     *\n     * @method setInputMode\n     * @param {String} inputMode\n     */\n    RecognitionLanguagesData.prototype.setInputMode = function (inputMode) {\n        this.inputMode = inputMode;\n    };\n\n    // Export\n    scope.RecognitionLanguagesData = RecognitionLanguagesData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class AbstractStartRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractStartRequestWSMessage(obj) {\n        this.type = 'start';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractStartRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractStartRequestWSMessage.prototype.constructor = AbstractStartRequestWSMessage;\n\n    // Export\n    scope.AbstractStartRequestWSMessage = AbstractStartRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class AbstractContinueRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractContinueRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractContinueRequestWSMessage.prototype.constructor = AbstractContinueRequestWSMessage;\n\n    /**\n     * Get instanceId\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractContinueRequestWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Set instanceId\n     *\n     * @method setInstanceId\n     * @param {String} instanceId\n     */\n    AbstractContinueRequestWSMessage.prototype.setInstanceId = function (instanceId) {\n        this.instanceId = instanceId;\n    };\n\n    // Export\n    scope.AbstractContinueRequestWSMessage = AbstractContinueRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeRequestWSMessage(obj) {\n        this.type = 'hmac';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeRequestWSMessage.prototype.constructor = ChallengeRequestWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    /**\n     * Set the challenge\n     *\n     * @method setChallenge\n     * @param {String} challenge\n     */\n    ChallengeRequestWSMessage.prototype.setChallenge = function (challenge) {\n        this.challenge = challenge;\n    };\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    ChallengeRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get HMAC signature\n     *\n     * @method getHmacSignature\n     * @returns {String}\n     */\n    ChallengeRequestWSMessage.prototype.getHmacSignature = function () {\n        return this.hmac;\n    };\n\n    /**\n     * Set HMAC signature\n     *\n     * @method setHmacSignature\n     * @param {String} hmac\n     */\n    ChallengeRequestWSMessage.prototype.setHmacSignature = function (hmac) {\n        this.hmac = hmac;\n    };\n\n    // Export\n    scope.ChallengeRequestWSMessage = ChallengeRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class InitRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitRequestWSMessage(obj) {\n        this.type = 'applicationKey';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitRequestWSMessage.prototype.constructor = InitRequestWSMessage;\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InitRequestWSMessage.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InitRequestWSMessage.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    // Export\n    scope.InitRequestWSMessage = InitRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ResetRequestWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetRequestWSMessage(obj) {\n        this.type = 'reset';\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetRequestWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetRequestWSMessage.prototype.constructor = ResetRequestWSMessage;\n\n    // Export\n    scope.ResetRequestWSMessage = ResetRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract text input component\n     *\n     * @class AbstractTextInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractTextInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        if (obj) {\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractTextInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractTextInputComponent.prototype.constructor = AbstractTextInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractTextInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractTextInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractTextInputComponent = AbstractTextInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Char input component\n     *\n     * @class CharInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function CharInputComponent(obj) {\n        scope.AbstractTextInputComponent.call(this, obj);\n        this.type = 'char';\n        if (obj) {\n            if (obj.character) {\n                this.character = obj.character;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    CharInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    CharInputComponent.prototype.constructor = CharInputComponent;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    CharInputComponent.prototype.getLabel = function () {\n        return this.character;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    CharInputComponent.prototype.setLabel = function (label) {\n        this.character = label;\n    };\n\n    // Export\n    scope.CharInputComponent = CharInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * String input component\n     *\n     * @class StringInputComponent\n     * @extends AbstractTextInputComponent\n     * @constructor\n     */\n    function StringInputComponent(obj) {\n        scope.AbstractTextInputComponent.call(this, obj);\n        this.type = 'string';\n        if (obj) {\n            if (obj.string) {\n                this.string = obj.string;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    StringInputComponent.prototype = new scope.AbstractTextInputComponent();\n\n    /**\n     * Constructor property\n     */\n    StringInputComponent.prototype.constructor = StringInputComponent;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    StringInputComponent.prototype.getLabel = function () {\n        return this.string;\n    };\n\n    /**\n     * Set label\n     *\n     * @method setLabel\n     * @param {String} label\n     */\n    StringInputComponent.prototype.setLabel = function (label) {\n        this.string = label;\n    };\n\n    // Export\n    scope.StringInputComponent = StringInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Input unit used for text recognition\n     *\n     * @class TextInputUnit\n     * @constructor\n     */\n    function TextInputUnit() {\n        this.textInputType = 'MULTI_LINE_TEXT';\n        this.components = [];\n    }\n\n    /**\n     * Get the input type\n     *\n     * @method getInputType\n     * @returns {String}\n     */\n    TextInputUnit.prototype.getInputType = function () {\n        return this.textInputType;\n    };\n\n    /**\n     * Set the input type\n     *\n     * @method setInputType\n     * @returns {String} inputType\n     */\n    TextInputUnit.prototype.setInputType = function (inputType) {\n        this.textInputType = inputType;\n    };\n\n    /**\n     * Get components for this input unit\n     *\n     * @method getComponents\n     * @param {TextInkRange} [inkRange]\n     * @returns {AbstractComponent[]}\n     */\n    TextInputUnit.prototype.getComponents = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.components.slice(inkRange.getStartComponent(), inkRange.getEndComponent() + 1);\n        }\n        return this.components;\n    };\n\n    /**\n     * Set components for this input unit\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    TextInputUnit.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.TextInputUnit = TextInputUnit;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for text recognition\n     *\n     * @class TextParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function TextParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textProperties = new scope.TextProperties();\n        if (obj) {\n            if (obj.language) {\n                this.language = obj.language;\n            }\n            if (obj.textInputMode) {\n                this.textInputMode = obj.textInputMode;\n            }\n            if (obj.contentTypes) {\n                this.contentTypes = obj.contentTypes;\n            }\n            if (obj.subsetKnowledges) {\n                this.subsetKnowledges = obj.subsetKnowledges;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.userLkWords) {\n                this.userLkWords = obj.userLkWords;\n            }\n            if (obj.resultDetail) {\n                this.resultDetail = obj.resultDetail;\n            }\n            if (obj.textProperties) {\n                this.textProperties = new scope.TextProperties(obj.textProperties);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    TextParameter.prototype.constructor = TextParameter;\n\n    /**\n     * Get recognition language\n     *\n     * @method getLanguage\n     * @returns {String}\n     */\n    TextParameter.prototype.getLanguage = function () {\n        return this.language;\n    };\n\n    /**\n     * Set recognition language\n     *\n     * @method getLanguage\n     * @param {String} language\n     */\n    TextParameter.prototype.setLanguage = function (language) {\n        this.language = language;\n    };\n\n    /**\n     * Get input mode\n     *\n     * @method getInputMode\n     * @returns {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'}\n     */\n    TextParameter.prototype.getInputMode = function () {\n        return this.textInputMode;\n    };\n\n    /**\n     * Set input mode\n     *\n     * @method setInputMode\n     * @param {'CURSIVE'|'ISOLATED'|'SUPERIMPOSED'|'VERTICAL'} inputMode\n     */\n    TextParameter.prototype.setInputMode = function (inputMode) {\n        this.textInputMode = inputMode;\n    };\n\n    /**\n     * Get content types\n     *\n     * @method getContentTypes\n     * @returns {Array}\n     */\n    TextParameter.prototype.getContentTypes = function () {\n        return this.contentTypes;\n    };\n\n    /**\n     * Set content types\n     *\n     * @method setContentTypes\n     * @param {Array} contentTypes\n     */\n    TextParameter.prototype.setContentTypes = function (contentTypes) {\n        this.contentTypes = contentTypes;\n    };\n\n    /**\n     * Get SK\n     *\n     * @method getSubsetKnowledges\n     * @returns {Array}\n     */\n    TextParameter.prototype.getSubsetKnowledges = function () {\n        return this.subsetKnowledges;\n    };\n\n    /**\n     * Set SK\n     *\n     * @method setSubsetKnowledges\n     * @param {Array} subsetKnowledges\n     */\n    TextParameter.prototype.setSubsetKnowledges = function (subsetKnowledges) {\n        this.subsetKnowledges = subsetKnowledges;\n    };\n\n    /**\n     * Get user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    TextParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get user LK words\n     *\n     * @method getUserLkWords\n     * @returns {Array}\n     */\n    TextParameter.prototype.getUserLkWords = function () {\n        return this.userLkWords;\n    };\n\n    /**\n     * Set user LK words\n     *\n     * @method setUserLkWords\n     * @param {Array} userLkWords\n     */\n    TextParameter.prototype.setUserLkWords = function (userLkWords) {\n        this.userLkWords = userLkWords;\n    };\n\n    /**\n     * Get result detail (e.g. TEXT, WORD ...)\n     *\n     * @method getResultDetail\n     * @returns {'TEXT'|'WORD'|'CHARACTER'}\n     */\n    TextParameter.prototype.getResultDetail = function () {\n        return this.resultDetail;\n    };\n\n    /**\n     * Set result detail (e.g. TEXT, WORD ...)\n     *\n     * @method setResultDetail\n     * @param {'TEXT'|'WORD'|'CHARACTER'} resultDetail\n     */\n    TextParameter.prototype.setResultDetail = function (resultDetail) {\n        this.resultDetail = resultDetail;\n    };\n\n    /**\n     * Get text properties\n     *\n     * @method getTextProperties\n     * @returns {TextProperties}\n     */\n    TextParameter.prototype.getTextProperties = function () {\n        return this.textProperties;\n    };\n\n    /**\n     * Set text properties\n     *\n     * @method setTextProperties\n     * @param {TextProperties} properties\n     */\n    TextParameter.prototype.setTextProperties = function (textProperties) {\n        this.textProperties = textProperties;\n    };\n\n    // Export\n    scope.TextParameter = TextParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text recognition properties\n     *\n     * @class TextProperties\n     * @constructor\n     */\n    function TextProperties(obj) {\n        if (obj) {\n            if (obj.textCandidateListSize) {\n                this.textCandidateListSize = obj.textCandidateListSize;\n            }\n            if (obj.wordCandidateListSize) {\n                this.wordCandidateListSize = obj.wordCandidateListSize;\n            }\n            if (obj.wordPredictionListSize) {\n                this.wordPredictionListSize = obj.wordPredictionListSize;\n            }\n            if (obj.wordCompletionListSize) {\n                this.wordCompletionListSize = obj.wordCompletionListSize;\n            }\n            if (obj.characterCandidateListSize) {\n                this.characterCandidateListSize = obj.characterCandidateListSize;\n            }\n            if (obj.discardCaseVariations) {\n                this.discardCaseVariations = obj.discardCaseVariations;\n            }\n            if (obj.discardAccentuationVariations) {\n                this.discardAccentuationVariations = obj.discardAccentuationVariations;\n            }\n            if (obj.disableSpatialOrdering) {\n                this.disableSpatialOrdering = obj.disableSpatialOrdering;\n            }\n            if (obj.glyphDistortion) {\n                this.glyphDistortion = obj.glyphDistortion;\n            }\n            if (obj.enableOutOfLexicon) {\n                this.enableOutOfLexicon = obj.enableOutOfLexicon;\n            }\n            if (obj.spellingDistortion) {\n                this.spellingDistortion = obj.spellingDistortion;\n            }\n        }\n    }\n\n    /**\n     * Get the number of text candidates requested\n     *\n     * @method getTextCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getTextCandidateListSize = function () {\n        return this.textCandidateListSize;\n    };\n\n    /**\n     * Set the number of text candidates requested\n     *\n     * @method setTextCandidateListSize\n     * @param {Number} textCandidateListSize\n     */\n    TextProperties.prototype.setTextCandidateListSize = function (textCandidateListSize) {\n        this.textCandidateListSize = textCandidateListSize;\n    };\n\n    /**\n     * Get the number of word candidates requested\n     *\n     * @method getWordCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCandidateListSize = function () {\n        return this.wordCandidateListSize;\n    };\n\n    /**\n     * Set the number of word candidates requested\n     *\n     * @method setWordCandidateListSize\n     * @param {Number} wordCandidateListSize\n     */\n    TextProperties.prototype.setWordCandidateListSize = function (wordCandidateListSize) {\n        this.wordCandidateListSize = wordCandidateListSize;\n    };\n\n    /**\n     * Get the number of word prediction candidates requested\n     *\n     * @method getWordPredictionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordPredictionListSize = function () {\n        return this.wordPredictionListSize;\n    };\n\n    /**\n     * Set the number of word prediction candidates requested\n     *\n     * @method setWordPredictionListSize\n     * @param {Number} wordPredictionListSize\n     */\n    TextProperties.prototype.setWordPredictionListSize = function (wordPredictionListSize) {\n        this.wordPredictionListSize = wordPredictionListSize;\n    };\n\n    /**\n     * Get the number of word completion candidates requested\n     *\n     * @method getWordCompletionListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getWordCompletionListSize = function () {\n        return this.wordCompletionListSize;\n    };\n\n    /**\n     * Set the number of word completion candidates requested\n     *\n     * @method setWordCompletionListSize\n     * @param {Number} wordCompletionListSize\n     */\n    TextProperties.prototype.setWordCompletionListSize = function (wordCompletionListSize) {\n        this.wordCompletionListSize = wordCompletionListSize;\n    };\n\n    /**\n     * Get the number of character candidates requested\n     *\n     * @method getCharacterCandidateListSize\n     * @returns {Number}\n     */\n    TextProperties.prototype.getCharacterCandidateListSize = function () {\n        return this.characterCandidateListSize;\n    };\n\n    /**\n     * Set the number of character candidates requested\n     *\n     * @method setCharacterCandidateListSize\n     * @param {Number} characterCandidateListSize\n     */\n    TextProperties.prototype.setCharacterCandidateListSize = function (characterCandidateListSize) {\n        this.characterCandidateListSize = characterCandidateListSize;\n    };\n\n    /**\n     * Get the discard case variations\n     *\n     * @method getDiscardCaseVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardCaseVariations = function () {\n        return this.discardCaseVariations;\n    };\n\n    /**\n     * Set the discard case variations\n     *\n     * @method setDiscardCaseVariations\n     * @param {boolean} discardCaseVariations\n     */\n    TextProperties.prototype.setDiscardCaseVariations = function (discardCaseVariations) {\n        this.discardCaseVariations = discardCaseVariations;\n    };\n\n    /**\n     * Get the discard accentuation variations\n     *\n     * @method getDiscardAccentuationVariations\n     * @returns {boolean}\n     */\n    TextProperties.prototype.getDiscardAccentuationVariations = function () {\n        return this.discardAccentuationVariations;\n    };\n\n    /**\n     * Set the discard accentuation variations\n     *\n     * @method setDiscardAccentuationVariations\n     * @param {boolean} discardAccentuationVariations\n     */\n    TextProperties.prototype.setDiscardAccentuationVariations = function (discardAccentuationVariations) {\n        this.discardAccentuationVariations = discardAccentuationVariations;\n    };\n\n    /**\n     * Get disable spatial ordering\n     *\n     * @method getDisableSpatialOrdering\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getDisableSpatialOrdering = function () {\n        return this.disableSpatialOrdering;\n    };\n\n    /**\n     * Set disable spatial ordering\n     *\n     * @method setDisableSpatialOrdering\n     * @param {Boolean} disableSpatialOrdering\n     */\n    TextProperties.prototype.setDisableSpatialOrdering = function (disableSpatialOrdering) {\n        this.disableSpatialOrdering = disableSpatialOrdering;\n    };\n\n    /**\n     * Get glyph distortion\n     *\n     * @method getGlyphDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getGlyphDistortion = function () {\n        return this.glyphDistortion;\n    };\n\n    /**\n     * Set glyph distortion\n     *\n     * @method setGlyphDistortion\n     * @param {Number} glyphDistortion\n     */\n    TextProperties.prototype.setGlyphDistortion = function (glyphDistortion) {\n        this.glyphDistortion = glyphDistortion;\n    };\n\n    /**\n     * Get enable out of lexicon\n     *\n     * @method getEnableOutOfLexicon\n     * @returns {Boolean}\n     */\n    TextProperties.prototype.getEnableOutOfLexicon = function () {\n        return this.enableOutOfLexicon;\n    };\n\n    /**\n     * Set enable out of lexicon\n     *\n     * @method setEnableOutOfLexicon\n     * @param {Boolean} enableOutOfLexicon\n     */\n    TextProperties.prototype.setEnableOutOfLexicon = function (enableOutOfLexicon) {\n        this.enableOutOfLexicon = enableOutOfLexicon;\n    };\n\n    /**\n     * Get spelling distortion\n     *\n     * @method getSpellingDistortion\n     * @returns {Number}\n     */\n    TextProperties.prototype.getSpellingDistortion = function () {\n        return this.spellingDistortion;\n    };\n\n    /**\n     * Set spelling distortion\n     *\n     * @method setSpellingDistortion\n     * @param {Number} spellingDistortion\n     */\n    TextProperties.prototype.setSpellingDistortion = function (spellingDistortion) {\n        this.spellingDistortion = spellingDistortion;\n    };\n\n    // Export\n    scope.TextProperties = TextProperties;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for text recognition\n     *\n     * @class TextRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function TextRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionInput.prototype.constructor = TextRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextRecognitionInput.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextRecognitionInput.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @param {TextInkRange} [inkRange]\n     * @returns {TextInputUnit[]}\n     */\n    TextRecognitionInput.prototype.getInputUnits = function (inkRange) {\n        if (inkRange && (inkRange instanceof scope.TextInkRange)) {\n            return this.inputUnits.slice(inkRange.getStartUnit(), inkRange.getEndUnit() + 1);\n        }\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextRecognitionInput.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextRecognitionInput = TextRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for text input\n     *\n     * @class TextRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function TextRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    TextRecognitionData.prototype.constructor = TextRecognitionData;\n\n    /**\n     * Get text input\n     *\n     * @method getRecognitionInput\n     * @returns {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.getRecognitionInput = function () {\n        return this.textInput;\n    };\n\n    /**\n     * Set text input\n     *\n     * @method setRecognitionInput\n     * @param {TextRecognitionInput} input\n     */\n    TextRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.textInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.TextRecognitionData = TextRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket start text recognition message\n     *\n     * @class TextStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextStartRequestWSMessage.prototype.constructor = TextStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextStartRequestWSMessage.prototype.getParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextStartRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextStartRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextStartRequestWSMessage = TextStartRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket continue text recognition message\n     *\n     * @class TextContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextContinueRequestWSMessage(obj) {\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextContinueRequestWSMessage.prototype.constructor = TextContinueRequestWSMessage;\n\n    /**\n     * Get input units\n     *\n     * @method getInputUnits\n     * @returns {TextInputUnit[]}\n     */\n    TextContinueRequestWSMessage.prototype.getInputUnits = function () {\n        return this.inputUnits;\n    };\n\n    /**\n     * Set input units\n     *\n     * @method setInputUnits\n     * @param {TextInputUnit[]} inputUnits\n     */\n    TextContinueRequestWSMessage.prototype.setInputUnits = function (inputUnits) {\n        this.inputUnits = inputUnits;\n    };\n\n    // Export\n    scope.TextContinueRequestWSMessage = TextContinueRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for shape recognition\n     *\n     * @class ShapeParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function ShapeParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        if (obj) {\n            if (obj.rejectDetectionSensitivity) {\n                this.rejectDetectionSensitivity = obj.rejectDetectionSensitivity;\n            }\n            if (obj.doBeautification) {\n                this.doBeautification = obj.doBeautification;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    ShapeParameter.prototype.constructor = ShapeParameter;\n\n    /**\n     * Get the sensitivity of the reject detection\n     *\n     * @method getRejectDetectionSensitivity\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.getRejectDetectionSensitivity = function () {\n        return this.rejectDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the reject detection\n     *\n     * @method setRejectDetectionSensitivity\n     * @param {Boolean} rejectDetectionSensitivity\n     */\n    ShapeParameter.prototype.setRejectDetectionSensitivity = function (rejectDetectionSensitivity) {\n        this.rejectDetectionSensitivity = rejectDetectionSensitivity;\n    };\n\n    /**\n     * Get the beautification\n     *\n     * @method hasBeautification\n     * @returns {Boolean}\n     */\n    ShapeParameter.prototype.hasBeautification = function () {\n        return this.doBeautification;\n    };\n\n    /**\n     * Set the beautification\n     *\n     * @method setBeautification\n     * @param {Boolean} doBeautification\n     */\n    ShapeParameter.prototype.setBeautification = function (doBeautification) {\n        this.doBeautification = doBeautification;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    ShapeParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    ShapeParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    // Export\n    scope.ShapeParameter = ShapeParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for shape recognition\n     *\n     * @class ShapeRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function ShapeRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionInput.prototype.constructor = ShapeRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {ShapeParameter}\n     */\n    ShapeRecognitionInput.prototype.getParameters = function () {\n        return new ShapeParameter({\n            rejectDetectionSensitivity: this.rejectDetectionSensitivity,\n            doBeautification: this.doBeautification,\n            userResources: this.userResources\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {ShapeParameter} parameters\n     */\n    ShapeRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.rejectDetectionSensitivity = parameters.getRejectDetectionSensitivity();\n            this.doBeautification = parameters.hasBeautification();\n            this.userResources = parameters.getUserResources();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    ShapeRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    ShapeRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.ShapeRecognitionInput = ShapeRecognitionInput;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for shape input\n     *\n     * @class ShapeRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function ShapeRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognitionData.prototype.constructor = ShapeRecognitionData;\n\n    /**\n     * Get shape input\n     *\n     * @method getRecognitionInput\n     * @returns {ShapeRecognitionInput}\n     */\n    ShapeRecognitionData.prototype.getRecognitionInput = function () {\n        return this.shapeInput;\n    };\n\n    /**\n     * Set shape input\n     *\n     * @method setRecognitionInput\n     * @param {ShapeRecognitionInput} input\n     */\n    ShapeRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.shapeInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.ShapeRecognitionData = ShapeRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for math recognition\n     *\n     * @class MathParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MathParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n        if (obj) {\n            if (obj.resultTypes) {\n                this.resultTypes = obj.resultTypes;\n            }\n            if (obj.columnarOperation) {\n                this.columnarOperation = obj.columnarOperation;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.scratchOutDetectionSensitivity) {\n                this.scratchOutDetectionSensitivity = obj.scratchOutDetectionSensitivity;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MathParameter.prototype.constructor = MathParameter;\n\n    /**\n     * Get the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MathParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the math result types (e.g. LaTex, MathML, SymbolTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MathParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the math result result orientation to columnar operations\n     *\n     * @method isColumnar\n     * @returns {Boolean}\n     */\n    MathParameter.prototype.isColumnar = function () {\n        return this.columnarOperation;\n    };\n\n    /**\n     * Set the math result orientation to columnar operations\n     *\n     * @method setColumnar\n     * @param  {Boolean} columnar\n     */\n    MathParameter.prototype.setColumnar = function (columnar) {\n        this.columnarOperation = columnar;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MathParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MathParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MathParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MathParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    // Export\n    scope.MathParameter = MathParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for math recognition\n     *\n     * @class MathRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MathRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionInput.prototype.constructor = MathRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathRecognitionInput.prototype.getParameters = function () {\n        return new MathParameter({\n            resultTypes: this.resultTypes,\n            columnarOperation: this.columnarOperation,\n            userResources: this.userResources,\n            scratchOutDetectionSensitivity: this.scratchOutDetectionSensitivity\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.resultTypes = parameters.getResultTypes();\n            this.columnarOperation = parameters.isColumnar();\n            this.userResources = parameters.getUserResources();\n            this.scratchOutDetectionSensitivity = parameters.getScratchOutDetectionSensitivity();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MathRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MathRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathRecognitionInput = MathRecognitionInput;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for math input\n     *\n     * @class MathRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MathRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MathRecognitionData.prototype.constructor = MathRecognitionData;\n\n\n    /**\n     * Get math input\n     *\n     * @method getRecognitionInput\n     * @returns {MathRecognitionInput}\n     */\n    MathRecognitionData.prototype.getRecognitionInput = function () {\n        return this.mathInput;\n    };\n\n    /**\n     * Set math input\n     *\n     * @method setRecognitionInput\n     * @param {MathRecognitionInput} input\n     */\n    MathRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.mathInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MathRecognitionData = MathRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket start math recognition message\n     *\n     * @class MathStartRequestWSMessage\n     * @extends AbstractStartRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathStartRequestWSMessage(obj) {\n        scope.AbstractStartRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathStartRequestWSMessage.prototype = new scope.AbstractStartRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathStartRequestWSMessage.prototype.constructor = MathStartRequestWSMessage;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathStartRequestWSMessage.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathStartRequestWSMessage.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathStartRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathStartRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathStartRequestWSMessage = MathStartRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket continue math recognition message\n     *\n     * @class MathContinueRequestWSMessage\n     * @extends AbstractContinueRequestWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathContinueRequestWSMessage(obj) {\n        this.type = 'continue';\n        scope.AbstractContinueRequestWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathContinueRequestWSMessage.prototype = new scope.AbstractContinueRequestWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathContinueRequestWSMessage.prototype.constructor = MathContinueRequestWSMessage;\n\n    /**\n     * Get components\n     *\n     * @method getComponents\n     * @returns {MathInputUnit[]}\n     */\n    MathContinueRequestWSMessage.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set components\n     *\n     * @method setComponents\n     * @param {MathInputUnit[]} components\n     */\n    MathContinueRequestWSMessage.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MathContinueRequestWSMessage = MathContinueRequestWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract music input component\n     *\n     * @class AbstractMusicInputComponent\n     * @extends AbstractComponent\n     * @constructor\n     */\n    function AbstractMusicInputComponent(obj) {\n        scope.AbstractComponent.call(this);\n        if (obj) {\n            if (obj.boundingBox) {\n                this.boundingBox = new scope.Rectangle(obj.boundingBox);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractMusicInputComponent.prototype = new scope.AbstractComponent();\n\n    /**\n     * Constructor property\n     */\n    AbstractMusicInputComponent.prototype.constructor = AbstractMusicInputComponent;\n\n    /**\n     * Get input component bounding-box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AbstractMusicInputComponent.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n\n    /**\n     * Set input component bounding-box\n     *\n     * @method setBoundingBox\n     * @param {Rectangle} boundingBox\n     */\n    AbstractMusicInputComponent.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n\n    // Export\n    scope.AbstractMusicInputComponent = AbstractMusicInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Accidental input component\n     *\n     * @class MusicAccidentalInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicAccidentalInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'accidental';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidentalInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidentalInputComponent.prototype.constructor = MusicAccidentalInputComponent;\n\n    /**\n     * Get accidental input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicAccidentalInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set accidental input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicAccidentalInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicAccidentalInputComponent = MusicAccidentalInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Arpeggiate input component\n     *\n     * @class MusicArpeggiateInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicArpeggiateInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'arpeggiate';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiateInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiateInputComponent.prototype.constructor = MusicArpeggiateInputComponent;\n\n    /**\n     * Get arpeggiate input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicArpeggiateInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set arpeggiate input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicArpeggiateInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicArpeggiateInputComponent = MusicArpeggiateInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Bar input component\n     *\n     * @class MusicBarInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBarInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'bar';\n        this.value = new scope.MusicBar();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicBar(obj.value);\n            }\n        }\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBarInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBarInputComponent.prototype.constructor = MusicBarInputComponent;\n\n    /**\n     * Get bar component value\n     *\n     * @method getValue\n     * @returns {MusicBar}\n     */\n    MusicBarInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set bar component value\n     *\n     * @method setValue\n     * @param {MusicBar} value\n     */\n    MusicBarInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBarInputComponent = MusicBarInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Beam input component\n     *\n     * @class MusicBeamInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicBeamInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'beam';\n        this.value = new scope.MusicBeam();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicBeam(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeamInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicBeamInputComponent.prototype.constructor = MusicBeamInputComponent;\n\n    /**\n     * Get beam input component value\n     *\n     * @method getValue\n     * @returns {MusicBeam}\n     */\n    MusicBeamInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set beam input component value\n     *\n     * @method setValue\n     * @param {MusicBeam} value\n     */\n    MusicBeamInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicBeamInputComponent = MusicBeamInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Clef input component\n     * default clef values: symbol='G', octave=0\n     *\n     * @class MusicClefInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicClefInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'clef';\n        this.value = new scope.MusicClef();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicClef(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClefInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicClefInputComponent.prototype.constructor = MusicClefInputComponent;\n\n    /**\n     * Get clef input component value\n     *\n     * @method getValue\n     * @returns {MusicClef}\n     */\n    MusicClefInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set clef input component value\n     *\n     * @method setValue\n     * @param {MusicClef} value\n     */\n    MusicClefInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicClefInputComponent = MusicClefInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Decoration input component\n     *\n     * @class MusicDecorationInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDecorationInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'decoration';\n        this.value = new scope.MusicDecoration();\n        if (obj) {\n            if (obj.value) {\n                this.value = new scope.MusicDecoration(obj.value);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecorationInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDecorationInputComponent.prototype.constructor = MusicDecorationInputComponent;\n\n    /**\n     * Get decoration input component value\n     *\n     * @method getValue\n     * @returns {MusicDecoration}\n     */\n    MusicDecorationInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set decoration input component value\n     *\n     * @method setValue\n     * @param {MusicDecoration} value\n     */\n    MusicDecorationInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDecorationInputComponent = MusicDecorationInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Dots input component\n     *\n     * @class MusicDotsInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicDotsInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'dots';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDotsInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicDotsInputComponent.prototype.constructor = MusicDotsInputComponent;\n\n    /**\n     * Get dots input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicDotsInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set dots input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicDotsInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicDotsInputComponent = MusicDotsInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Head input component\n     *\n     * @class MusicHeadInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicHeadInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'head';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHeadInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicHeadInputComponent.prototype.constructor = MusicHeadInputComponent;\n\n    /**\n     * Get head input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicHeadInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set head input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicHeadInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicHeadInputComponent = MusicHeadInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Ledger line input component\n     *\n     * @class MusicLedgerLineInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicLedgerLineInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'ledgerLine';\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLineInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLineInputComponent.prototype.constructor = MusicLedgerLineInputComponent;\n\n    // Export\n    scope.MusicLedgerLineInputComponent = MusicLedgerLineInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Rest input component\n     *\n     * @class MusicRestInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicRestInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'rest';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRestInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicRestInputComponent.prototype.constructor = MusicRestInputComponent;\n\n    /**\n     * Get rest input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicRestInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set rest input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicRestInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicRestInputComponent = MusicRestInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Stem input component\n     *\n     * @class MusicStemInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicStemInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'stem';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStemInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicStemInputComponent.prototype.constructor = MusicStemInputComponent;\n\n    /**\n     * Get stem input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicStemInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set stem input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicStemInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicStemInputComponent = MusicStemInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Tie ro slur input component\n     *\n     * @class MusicTieOrSlurInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTieOrSlurInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'tieOrSlur';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTieOrSlurInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTieOrSlurInputComponent.prototype.constructor = MusicTieOrSlurInputComponent;\n\n    /**\n     * Get tie or slur input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTieOrSlurInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set tie or slur input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTieOrSlurInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTieOrSlurInputComponent = MusicTieOrSlurInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Time signature input component\n     *\n     * @class MusicTimeSignatureInputComponent\n     * @extends AbstractMusicInputComponent\n     * @constructor\n     */\n    function MusicTimeSignatureInputComponent(obj) {\n        scope.AbstractMusicInputComponent.call(this, obj);\n        this.type = 'timeSignature';\n        if (obj) {\n            if (obj.value) {\n                this.value = obj.value;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignatureInputComponent.prototype = new scope.AbstractMusicInputComponent();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignatureInputComponent.prototype.constructor = MusicTimeSignatureInputComponent;\n\n    /**\n     * Get time signature input component value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicTimeSignatureInputComponent.prototype.getValue = function () {\n        return this.value;\n    };\n\n    /**\n     * Set time signature input component value\n     *\n     * @method setValue\n     * @param {String} value\n     */\n    MusicTimeSignatureInputComponent.prototype.setValue = function (value) {\n        this.value = value;\n    };\n\n    // Export\n    scope.MusicTimeSignatureInputComponent = MusicTimeSignatureInputComponent;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represents a staff used for music recognition\n     * default values: count=5, gap=20\n     *\n     * @class MusicStaff\n     * @constructor\n     */\n    function MusicStaff(obj) {\n        this.count = 5;\n        this.gap = 20;\n        if (obj) {\n            if (obj.count) {\n                this.count = obj.count;\n            }\n            if (obj.gap) {\n                this.gap = obj.gap;\n            }\n            if (obj.top) {\n                this.top = obj.top;\n            }\n        }\n    }\n\n    /**\n     * Get the lines count\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getCount = function () {\n        return this.count;\n    };\n\n    /**\n     * Set the lines count\n     *\n     * @method setCount\n     * @param {Number} count\n     */\n    MusicStaff.prototype.setCount = function (count) {\n        this.count = count;\n    };\n\n    /**\n     * Get the spacing from the top\n     *\n     * @method getTop\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Set the spacing from the top\n     *\n     * @method setTop\n     * @param {Number} top\n     */\n    MusicStaff.prototype.setTop = function (top) {\n        this.top = top;\n    };\n\n    /**\n     * Get the gap between lines\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicStaff.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set the gap between lines\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicStaff.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    // Export\n    scope.MusicStaff = MusicStaff;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for music recognition\n     *\n     * @class MusicParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function MusicParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.resultTypes = [];\n        this.userResources = [];\n        if (obj) {\n            if (obj.divisions) {\n                this.divisions = obj.divisions;\n            }\n            if (obj.staff) {\n                this.staff = new scope.MusicStaff(obj.staff);\n            }\n            if (obj.scratchOutDetectionSensitivity) {\n                this.scratchOutDetectionSensitivity = obj.scratchOutDetectionSensitivity;\n            }\n            if (obj.userResources) {\n                this.userResources = obj.userResources;\n            }\n            if (obj.resultTypes) {\n                this.resultTypes = obj.resultTypes;\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    MusicParameter.prototype.constructor = MusicParameter;\n\n    /**\n     * Get the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method getResultTypes\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getResultTypes = function () {\n        return this.resultTypes;\n    };\n\n    /**\n     * Set the music result types (e.g. MusicXML, ScoreTree)\n     *\n     * @method setResultTypes\n     * @param {Array} resultTypes\n     */\n    MusicParameter.prototype.setResultTypes = function (resultTypes) {\n        this.resultTypes = resultTypes;\n    };\n\n    /**\n     * Get the user resources\n     *\n     * @method getUserResources\n     * @returns {Array}\n     */\n    MusicParameter.prototype.getUserResources = function () {\n        return this.userResources;\n    };\n\n    /**\n     * Set the user resources\n     *\n     * @method setUserResources\n     * @param {Array} userResources\n     */\n    MusicParameter.prototype.setUserResources = function (userResources) {\n        this.userResources = userResources;\n    };\n\n    /**\n     * Get the sensitivity of the scratch-out detection\n     *\n     * @method getScratchOutDetectionSensitivity\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getScratchOutDetectionSensitivity = function () {\n        return this.scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Set the sensitivity of the scratch-out detection\n     *\n     * @method setScratchOutDetectionSensitivity\n     * @param {Number} scratchOutDetectionSensitivity\n     */\n    MusicParameter.prototype.setScratchOutDetectionSensitivity = function (scratchOutDetectionSensitivity) {\n        this.scratchOutDetectionSensitivity = scratchOutDetectionSensitivity;\n    };\n\n    /**\n     * Get the staff\n     *\n     * @method getStaff\n     * @returns {MusicStaff}\n     */\n    MusicParameter.prototype.getStaff = function () {\n        return this.staff;\n    };\n\n    /**\n     * Set the staff\n     *\n     * @method setStaff\n     * @param {MusicStaff} staff\n     */\n    MusicParameter.prototype.setStaff = function (staff) {\n        this.staff = staff;\n    };\n\n    /**\n     * Get the number of divisions\n     *\n     * @method getDivisions\n     * @returns {Number}\n     */\n    MusicParameter.prototype.getDivisions = function () {\n        return this.divisions;\n    };\n\n    /**\n     * Set the number of divisions\n     *\n     * @method setDivisions\n     * @param {Number} divisions\n     */\n    MusicParameter.prototype.setDivisions = function (divisions) {\n        this.divisions = divisions;\n    };\n\n    // Export\n    scope.MusicParameter = MusicParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for music recognition\n     *\n     * @class MusicRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function MusicRecognitionInput() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionInput.prototype.constructor = MusicRecognitionInput;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MusicParameter}\n     */\n    MusicRecognitionInput.prototype.getParameters = function () {\n        return new MusicParameter({\n            divisions: this.divisions,\n            staff: this.staff,\n            scratchOutDetectionSensitivity: this.scratchOutDetectionSensitivity,\n            resultTypes: this.resultTypes,\n            userResources: this.userResources\n        });\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MusicParameter} parameters\n     */\n    MusicRecognitionInput.prototype.setParameters = function (parameters) {\n        if (parameters) {\n            this.divisions = parameters.getDivisions();\n            this.staff = parameters.getStaff();\n            this.scratchOutDetectionSensitivity = parameters.getScratchOutDetectionSensitivity();\n            this.resultTypes = parameters.getResultTypes();\n            this.userResources = parameters.getUserResources();\n        }\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    MusicRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    MusicRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.MusicRecognitionInput = MusicRecognitionInput;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for music input\n     *\n     * @class MusicRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function MusicRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognitionData.prototype.constructor = MusicRecognitionData;\n\n    /**\n     * Get music input\n     *\n     * @method getRecognitionInput\n     * @returns {MusicRecognitionInput}\n     */\n    MusicRecognitionData.prototype.getRecognitionInput = function () {\n        return this.musicInput;\n    };\n\n    /**\n     * Set music input\n     *\n     * @method setRecognitionInput\n     * @param {MusicRecognitionInput} input\n     */\n    MusicRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.musicInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.MusicRecognitionData = MusicRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Parameters used for analyzer recognition\n     *\n     * @class AnalyzerParameter\n     * @extends AbstractParameter\n     * @constructor\n     */\n    function AnalyzerParameter(obj) {\n        scope.AbstractParameter.call(this, obj);\n        this.textParameter = new scope.TextParameter();\n        this.textParameter.setLanguage('en_US');\n        this.textParameter.setInputMode('CURSIVE');\n        if (obj) {\n            if (obj.coordinateResolution) {\n                this.coordinateResolution = obj.coordinateResolution;\n            }\n            if (obj.textParameter) {\n                this.textParameter = new scope.TextParameter(obj.textParameter);\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerParameter.prototype = new scope.AbstractParameter();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerParameter.prototype.constructor = AnalyzerParameter;\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter}\n     */\n    AnalyzerParameter.prototype.getTextParameters = function () {\n        return this.textParameter;\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} parameters\n     */\n    AnalyzerParameter.prototype.setTextParameters = function (parameters) {\n        this.textParameter = parameters;\n    };\n\n    /**\n     * Get analyzer coordinate resolution\n     *\n     * @method getCoordinateResolution\n     * @returns {Number}\n     */\n    AnalyzerParameter.prototype.getCoordinateResolution = function () {\n        return this.coordinateResolution;\n    };\n\n    /**\n     * Set analyzer coordinate resolution\n     *\n     * @method setCoordinateResolution\n     * @param {Number} coordinateResolution\n     */\n    AnalyzerParameter.prototype.setCoordinateResolution = function (coordinateResolution) {\n        this.coordinateResolution = coordinateResolution;\n    };\n\n    // Export\n    scope.AnalyzerParameter = AnalyzerParameter;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition input object for analyzer recognition\n     *\n     * @class AnalyzerRecognitionInput\n     * @extends AbstractRecognitionInput\n     * @constructor\n     */\n    function AnalyzerRecognitionInput() {\n\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionInput.prototype = new scope.AbstractRecognitionInput();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionInput.prototype.constructor = AnalyzerRecognitionInput;\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getParameters\n     * @returns {AnalyzerParameter}\n     */\n    AnalyzerRecognitionInput.prototype.getParameters = function () {\n        return this.parameter;\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setParameters\n     * @param {AnalyzerParameter} parameters\n     */\n    AnalyzerRecognitionInput.prototype.setParameters = function (parameters) {\n        this.parameter = parameters;\n    };\n\n    /**\n     * Get input components\n     *\n     * @method getComponents\n     * @returns {AbstractComponent[]}\n     */\n    AnalyzerRecognitionInput.prototype.getComponents = function () {\n        return this.components;\n    };\n\n    /**\n     * Set input components\n     *\n     * @method setComponents\n     * @param {AbstractComponent[]} components\n     */\n    AnalyzerRecognitionInput.prototype.setComponents = function (components) {\n        this.components = components;\n    };\n\n    // Export\n    scope.AnalyzerRecognitionInput = AnalyzerRecognitionInput;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Recognition data for analyzer input\n     *\n     * @class AnalyzerRecognitionData\n     * @extends AbstractRecognitionData\n     * @constructor\n     */\n    function AnalyzerRecognitionData() {\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognitionData.prototype = new scope.AbstractRecognitionData();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognitionData.prototype.constructor = AnalyzerRecognitionData;\n\n    /**\n     * Get analyzer input\n     *\n     * @method getRecognitionInput\n     * @returns {AnalyzerRecognitionInput}\n     */\n    AnalyzerRecognitionData.prototype.getRecognitionInput = function () {\n        return this.analyzerInput;\n    };\n\n    /**\n     * Set analyzer input\n     *\n     * @method setRecognitionInput\n     * @param {AnalyzerRecognitionInput} input\n     */\n    AnalyzerRecognitionData.prototype.setRecognitionInput = function (input) {\n        this.analyzerInput = JSON.stringify(input);\n    };\n\n    // Export\n    scope.AnalyzerRecognitionData = AnalyzerRecognitionData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract result\n     *\n     * @class AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractResult(obj) {\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractResult.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractResult.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractResult = AbstractResult;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class AbstractRecoResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function AbstractRecoResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.instanceId = obj.instanceId;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AbstractRecoResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    AbstractRecoResponseWSMessage.prototype.constructor = AbstractRecoResponseWSMessage;\n\n    /**\n     * Get instance id\n     *\n     * @method getInstanceId\n     * @returns {String}\n     */\n    AbstractRecoResponseWSMessage.prototype.getInstanceId = function () {\n        return this.instanceId;\n    };\n\n    /**\n     * Get document\n     *\n     * @method getDocument\n     * @returns {TextDocument|ShapeDocument|MathDocument|MusicDocument|AnalyzerDocument}\n     */\n    AbstractRecoResponseWSMessage.prototype.getDocument = function () {\n        return this.result;\n    };\n\n    // Export\n    scope.AbstractRecoResponseWSMessage = AbstractRecoResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition hmac challenge message\n     *\n     * @class ChallengeResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ChallengeResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.challenge = obj.challenge;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ChallengeResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ChallengeResponseWSMessage.prototype.constructor = ChallengeResponseWSMessage;\n\n    /**\n     * Get the challenge\n     *\n     * @method getChallenge\n     * @returns {String}\n     */\n    ChallengeResponseWSMessage.prototype.getChallenge = function () {\n        return this.challenge;\n    };\n\n    // Export\n    scope.ChallengeResponseWSMessage = ChallengeResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition error message\n     *\n     * @class ErrorResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ErrorResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n        if (obj) {\n            this.error = obj.error;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ErrorResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ErrorResponseWSMessage.prototype.constructor = ErrorResponseWSMessage;\n\n    /**\n     * Get the error\n     *\n     * @method getError\n     * @returns {String}\n     */\n    ErrorResponseWSMessage.prototype.getError = function () {\n        return this.error;\n    };\n\n    // Export\n    scope.ErrorResponseWSMessage = ErrorResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition init message\n     *\n     * @class InitResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function InitResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    InitResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    InitResponseWSMessage.prototype.constructor = InitResponseWSMessage;\n\n    // Export\n    scope.InitResponseWSMessage = InitResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition reset message\n     *\n     * @class ResetResponseWSMessage\n     * @extends AbstractWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function ResetResponseWSMessage(obj) {\n        scope.AbstractWSMessage.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ResetResponseWSMessage.prototype = new scope.AbstractWSMessage();\n\n    /**\n     * Constructor property\n     */\n    ResetResponseWSMessage.prototype.constructor = ResetResponseWSMessage;\n\n    // Export\n    scope.ResetResponseWSMessage = ResetResponseWSMessage;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text ink ranges\n     *\n     * @class TextInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextInkRange(obj) {\n        if (obj) {\n            if (typeof obj === 'string') {\n                var cpt = obj.split(/[:-]+/);\n                this.startUnit = Number(cpt[0]);\n                this.startComponent = Number(cpt[1]);\n                this.startPoint = Number(cpt[2]);\n                this.endUnit = Number(cpt[3]);\n                this.endComponent = Number(cpt[4]);\n                this.endPoint = Number(cpt[5]);\n            } else {\n                this.startUnit = obj.startUnit;\n                this.startComponent = obj.startComponent;\n                this.startPoint = obj.startPoint;\n                this.endUnit = obj.endUnit;\n                this.endComponent = obj.endComponent;\n                this.endPoint = obj.endPoint;\n            }\n        }\n    }\n\n    /**\n     * Get start unit\n     *\n     * @method getStartUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartUnit = function () {\n        return this.startUnit;\n    };\n\n    /**\n     * Get end unit\n     *\n     * @method getEndUnit\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndUnit = function () {\n        return this.endUnit;\n    };\n\n    /**\n     * Get start component\n     *\n     * @method getStartComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartComponent = function () {\n        return this.startComponent;\n    };\n\n    /**\n     * Get end component\n     *\n     * @method getEndComponent\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndComponent = function () {\n        return this.endComponent;\n    };\n\n    /**\n     * Get start point\n     *\n     * @method getStartPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n\n    /**\n     * Get end point\n     *\n     * @method getEndPoint\n     * @returns {Number}\n     */\n    TextInkRange.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n\n    // Export\n    scope.TextInkRange = TextInkRange;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text candidate\n     *\n     * @class TextCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextCandidate(obj) {\n        this.flags = [];\n        this.children = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedScore = obj.normalizedScore;\n            this.spellingDistortionRatio = obj.spellingDistortionRatio;\n            for (var i in obj.flags) {\n                this.flags.push(obj.flags[i]);\n            }\n            for (var j in obj.children) {\n                this.children.push(new scope.TextSegment(obj.children[j]));\n            }\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    TextCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getNormalizedScore = function () {\n        return this.normalizedScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    /**\n     * Get spelling distortion ratio\n     *\n     * @method getSpellingDistortionRatio\n     * @returns {Number}\n     */\n    TextCandidate.prototype.getSpellingDistortionRatio = function () {\n        return this.spellingDistortionRatio;\n    };\n\n    /**\n     * Get flags\n     *\n     * @method getFlags\n     * @returns {Array}\n     */\n    TextCandidate.prototype.getFlags = function () {\n        return this.flags;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {TextSegment[]}\n     */\n    TextCandidate.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    // Export\n    scope.TextCandidate = TextCandidate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text document\n     *\n     * @class TextDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextDocument(obj) {\n        this.tagItems = [];\n        this.wordCandidates = [];\n        this.charCandidates = [];\n        if (obj) {\n            if (obj.textSegmentResult) {\n                this.textSegmentResult = new scope.TextSegment(obj.textSegmentResult);\n            }\n            for (var i in obj.tagItems) {\n                this.tagItems.push(new scope.TextTagItem(obj.tagItems[i]));\n            }\n            for (var j in obj.wordCandidates) {\n                this.wordCandidates.push(new scope.TextSegment(obj.wordCandidates[j]));\n            }\n            for (var k in obj.charCandidates) {\n                this.charCandidates.push(new scope.TextSegment(obj.charCandidates[k]));\n            }\n        }\n    }\n\n    /**\n     * Get tag items\n     *\n     * @method getTagItems\n     * @returns {TextTagItem[]}\n     */\n    TextDocument.prototype.getTagItems = function () {\n        return this.tagItems;\n    };\n\n    /**\n     * Get word segments\n     *\n     * @method getWordSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getWordSegments = function () {\n        return this.wordCandidates;\n    };\n\n    /**\n     * Get word segment\n     *\n     * @method getWordSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getWordSegment = function (inkRanges) {\n        for (var i = 0; i < this.getWordSegments().length; i++) {\n            if (JSON.stringify(this.getWordSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getWordSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get char segments\n     *\n     * @method getCharSegments\n     * @returns {TextSegment[]}\n     */\n    TextDocument.prototype.getCharSegments = function () {\n        return this.charCandidates;\n    };\n\n    /**\n     * Get char segment\n     *\n     * @method getCharSegment\n     * @param {TextInkRange[]} inkRanges\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getCharSegment = function (inkRanges) {\n        for (var i = 0; i < this.getCharSegments().length; i++) {\n            if (JSON.stringify(this.getCharSegments()[i].getInkRanges()) === JSON.stringify(inkRanges)) {\n                return this.getCharSegments()[i];\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Get text segment\n     *\n     * @method getTextSegment\n     * @returns {TextSegment}\n     */\n    TextDocument.prototype.getTextSegment = function () {\n        return this.textSegmentResult;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    TextDocument.prototype.hasScratchOutResults = function () {\n        return false;\n    };\n\n    // Export\n    scope.TextDocument = TextDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Text result\n     *\n     * @class TextResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    TextResult.prototype.constructor = TextResult;\n\n    // Export\n    scope.TextResult = TextResult;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text segment\n     *\n     * @class TextSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextSegment(obj) {\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidateIdx = obj.selectedCandidateIdx;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges;\n                if (!Array.isArray(ranges)) {\n                    ranges = ranges.split(/[\\s]+/);\n                }\n                for (var j in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[j]));\n                }\n            }\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.TextCandidate(obj.candidates[i]));\n            }\n        }\n    }\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {TextCandidate[]}\n     */\n    TextSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    TextSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIdx;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {TextCandidate}\n     */\n    TextSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextSegment = TextSegment;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text tag item\n     *\n     * @class TextTagItem\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function TextTagItem(obj) {\n        this.inkRanges = [];\n        if (obj) {\n            this.tagType = obj.tagType;\n            if (obj.inkRanges) {\n                var ranges = obj.inkRanges;\n                if (!Array.isArray(ranges)) {\n                    ranges = ranges.split(/[\\s]+/);\n                }\n                for (var i in ranges) {\n                    this.inkRanges.push(new scope.TextInkRange(ranges[i]));\n                }\n            }\n        }\n    }\n\n    /**\n     * Get tag type\n     *\n     * @method getTagType\n     * @returns {String}\n     */\n    TextTagItem.prototype.getTagType = function () {\n        return this.tagType;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {TextInkRange[]}\n     */\n    TextTagItem.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.TextTagItem = TextTagItem;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition text result message\n     *\n     * @class TextResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function TextResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.TextDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    TextResponseWSMessage.prototype.constructor = TextResponseWSMessage;\n\n    // Export\n    scope.TextResponseWSMessage = TextResponseWSMessage;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract shape primitive\n     *\n     * @class AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AbstractShapePrimitive(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.beginDecoration = obj.beginDecoration;\n            this.beginTangentAngle = obj.beginTangentAngle;\n            this.endDecoration = obj.endDecoration;\n            this.endTangentAngle = obj.endTangentAngle;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is line\n     *\n     * @method isLine\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isLine = function () {\n        return this.type === 'line';\n    };\n\n    /**\n     * Is ellipse\n     *\n     * @method isEllipse\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.isEllipse = function () {\n        return this.type === 'ellipse';\n    };\n\n    /**\n     * Has begin decoration\n     *\n     * @method hasBeginDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasBeginDecoration = function () {\n        return typeof this.beginDecoration !== 'undefined';\n    };\n\n    /**\n     * Has end decoration\n     *\n     * @method hasEndDecoration\n     * @returns {Boolean}\n     */\n    AbstractShapePrimitive.prototype.hasEndDecoration = function () {\n        return typeof this.endDecoration !== 'undefined';\n    };\n\n    /**\n     * Get begin decoration\n     *\n     * @method getBeginDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getBeginDecoration = function () {\n        return this.beginDecoration;\n    };\n\n    /**\n     * Get end decoration\n     *\n     * @method getEndDecoration\n     * @returns {String}\n     */\n    AbstractShapePrimitive.prototype.getEndDecoration = function () {\n        return this.endDecoration;\n    };\n\n    /**\n     * Get begin tangent angle\n     *\n     * @method getBeginTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getBeginTangentAngle = function () {\n        return this.beginTangentAngle;\n    };\n\n    /**\n     * Get end tangent angle\n     *\n     * @method getEndTangentAngle\n     * @returns {Number}\n     */\n    AbstractShapePrimitive.prototype.getEndTangentAngle = function () {\n        return this.endTangentAngle;\n    };\n\n    // Export\n    scope.AbstractShapePrimitive = AbstractShapePrimitive;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape candidate\n     *\n     * @class ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeCandidate(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    ShapeCandidate.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is erased\n     *\n     * @method isErased\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isErased = function () {\n        return this.type === 'erased';\n    };\n\n    /**\n     * Is scratch-out\n     *\n     * @method isScratchOut\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isScratchOut = function () {\n        return this.type === 'scratchOut';\n    };\n\n    /**\n     * Is not recognized\n     *\n     * @method isNotRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isNotRecognized = function () {\n        return this.type === 'notRecognized';\n    };\n\n    /**\n     * Is recognized\n     *\n     * @method isRecognized\n     * @returns {Boolean}\n     */\n    ShapeCandidate.prototype.isRecognized = function () {\n        return this.type === 'recognizedShape';\n    };\n\n    // Export\n    scope.ShapeCandidate = ShapeCandidate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape document\n     *\n     * @class ShapeDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeDocument(obj) {\n        this.segments = [];\n        if (obj) {\n            for (var i in obj.segments) {\n                this.segments.push(new scope.ShapeSegment(obj.segments[i]));\n            }\n        }\n    }\n\n    /**\n     * Get segments\n     *\n     * @method getSegments\n     * @returns {ShapeSegment[]}\n     */\n    ShapeDocument.prototype.getSegments = function () {\n        return this.segments;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeDocument.prototype.getInkRanges = function () {\n        var inkRanges = [];\n        for (var i in this.segments) {\n            inkRanges = inkRanges.concat(this.segments[i].getInkRanges());\n        }\n        return inkRanges;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    ShapeDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getSegments()) {\n            var currentSeg = this.getSegments()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.ShapeDocument = ShapeDocument;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Shape ellipse\n     *\n     * @class ShapeEllipse\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeEllipse(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.center = new scope.Point(obj.center);\n            this.minRadius = obj.minRadius;\n            this.maxRadius = obj.maxRadius;\n            this.orientation = obj.orientation;\n            this.startAngle = obj.startAngle;\n            this.sweepAngle = obj.sweepAngle;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeEllipse.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeEllipse.prototype.constructor = ShapeEllipse;\n\n    /**\n     * Get center\n     *\n     * @method getCenter\n     * @returns {Point}\n     */\n    ShapeEllipse.prototype.getCenter = function () {\n        return this.center;\n    };\n\n    /**\n     * Get min radius\n     *\n     * @method getMinRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMinRadius = function () {\n        return this.minRadius;\n    };\n\n    /**\n     * Get max radius\n     *\n     * @method getMaxRadius\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getMaxRadius = function () {\n        return this.maxRadius;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    ShapeEllipse.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get start angle\n     *\n     * @method getStartAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getStartAngle = function () {\n        return this.startAngle;\n    };\n\n    /**\n     * Get sweep angle\n     *\n     * @method getSweepAngle\n     * @returns {Number}\n     */\n    ShapeEllipse.prototype.getSweepAngle = function () {\n        return this.sweepAngle;\n    };\n\n    // Export\n    scope.ShapeEllipse = ShapeEllipse;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape erased\n     *\n     * @class ShapeErased\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeErased(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeErased.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeErased.prototype.constructor = ShapeErased;\n\n    // Export\n    scope.ShapeErased = ShapeErased;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape ink range\n     *\n     * @class ShapeInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeInkRange(obj) {\n        if (obj) {\n            this.firstStroke = obj.firstStroke;\n            this.lastStroke = obj.lastStroke;\n            this.firstPoint = obj.firstPoint;\n            this.lastPoint = obj.lastPoint;\n        }\n    }\n\n    /**\n     * Get first stroke\n     *\n     * @method getFirstStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstStroke = function () {\n        return this.firstStroke;\n    };\n\n    /**\n     * Get last stroke\n     *\n     * @method getLastStroke\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastStroke = function () {\n        return this.lastStroke;\n    };\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Number}\n     */\n    ShapeInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeInkRange = ShapeInkRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape line\n     *\n     * @class ShapeLine\n     * @extends AbstractShapePrimitive\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeLine(obj) {\n        scope.AbstractShapePrimitive.call(this, obj);\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeLine.prototype = new scope.AbstractShapePrimitive();\n\n    /**\n     * Constructor property\n     */\n    ShapeLine.prototype.constructor = ShapeLine;\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    ShapeLine.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    // Export\n    scope.ShapeLine = ShapeLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape not recognized\n     *\n     * @class ShapeNotRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeNotRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeNotRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeNotRecognized.prototype.constructor = ShapeNotRecognized;\n\n    // Export\n    scope.ShapeNotRecognized = ShapeNotRecognized;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape recognized\n     *\n     * @class ShapeRecognized\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeRecognized(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.primitives = [];\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n            this.resemblanceScore = obj.resemblanceScore;\n            for (var i in obj.primitives) {\n                switch (obj.primitives[i].type) {\n                    case 'line':\n                        this.primitives.push(new scope.ShapeLine(obj.primitives[i]));\n                        break;\n                    case 'ellipse':\n                        this.primitives.push(new scope.ShapeEllipse(obj.primitives[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown shape primitive');\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognized.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognized.prototype.constructor = ShapeRecognized;\n\n    /**\n     * Get primitives\n     *\n     * @method getPrimitives\n     * @returns {AbstractShapePrimitive[]}\n     */\n    ShapeRecognized.prototype.getPrimitives = function () {\n        return this.primitives;\n    };\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    ShapeRecognized.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get normalized score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    /**\n     * Get resemblance score\n     *\n     * @method getResemblanceScore\n     * @returns {Number}\n     */\n    ShapeRecognized.prototype.getResemblanceScore = function () {\n        return this.resemblanceScore;\n    };\n\n    // Export\n    scope.ShapeRecognized = ShapeRecognized;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape result\n     *\n     * @class ShapeResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.ShapeDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    ShapeResult.prototype.constructor = ShapeResult;\n\n    // Export\n    scope.ShapeResult = ShapeResult;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Shape scratch-out\n     *\n     * @class ShapeScratchOut\n     * @extends ShapeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeScratchOut(obj) {\n        scope.ShapeCandidate.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeScratchOut.prototype = new scope.ShapeCandidate();\n\n    /**\n     * Constructor property\n     */\n    ShapeScratchOut.prototype.constructor = ShapeScratchOut;\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.ShapeScratchOut = ShapeScratchOut;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Shape segment\n     *\n     * @class ShapeSegment\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function ShapeSegment(obj) {\n        this.inkRanges = [];\n        this.candidates = [];\n        if (obj) {\n            this.elementType = obj.elementType;\n            this.uniqueID = obj.uniqueID;\n            this.selectedCandidateIndex = obj.selectedCandidateIndex;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'erased':\n                        this.candidates.push(new scope.ShapeErased(obj.candidates[i]));\n                        break;\n                    case 'scratchOut':\n                        this.candidates.push(new scope.ShapeScratchOut(obj.candidates[i]));\n                        break;\n                    case 'recognizedShape':\n                        this.candidates.push(new scope.ShapeRecognized(obj.candidates[i]));\n                        break;\n                    default:\n                        this.candidates.push(new scope.ShapeNotRecognized(obj.candidates[i]));\n                        break;\n                }\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.ShapeInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    ShapeSegment.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {ShapeInkRange[]}\n     */\n    ShapeSegment.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    ShapeSegment.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidateIndex;\n    };\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {ShapeCandidate[]}\n     */\n    ShapeSegment.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {ShapeCandidate}\n     */\n    ShapeSegment.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.ShapeSegment = ShapeSegment;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math node\n     *\n     * @class MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNode(obj) {\n        if (obj) {\n            this.name = obj.name;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathNode.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathNode = MathNode;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math non-terminal node\n     *\n     * @class MathNonTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathNonTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                switch (obj.candidates[i].type) {\n                    case 'nonTerminalNode':\n                        this.candidates.push(new scope.MathNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'terminalNode':\n                        this.candidates.push(new scope.MathTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'rule':\n                        this.candidates.push(new scope.MathRuleNode(obj.candidates[i]));\n                        break;\n                    case 'cell':\n                        this.candidates.push(new scope.MathCellNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'border':\n                        this.candidates.push(new scope.MathBorderNonTerminalNode(obj.candidates[i]));\n                        break;\n                    case 'table':\n                        this.candidates.push(new scope.MathTableRuleNode(obj.candidates[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.candidates[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathNonTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathNonTerminalNode.prototype.constructor = MathNonTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathNode[]}\n     */\n    MathNonTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathNode}\n     */\n    MathNonTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathNonTerminalNode.prototype.getInkRanges = function () {\n        if (this.getSelectedCandidate()) {\n            return this.getSelectedCandidate().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    // Export\n    scope.MathNonTerminalNode = MathNonTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract math result\n     *\n     * @class MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is LaTeX result\n     *\n     * @method isLatex\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isLaTex = function () {\n        return this.type === 'LATEX';\n    };\n\n    /**\n     * Is MathML result\n     *\n     * @method isMathMl\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isMathMl = function () {\n        return this.type === 'MATHML';\n    };\n\n    /**\n     * Is SymbolTree result\n     *\n     * @method isSymbolTree\n     * @returns {Boolean}\n     */\n    MathResultElement.prototype.isSymbolTree = function () {\n        return this.type === 'SYMBOLTREE';\n    };\n\n    // Export\n    scope.MathResultElement = MathResultElement;\n})(MyScript);","(function (scope) {\n    'use strict';\n    /**\n     * Math rule node\n     *\n     * @class MathRuleNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathRuleNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.children = [];\n        if (obj) {\n            this.name = obj.name;\n            for (var i in obj.children) {\n                switch (obj.children[i].type) {\n                    case 'nonTerminalNode':\n                        this.children.push(new scope.MathNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'terminalNode':\n                        this.children.push(new scope.MathTerminalNode(obj.children[i]));\n                        break;\n                    case 'rule':\n                        this.children.push(new scope.MathRuleNode(obj.children[i]));\n                        break;\n                    case 'cell':\n                        this.children.push(new scope.MathCellNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'border':\n                        this.children.push(new scope.MathBorderNonTerminalNode(obj.children[i]));\n                        break;\n                    case 'table':\n                        this.children.push(new scope.MathTableRuleNode(obj.children[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.children[i].type);\n                }\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRuleNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathRuleNode.prototype.constructor = MathRuleNode;\n\n    /**\n     * Get name\n     *\n     * @method getName\n     * @returns {String}\n     */\n    MathRuleNode.prototype.getName = function () {\n        return this.name;\n    };\n\n    /**\n     * Get children\n     *\n     * @method getChildren\n     * @returns {MathNode[]}\n     */\n    MathRuleNode.prototype.getChildren = function () {\n        return this.children;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathRuleNode.prototype.getInkRanges = function () {\n        var inkRanges = [];\n        for (var i in this.getChildren()) {\n            var childInkRanges = this.getChildren()[i].getInkRanges();\n            for (var j in childInkRanges) {\n                inkRanges.push(childInkRanges[j]);\n            }\n        }\n        return inkRanges;\n    };\n\n    // Export\n    scope.MathRuleNode = MathRuleNode;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math document\n     *\n     * @class MathDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                var result = obj.results[i];\n                switch (result.type) {\n                    case 'MATHML':\n                        this.results.push(new scope.MathMathMLResultElement(result));\n                        break;\n                    case 'LATEX':\n                        this.results.push(new scope.MathLaTexResultElement(result));\n                        break;\n                    case 'SYMBOLTREE':\n                        this.results.push(new scope.MathSymbolTreeResultElement(result));\n                        break;\n                    case 'OFFICEOPENXMLMATH':\n                        this.results.push(new scope.MathOfficeOpenXmlMathResultElement(result));\n                        break;\n                    default:\n                        throw new Error('Unknown math result type: ' + result.type);\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MathScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MathResultElement[]}\n     */\n    MathDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MathScratchOut[]}\n     */\n    MathDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MathDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MathDocument = MathDocument;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math ink range\n     *\n     * @class MathInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathInkRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MathInkRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MathInkRange = MathInkRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * MathOfficeOpenXmlMathResultElement result element\n     *\n     * @class MathOfficeOpenXmlMathResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathOfficeOpenXmlMathResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n\n    /**\n     * Inheritance property\n     */\n    MathOfficeOpenXmlMathResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathOfficeOpenXmlMathResultElement.prototype.constructor = MathOfficeOpenXmlMathResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathOfficeOpenXmlMathResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathOfficeOpenXmlMathResultElement = MathOfficeOpenXmlMathResultElement;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * LaTex result element\n     *\n     * @class MathLaTexResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathLaTexResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathLaTexResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathLaTexResultElement.prototype.constructor = MathLaTexResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathLaTexResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathLaTexResultElement = MathLaTexResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * MathML result element\n     *\n     * @class MathMathMLResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathMathMLResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathMathMLResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathMathMLResultElement.prototype.constructor = MathMathMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MathMathMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathMathMLResultElement = MathMathMLResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math result\n     *\n     * @class MathResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MathResult.prototype.constructor = MathResult;\n\n    // Export\n    scope.MathResult = MathResult;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math scratch-out\n     *\n     * @class MathScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathScratchOut(obj) {\n        this.inkRanges = [];\n        this.erasedInkRanges = [];\n        if (obj) {\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.erasedInkRanges) {\n                this.erasedInkRanges.push(new scope.MathInkRange(obj.erasedInkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get erased ink ranges\n     *\n     * @method getErasedInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathScratchOut.prototype.getErasedInkRanges = function () {\n        return this.erasedInkRanges;\n    };\n\n    // Export\n    scope.MathScratchOut = MathScratchOut;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math symbol tree\n     *\n     * @class MathSymbolTreeResultElement\n     * @extends MathResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathSymbolTreeResultElement(obj) {\n        scope.MathResultElement.call(this, obj);\n        if (obj) {\n            if (obj.root) {\n                switch (obj.root.type) {\n                    case 'nonTerminalNode':\n                        this.root = new scope.MathNonTerminalNode(obj.root);\n                        break;\n                    case 'terminalNode':\n                        this.root = new scope.MathTerminalNode(obj.root);\n                        break;\n                    case 'rule':\n                        this.root = new scope.MathRuleNode(obj.root);\n                        break;\n                    case 'cell':\n                        this.root = new scope.MathCellNonTerminalNode(obj.root);\n                        break;\n                    case 'border':\n                        this.root = new scope.MathBorderNonTerminalNode(obj.root);\n                        break;\n                    case 'table':\n                        this.root = new scope.MathTableRuleNode(obj.root);\n                        break;\n                    default:\n                        throw new Error('Unknown math node type: ' + obj.root.type);\n                }\n                this.value = JSON.stringify(obj.root, null, '  ');\n            } else {\n                throw new Error('Missing root');\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathSymbolTreeResultElement.prototype = new scope.MathResultElement();\n\n    /**\n     * Constructor property\n     */\n    MathSymbolTreeResultElement.prototype.constructor = MathSymbolTreeResultElement;\n\n    /**\n     * Get tree root\n     *\n     * @method getRoot\n     * @returns {MathNode}\n     */\n    MathSymbolTreeResultElement.prototype.getRoot = function () {\n        return this.root;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathSymbolTreeResultElement.prototype.getInkRanges = function () {\n        if (this.getRoot()) {\n            return this.getRoot().getInkRanges();\n        } else {\n            throw new Error('No selected candidate');\n        }\n    };\n\n    /**\n    * Get value\n    *\n    * @method getValue\n    * @returns {String}\n    */\n    MathSymbolTreeResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MathSymbolTreeResultElement = MathSymbolTreeResultElement;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math terminal node\n     *\n     * @class MathTerminalNode\n     * @extends MathNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNode(obj) {\n        scope.MathNode.call(this, obj);\n        this.candidates = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.selectedCandidate = obj.selectedCandidate;\n            for (var i in obj.candidates) {\n                this.candidates.push(new scope.MathTerminalNodeCandidate(obj.candidates[i]));\n            }\n            for (var j in obj.inkRanges) {\n                this.inkRanges.push(new scope.MathInkRange(obj.inkRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTerminalNode.prototype = new scope.MathNode();\n\n    /**\n     * Constructor property\n     */\n    MathTerminalNode.prototype.constructor = MathTerminalNode;\n\n    /**\n     * Get candidates\n     *\n     * @method getCandidates\n     * @returns {MathTerminalNodeCandidate[]}\n     */\n    MathTerminalNode.prototype.getCandidates = function () {\n        return this.candidates;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {MathInkRange[]}\n     */\n    MathTerminalNode.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get selected candidate index\n     *\n     * @method getSelectedCandidateIdx\n     * @returns {Number}\n     */\n    MathTerminalNode.prototype.getSelectedCandidateIdx = function () {\n        return this.selectedCandidate;\n    };\n\n    /**\n     * Get selected candidate\n     *\n     * @method getSelectedCandidate\n     * @returns {MathTerminalNodeCandidate}\n     */\n    MathTerminalNode.prototype.getSelectedCandidate = function () {\n        if ((this.getCandidates().length > 0) && (this.getSelectedCandidateIdx() !== undefined)) {\n            return this.getCandidates()[this.getSelectedCandidateIdx()];\n        } else {\n            return undefined;\n        }\n    };\n\n    // Export\n    scope.MathTerminalNode = MathTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math terminal node candidate\n     *\n     * @class MathTerminalNodeCandidate\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTerminalNodeCandidate(obj) {\n        if (obj) {\n            this.label = obj.label;\n            this.normalizedRecognitionScore = obj.normalizedRecognitionScore;\n        }\n    }\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MathTerminalNodeCandidate.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    /**\n     * Get score\n     *\n     * @method getNormalizedRecognitionScore\n     * @returns {Number}\n     */\n    MathTerminalNodeCandidate.prototype.getNormalizedRecognitionScore = function () {\n        return this.normalizedRecognitionScore;\n    };\n\n    // Export\n    scope.MathTerminalNodeCandidate = MathTerminalNodeCandidate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Math border data\n     *\n     * @class MathBorderData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderData(obj) {\n        if (obj) {\n            this.position = obj.position;\n            this.start = obj.start;\n            this.stop = obj.stop;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get position\n     *\n     * @method getPosition\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getPosition = function () {\n        return this.position;\n    };\n\n    /**\n     * Get start\n     *\n     * @method getStart\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStart = function () {\n        return this.start;\n    };\n\n    /**\n     * Get stop\n     *\n     * @method getStop\n     * @returns {Number}\n     */\n    MathBorderData.prototype.getStop = function () {\n        return this.stop;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MathBorderData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MathBorderData = MathBorderData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math border non-terminal node\n     *\n     * @class MathBorderNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathBorderNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathBorderData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathBorderNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathBorderNonTerminalNode.prototype.constructor = MathBorderNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathBorderData}\n     */\n    MathBorderNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathBorderNonTerminalNode = MathBorderNonTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math cell data\n     *\n     * @class MathCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellData(obj) {\n        if (obj) {\n            this.columnStart = obj.columnStart;\n            this.columnStop = obj.columnStop;\n            this.rowStart = obj.rowStart;\n            this.rowStop = obj.rowStop;\n        }\n    }\n\n    /**\n     * Get column start\n     *\n     * @method getColumnStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStart = function () {\n        return this.columnStart;\n    };\n\n    /**\n     * Get column stop\n     *\n     * @method getColumnStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getColumnStop = function () {\n        return this.columnStop;\n    };\n\n    /**\n     * Get row start\n     *\n     * @method getRowStart\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStart = function () {\n        return this.rowStart;\n    };\n\n    /**\n     * Get row stop\n     *\n     * @method getRowStop\n     * @returns {Number}\n     */\n    MathCellData.prototype.getRowStop = function () {\n        return this.rowStop;\n    };\n\n    // Export\n    scope.MathCellData = MathCellData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math cell non-terminal node\n     *\n     * @class MathCellNonTerminalNode\n     * @extends MathNonTerminalNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathCellNonTerminalNode(obj) {\n        scope.MathNonTerminalNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathCellNonTerminalNode.prototype = new scope.MathNonTerminalNode();\n\n    /**\n     * Constructor property\n     */\n    MathCellNonTerminalNode.prototype.constructor = MathCellNonTerminalNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathCellData}\n     */\n    MathCellNonTerminalNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathCellNonTerminalNode = MathCellNonTerminalNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math table data\n     *\n     * @class MathTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    MathTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.MathTableData = MathTableData;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math table rule node\n     *\n     * @class MathTableRuleNode\n     * @extends MathRuleNode\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MathTableRuleNode(obj) {\n        scope.MathRuleNode.call(this, obj);\n        if (obj) {\n            this.data = new scope.MathTableData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathTableRuleNode.prototype = new scope.MathRuleNode();\n\n    /**\n     * Constructor property\n     */\n    MathTableRuleNode.prototype.constructor = MathTableRuleNode;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {MathTableData}\n     */\n    MathTableRuleNode.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.MathTableRuleNode = MathTableRuleNode;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * WebSocket recognition math result message\n     *\n     * @class MathResponseWSMessage\n     * @extends AbstractRecoResponseWSMessage\n     * @param {Object} [obj] Recognition WebSocket message\n     * @constructor\n     */\n    function MathResponseWSMessage(obj) {\n        scope.AbstractRecoResponseWSMessage.call(this, obj);\n        if (obj) {\n            this.result = new scope.MathDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathResponseWSMessage.prototype = new scope.AbstractRecoResponseWSMessage();\n\n    /**\n     * Constructor property\n     */\n    MathResponseWSMessage.prototype.constructor = MathResponseWSMessage;\n\n    // Export\n    scope.MathResponseWSMessage = MathResponseWSMessage;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract music element\n     *\n     * @class MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicElement(obj) {\n        if (obj) {\n            this.inputRanges = [];\n            this.elementType = obj.elementType;\n            this.inputRanges = obj.inputRanges;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    MusicElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicElement.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    // Export\n    scope.MusicElement = MusicElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Abstract music result element\n     *\n     * @class MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResultElement(obj) {\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicResultElement.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Is MusicXML\n     *\n     * @method isMusicXML\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isMusicXML = function () {\n        return this.type === 'MUSICXML';\n    };\n\n    /**\n     * Is ScoreTree\n     *\n     * @method isScoreTree\n     * @returns {Boolean}\n     */\n    MusicResultElement.prototype.isScoreTree = function () {\n        return this.type === 'SCORETREE';\n    };\n\n    // Export\n    scope.MusicResultElement = MusicResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music accidental\n     *\n     * @class MusicAccidental\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAccidental(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAccidental.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAccidental.prototype.constructor = MusicAccidental;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicAccidental.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicAccidental = MusicAccidental;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music annotation\n     *\n     * @class MusicAnnotation\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicAnnotation(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.label = obj.label;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicAnnotation.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicAnnotation.prototype.constructor = MusicAnnotation;\n\n    /**\n     * Get label\n     *\n     * @method getLabel\n     * @returns {String}\n     */\n    MusicAnnotation.prototype.getLabel = function () {\n        return this.label;\n    };\n\n    // Export\n    scope.MusicAnnotation = MusicAnnotation;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music arpeggiate\n     *\n     * @class MusicArpeggiate\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicArpeggiate(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicArpeggiate.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicArpeggiate.prototype.constructor = MusicArpeggiate;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicArpeggiate.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicArpeggiate = MusicArpeggiate;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music bar\n     *\n     * @class MusicBar\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBar(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        if (obj) {\n            this.repeatDirection = obj.repeatDirection;\n            this.style = obj.style;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBar.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBar.prototype.constructor = MusicBar;\n\n    /**\n     * Get repeat direction\n     *\n     * @method getRepeatDirection\n     * @returns {String}\n     */\n    MusicBar.prototype.getRepeatDirection = function () {\n        return this.repeatDirection;\n    };\n\n    /**\n     * Set repeat direction\n     *\n     * @method setRepeatDirection\n     * @param {String} repeatDirection\n     */\n    MusicBar.prototype.setRepeatDirection = function (repeatDirection) {\n        this.repeatDirection = repeatDirection;\n    };\n\n    /**\n     * Get style\n     *\n     * @method getStyle\n     * @returns {String}\n     */\n    MusicBar.prototype.getStyle = function () {\n        return this.style;\n    };\n\n    /**\n     * Set style\n     *\n     * @method setStyle\n     * @param {String} style\n     */\n    MusicBar.prototype.setStyle = function (style) {\n        this.style = style;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicBar.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Set decorations\n     *\n     * @method setDecorations\n     * @param {MusicDecoration[]}\n     */\n    MusicBar.prototype.setDecorations = function (decorations) {\n        this.decorations = decorations;\n    };\n\n    // Export\n    scope.MusicBar = MusicBar;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music beam\n     *\n     * @class MusicBeam\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicBeam(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.gap = obj.gap;\n            this.slope = obj.slope;\n            this.placement = obj.placement;\n            this.leftCount = obj.leftCount;\n            this.rightCount = obj.rightCount;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicBeam.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicBeam.prototype.constructor = MusicBeam;\n\n    /**\n     * Get gap\n     *\n     * @method getGap\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getGap = function () {\n        return this.gap;\n    };\n\n    /**\n     * Set gap\n     *\n     * @method setGap\n     * @param {Number} gap\n     */\n    MusicBeam.prototype.setGap = function (gap) {\n        this.gap = gap;\n    };\n\n    /**\n     * Get slope\n     *\n     * @method getSlope\n     * @returns {String}\n     */\n    MusicBeam.prototype.getSlope = function () {\n        return this.slope;\n    };\n\n    /**\n     * Set slope\n     *\n     * @method setSlope\n     * @param {String} slope\n     */\n    MusicBeam.prototype.setSlope = function (slope) {\n        this.slope = slope;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicBeam.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicBeam.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    /**\n     * Get left count\n     *\n     * @method getLeftCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getLeftCount = function () {\n        return this.leftCount;\n    };\n\n    /**\n     * Set left count\n     *\n     * @method setLeftCount\n     * @param {Number} leftCount\n     */\n    MusicBeam.prototype.setLeftCount = function (leftCount) {\n        this.leftCount = leftCount;\n    };\n\n    /**\n     * Get right count\n     *\n     * @method getRightCount\n     * @returns {Number}\n     */\n    MusicBeam.prototype.getRightCount = function () {\n        return this.rightCount;\n    };\n\n    /**\n     * Set right count\n     *\n     * @method setRightCount\n     * @param {Number} rightCount\n     */\n    MusicBeam.prototype.setRightCount = function (rightCount) {\n        this.rightCount = rightCount;\n    };\n\n\n    // Export\n    scope.MusicBeam = MusicBeam;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music chord\n     *\n     * @class MusicChord\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicChord(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.notes = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.duration = obj.duration;\n            this.arpeggiate = new scope.MusicArpeggiate(obj.arpeggiate);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.notes) {\n                this.notes.push(new scope.MusicNote(obj.notes[j]));\n            }\n            for (var k in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[k]);\n            }\n            for (var l in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[l]));\n            }\n            for (var m in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[m]));\n            }\n            for (var n in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[n]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicChord.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicChord.prototype.constructor = MusicChord;\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicChord.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get arpeggiate\n     *\n     * @method getArpeggiate\n     * @returns {MusicArpeggiate}\n     */\n    MusicChord.prototype.getArpeggiate = function () {\n        return this.arpeggiate;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicChord.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicChord.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicChord.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get notes\n     *\n     * @method getNotes\n     * @returns {MusicNote[]}\n     */\n    MusicChord.prototype.getNotes = function () {\n        return this.notes;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicChord.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicChord.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicChord.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicChord = MusicChord;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music clef\n     * default values: symbol='G', octave=0\n     *\n     * @class MusicClef\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicClef(obj) {\n        scope.MusicElement.call(this, obj);\n        this.symbol = 'G';\n        this.octave = 0;\n        if (obj) {\n            this.line = obj.line;\n            this.yAnchor = obj.yAnchor;\n            this.octave = obj.octave;\n            this.symbol = obj.symbol;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicClef.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicClef.prototype.constructor = MusicClef;\n\n    /**\n     * Get y anchor\n     *\n     * @method getYAnchor\n     * @returns {Number}\n     */\n    MusicClef.prototype.getYAnchor = function () {\n        return this.yAnchor;\n    };\n\n    /**\n     * Set y anchor\n     *\n     * @method setYAnchor\n     * @param {Number} yAnchor\n     */\n    MusicClef.prototype.setYAnchor = function (yAnchor) {\n        this.yAnchor = yAnchor;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicClef.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Set line\n     *\n     * @method setLine\n     * @param {Number} line\n     */\n    MusicClef.prototype.setLine = function (line) {\n        this.line = line;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicClef.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Set octave\n     *\n     * @method setOctave\n     * @param {Number} octave\n     */\n    MusicClef.prototype.setOctave = function (octave) {\n        this.octave = octave;\n    };\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicClef.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicClef.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    // Export\n    scope.MusicClef = MusicClef;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music decoration\n     *\n     * @class MusicDecoration\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDecoration(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.symbol = obj.symbol;\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDecoration.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDecoration.prototype.constructor = MusicDecoration;\n\n    /**\n     * Get symbol\n     *\n     * @method getSymbol\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getSymbol = function () {\n        return this.symbol;\n    };\n\n    /**\n     * Set symbol\n     *\n     * @method setSymbol\n     * @param {String} symbol\n     */\n    MusicDecoration.prototype.setSymbol = function (symbol) {\n        this.symbol = symbol;\n    };\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicDecoration.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Set placement\n     *\n     * @method setPlacement\n     * @param {String} placement\n     */\n    MusicDecoration.prototype.setPlacement = function (placement) {\n        this.placement = placement;\n    };\n\n    // Export\n    scope.MusicDecoration = MusicDecoration;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music document\n     *\n     * @class MusicDocument\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDocument(obj) {\n        this.results = [];\n        this.scratchOutResults = [];\n        if (obj) {\n            for (var i in obj.results) {\n                switch (obj.results[i].type) {\n                    case 'MUSICXML':\n                        this.results.push(new scope.MusicXMLResultElement(obj.results[i]));\n                        break;\n                    default:\n                        this.results.push(new scope.MusicScoreTreeResultElement(obj.results[i]));\n                        break;\n                }\n            }\n            for (var j in obj.scratchOutResults) {\n                this.scratchOutResults.push(new scope.MusicScratchOut(obj.scratchOutResults[j]));\n            }\n        }\n    }\n\n    /**\n     * Get result elements\n     *\n     * @method getResultElements\n     * @returns {MusicResultElement[]}\n     */\n    MusicDocument.prototype.getResultElements = function () {\n        return this.results;\n    };\n\n    /**\n     * Get scratch-out results\n     *\n     * @method getScratchOutResults\n     * @returns {MusicScratchOut[]}\n     */\n    MusicDocument.prototype.getScratchOutResults = function () {\n        return this.scratchOutResults;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    MusicDocument.prototype.hasScratchOutResults = function () {\n        if (this.getScratchOutResults() && (this.getScratchOutResults().length > 0)) {\n            return true;\n        }\n        return false;\n    };\n\n    // Export\n    scope.MusicDocument = MusicDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music dots\n     *\n     * @class MusicDots\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicDots(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.count = obj.count;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicDots.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicDots.prototype.constructor = MusicDots;\n\n    /**\n     * Get dots counts\n     *\n     * @method getCount\n     * @returns {Number}\n     */\n    MusicDots.prototype.getCount = function () {\n        return this.count;\n    };\n\n    // Export\n    scope.MusicDots = MusicDots;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music head\n     *\n     * @class MusicHead\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicHead(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicHead.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicHead.prototype.constructor = MusicHead;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicHead.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicHead = MusicHead;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music input range\n     *\n     * @class MusicInputRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicInputRange(obj) {\n        if (obj) {\n            this.component = obj.component;\n            this.firstItem = obj.firstItem;\n            this.lastItem = obj.lastItem;\n        }\n    }\n\n    /**\n     * Get component\n     *\n     * @method getComponent\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getComponent = function () {\n        return this.component;\n    };\n\n    /**\n     * Get first item\n     *\n     * @method getFirstItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getFirstItem = function () {\n        return this.firstItem;\n    };\n\n    /**\n     * Get last item\n     *\n     * @method getLastItem\n     * @returns {Number}\n     */\n    MusicInputRange.prototype.getLastItem = function () {\n        return this.lastItem;\n    };\n\n    // Export\n    scope.MusicInputRange = MusicInputRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music key signature\n     *\n     * @class MusicKeySignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignature(obj) {\n        scope.MusicElement.call(this, obj);\n        this.accidentals = [];\n        if (obj) {\n            this.signature = new scope.MusicKeySignatureData(obj.signature);\n            for (var i in obj.accidentals) {\n                this.accidentals.push(new scope.MusicAccidental(obj.accidentals[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicKeySignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicKeySignature.prototype.constructor = MusicKeySignature;\n\n    /**\n     * Get signature\n     *\n     * @method getSignature\n     * @returns {MusicKeySignatureData}\n     */\n    MusicKeySignature.prototype.getSignature = function () {\n        return this.signature;\n    };\n\n    /**\n     * Get accidentals\n     *\n     * @method getAccidentals\n     * @returns {MusicAccidental[]}\n     */\n    MusicKeySignature.prototype.getAccidentals = function () {\n        return this.accidentals;\n    };\n\n    // Export\n    scope.MusicKeySignature = MusicKeySignature;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music key signature data\n     *\n     * @class MusicKeySignatureData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicKeySignatureData(obj) {\n        if (obj) {\n            this.fifths = obj.fifths;\n            this.cancel = obj.cancel;\n        }\n    }\n\n    /**\n     * Get fifths\n     *\n     * @method getFifths\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getFifths = function () {\n        return this.fifths;\n    };\n\n    /**\n     * Get cancel\n     *\n     * @method getCancel\n     * @returns {Number}\n     */\n    MusicKeySignatureData.prototype.getCancel = function () {\n        return this.cancel;\n    };\n\n    // Export\n    scope.MusicKeySignatureData = MusicKeySignatureData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music ledger line\n     *\n     * @class MusicLedgerLine\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicLedgerLine(obj) {\n        scope.MusicElement.call(this, obj);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicLedgerLine.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicLedgerLine.prototype.constructor = MusicLedgerLine;\n\n    // Export\n    scope.MusicLedgerLine = MusicLedgerLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music note\n     *\n     * @class MusicNote\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicNote(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.beamTypes = [];\n        this.ledgerLines = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.accidental = new scope.MusicAccidental(obj.accidental);\n            this.dots = new scope.MusicDots(obj.dots);\n            this.duration = obj.duration;\n            this.head = new scope.MusicHead(obj.head);\n            this.line = obj.line;\n            this.pitch = new scope.MusicPitchData(obj.pitch);\n            this.startBeam = new scope.MusicBeam(obj.startBeam);\n            this.stopBeam = new scope.MusicBeam(obj.stopBeam);\n            this.stem = new scope.MusicStem(obj.stem);\n            this.startTie = new scope.MusicTie(obj.startTie);\n            this.stopTie = new scope.MusicTie(obj.stopTie);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.type = obj.type;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var j in obj.beamTypes) {\n                this.beamTypes.push(obj.beamTypes[j]);\n            }\n            for (var k in obj.ledgerLines) {\n                this.ledgerLines.push(new scope.MusicLedgerLine(obj.ledgerLines[k]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicNote.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicNote.prototype.constructor = MusicNote;\n\n    /**\n     * Get accidental\n     *\n     * @method getAccidental\n     * @returns {MusicAccidental}\n     */\n    MusicNote.prototype.getAccidental = function () {\n        return this.accidental;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicNote.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicNote.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get head\n     *\n     * @method getHead\n     * @returns {MusicHead}\n     */\n    MusicNote.prototype.getHead = function () {\n        return this.head;\n    };\n\n    /**\n     * Get line\n     *\n     * @method getLine\n     * @returns {Number}\n     */\n    MusicNote.prototype.getLine = function () {\n        return this.line;\n    };\n\n    /**\n     * Get pitch\n     *\n     * @method getPitch\n     * @returns {MusicPitchData}\n     */\n    MusicNote.prototype.getPitch = function () {\n        return this.pitch;\n    };\n\n    /**\n     * Get start beam\n     *\n     * @method getStartBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStartBeam = function () {\n        return this.startBeam;\n    };\n\n    /**\n     * Get stop beam\n     *\n     * @method getStopBeam\n     * @returns {MusicBeam}\n     */\n    MusicNote.prototype.getStopBeam = function () {\n        return this.stopBeam;\n    };\n\n    /**\n     * Get stem\n     *\n     * @method getStem\n     * @returns {MusicStem}\n     */\n    MusicNote.prototype.getStem = function () {\n        return this.stem;\n    };\n\n    /**\n     * Get start tie\n     *\n     * @method getStartTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStartTie = function () {\n        return this.startTie;\n    };\n\n    /**\n     * Get stop tie\n     *\n     * @method getStopTie\n     * @returns {MusicTie}\n     */\n    MusicNote.prototype.getStopTie = function () {\n        return this.stopTie;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicNote.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicNote.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicNote.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicNote.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get beam types\n     *\n     * @method getBeamTypes\n     * @returns {Array}\n     */\n    MusicNote.prototype.getBeamTypes = function () {\n        return this.beamTypes;\n    };\n\n    /**\n     * Get ledger lines\n     *\n     * @method getLedgerLines\n     * @returns {MusicLedgerLine[]}\n     */\n    MusicNote.prototype.getLedgerLines = function () {\n        return this.ledgerLines;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicNote.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicNote = MusicNote;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music part\n     *\n     * @class MusicPart\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPart(obj) {\n        this.elements = [];\n        if (obj) {\n            for (var i in obj.elements) {\n                switch (obj.elements[i].elementType) {\n                    case 'accidental':\n                        this.elements.push(new scope.MusicAccidental(obj.elements[i]));\n                        break;\n                    case 'annotation':\n                        this.elements.push(new scope.MusicAnnotation(obj.elements[i]));\n                        break;\n                    case 'arpeggiate':\n                        this.elements.push(new scope.MusicArpeggiate(obj.elements[i]));\n                        break;\n                    case 'bar':\n                        this.elements.push(new scope.MusicBar(obj.elements[i]));\n                        break;\n                    case 'beam':\n                        this.elements.push(new scope.MusicBeam(obj.elements[i]));\n                        break;\n                    case 'chord':\n                        this.elements.push(new scope.MusicChord(obj.elements[i]));\n                        break;\n                    case 'clef':\n                        this.elements.push(new scope.MusicClef(obj.elements[i]));\n                        break;\n                    case 'decoration':\n                        this.elements.push(new scope.MusicDecoration(obj.elements[i]));\n                        break;\n                    case 'dots':\n                        this.elements.push(new scope.MusicDots(obj.elements[i]));\n                        break;\n                    case 'head':\n                        this.elements.push(new scope.MusicHead(obj.elements[i]));\n                        break;\n                    case 'keySignature':\n                        this.elements.push(new scope.MusicKeySignature(obj.elements[i]));\n                        break;\n                    case 'ledgerLine':\n                        this.elements.push(new scope.MusicLedgerLine(obj.elements[i]));\n                        break;\n                    case 'note':\n                        this.elements.push(new scope.MusicNote(obj.elements[i]));\n                        break;\n                    case 'rest':\n                        this.elements.push(new scope.MusicRest(obj.elements[i]));\n                        break;\n                    case 'slur':\n                        this.elements.push(new scope.MusicSlur(obj.elements[i]));\n                        break;\n                    case 'stem':\n                        this.elements.push(new scope.MusicStem(obj.elements[i]));\n                        break;\n                    case 'tie':\n                        this.elements.push(new scope.MusicTie(obj.elements[i]));\n                        break;\n                    case 'timeSignature':\n                        this.elements.push(new scope.MusicTimeSignature(obj.elements[i]));\n                        break;\n                    case 'tuplet':\n                        this.elements.push(new scope.MusicTuplet(obj.elements[i]));\n                        break;\n                    case 'tupletBracket':\n                        this.elements.push(new scope.MusicTupletBracket(obj.elements[i]));\n                        break;\n                    default:\n                        throw new Error('Unknown music element');\n                }\n            }\n        }\n    }\n\n    /**\n     * Get elements\n     *\n     * @method getElements\n     * @returns {MusicElement[]}\n     */\n    MusicPart.prototype.getElements = function () {\n        return this.elements;\n    };\n\n    // Export\n    scope.MusicPart = MusicPart;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music pitch data\n     *\n     * @class MusicPitchData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicPitchData(obj) {\n        if (obj) {\n            this.alteration = obj.alteration;\n            this.octave = obj.octave;\n            this.step = obj.step;\n        }\n    }\n\n    /**\n     * Get alteration\n     *\n     * @method getAlteration\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getAlteration = function () {\n        return this.alteration;\n    };\n\n    /**\n     * Get octave\n     *\n     * @method getOctave\n     * @returns {Number}\n     */\n    MusicPitchData.prototype.getOctave = function () {\n        return this.octave;\n    };\n\n    /**\n     * Get step\n     *\n     * @method getStep\n     * @returns {String}\n     */\n    MusicPitchData.prototype.getStep = function () {\n        return this.step;\n    };\n\n    // Export\n    scope.MusicPitchData = MusicPitchData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music rest\n     *\n     * @class MusicRest\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicRest(obj) {\n        scope.MusicElement.call(this, obj);\n        this.decorations = [];\n        this.startSlurs = [];\n        this.stopSlurs = [];\n        if (obj) {\n            this.type = obj.type;\n            this.dots = new scope.MusicDots(obj.dots);\n            this.startTuplet = new scope.MusicTuplet(obj.startTuplet);\n            this.stopTuplet = new scope.MusicTuplet(obj.stopTuplet);\n            this.timeModification = new scope.MusicTimeModificationData(obj.timeModification);\n            this.duration = obj.duration;\n            for (var i in obj.decorations) {\n                this.decorations.push(new scope.MusicDecoration(obj.decorations[i]));\n            }\n            for (var l in obj.startSlurs) {\n                this.startSlurs.push(new scope.MusicSlur(obj.startSlurs[l]));\n            }\n            for (var m in obj.stopSlurs) {\n                this.stopSlurs.push(new scope.MusicSlur(obj.stopSlurs[m]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRest.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicRest.prototype.constructor = MusicRest;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicRest.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {MusicDots}\n     */\n    MusicRest.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get start tuplet\n     *\n     * @method getStartTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStartTuplet = function () {\n        return this.startTuplet;\n    };\n\n    /**\n     * Get stop tuplet\n     *\n     * @method getStopTuplet\n     * @returns {MusicTuplet}\n     */\n    MusicRest.prototype.getStopTuplet = function () {\n        return this.stopTuplet;\n    };\n\n    /**\n     * Get time modification\n     *\n     * @method getTimeModification\n     * @returns {MusicTimeModificationData}\n     */\n    MusicRest.prototype.getTimeModification = function () {\n        return this.timeModification;\n    };\n\n    /**\n     * Get duration\n     *\n     * @method getDuration\n     * @returns {Number}\n     */\n    MusicRest.prototype.getDuration = function () {\n        return this.duration;\n    };\n\n    /**\n     * Get decorations\n     *\n     * @method getDecorations\n     * @returns {MusicDecoration[]}\n     */\n    MusicRest.prototype.getDecorations = function () {\n        return this.decorations;\n    };\n\n    /**\n     * Get start slurs\n     *\n     * @method getStartSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStartSlurs = function () {\n        return this.startSlurs;\n    };\n\n    /**\n     * Get stop slurs\n     *\n     * @method getStopSlurs\n     * @returns {MusicSlur[]}\n     */\n    MusicRest.prototype.getStopSlurs = function () {\n        return this.stopSlurs;\n    };\n\n    // Export\n    scope.MusicRest = MusicRest;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music result\n     *\n     * @class MusicResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.MusicDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    MusicResult.prototype.constructor = MusicResult;\n\n    // Export\n    scope.MusicResult = MusicResult;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Music score\n     *\n     * @class MusicScore\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScore(obj) {\n        this.parts = [];\n        if (obj) {\n            for (var i in obj.parts) {\n                this.parts.push(new scope.MusicPart(obj.parts[i]));\n            }\n        }\n    }\n\n    /**\n     * Get parts\n     *\n     * @method getParts\n     * @returns {MusicPart[]}\n     */\n    MusicScore.prototype.getParts = function () {\n        return this.parts;\n    };\n\n    // Export\n    scope.MusicScore = MusicScore;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music score tree\n     *\n     * @class MusicScoreTreeResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScoreTreeResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.score = new scope.MusicScore(obj.score);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicScoreTreeResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicScoreTreeResultElement.prototype.constructor = MusicScoreTreeResultElement;\n\n    /**\n     * Get score\n     *\n     * @method getScore\n     * @returns {MusicScore}\n     */\n    MusicScoreTreeResultElement.prototype.getScore = function () {\n        return this.score;\n    };\n\n    // Export\n    scope.MusicScoreTreeResultElement = MusicScoreTreeResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music scratch-out\n     *\n     * @class MusicScratchOut\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicScratchOut(obj) {\n        this.inputRanges = [];\n        this.erasedInputRanges = [];\n        if (obj) {\n            for (var i in obj.inputRanges) {\n                this.inputRanges.push(new scope.MusicInputRange(obj.inputRanges[i]));\n            }\n            for (var j in obj.erasedInputRanges) {\n                this.erasedInputRanges.push(new scope.MusicInputRange(obj.erasedInputRanges[j]));\n            }\n        }\n    }\n\n    /**\n     * Get input ranges\n     *\n     * @method getInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getInputRanges = function () {\n        return this.inputRanges;\n    };\n\n    /**\n     * Get erased input ranges\n     *\n     * @method getErasedInputRanges\n     * @returns {MusicInputRange[]}\n     */\n    MusicScratchOut.prototype.getErasedInputRanges = function () {\n        return this.erasedInputRanges;\n    };\n\n    // Export\n    scope.MusicScratchOut = MusicScratchOut;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music slur\n     *\n     * @class MusicSlur\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicSlur(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicSlur.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicSlur.prototype.constructor = MusicSlur;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicSlur.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicSlur = MusicSlur;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music stem\n     *\n     * @class MusicStem\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicStem(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicStem.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicStem.prototype.constructor = MusicStem;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicStem.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicStem = MusicStem;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music tie\n     *\n     * @class MusicTie\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTie(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.placement = obj.placement;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTie.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTie.prototype.constructor = MusicTie;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTie.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    // Export\n    scope.MusicTie = MusicTie;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music time modification data\n     *\n     * @class MusicTimeModificationData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeModificationData(obj) {\n        if (obj) {\n            this.actual = obj.actual;\n            this.dots = obj.dots;\n            this.normal = obj.normal;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get actual\n     *\n     * @method getActual\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getActual = function () {\n        return this.actual;\n    };\n\n    /**\n     * Get dots\n     *\n     * @method getDots\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getDots = function () {\n        return this.dots;\n    };\n\n    /**\n     * Get normal\n     *\n     * @method getNormal\n     * @returns {Number}\n     */\n    MusicTimeModificationData.prototype.getNormal = function () {\n        return this.normal;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeModificationData.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeModificationData = MusicTimeModificationData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music time signature\n     *\n     * @class MusicTimeSignature\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTimeSignature(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.top = new scope.MusicAnnotation(obj.top);\n            this.bottom = new scope.MusicAnnotation(obj.bottom);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTimeSignature.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTimeSignature.prototype.constructor = MusicTimeSignature;\n\n    /**\n     * Get top\n     *\n     * @method getTop\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getTop = function () {\n        return this.top;\n    };\n\n    /**\n     * Get bottom\n     *\n     * @method getBottom\n     * @returns {MusicAnnotation}\n     */\n    MusicTimeSignature.prototype.getBottom = function () {\n        return this.bottom;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTimeSignature.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTimeSignature = MusicTimeSignature;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music tuplet bracket\n     *\n     * @class MusicTupletBracket\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTupletBracket(obj) {\n        scope.MusicElement.call(this, obj);\n        if (obj) {\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTupletBracket.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTupletBracket.prototype.constructor = MusicTupletBracket;\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    MusicTupletBracket.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.MusicTupletBracket = MusicTupletBracket;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Music tuplet\n     *\n     * @class MusicTuplet\n     * @extends MusicElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicTuplet(obj) {\n        scope.MusicElement.call(this, obj);\n        this.brackets = [];\n        if (obj) {\n            this.placement = obj.placement;\n            this.number = new scope.MusicAnnotation(obj.number);\n            for (var i in obj.brackets) {\n                this.brackets.push(new scope.MusicTupletBracket(obj.brackets[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicTuplet.prototype = new scope.MusicElement();\n\n    /**\n     * Constructor property\n     */\n    MusicTuplet.prototype.constructor = MusicTuplet;\n\n    /**\n     * Get placement\n     *\n     * @method getPlacement\n     * @returns {String}\n     */\n    MusicTuplet.prototype.getPlacement = function () {\n        return this.placement;\n    };\n\n    /**\n     * Get number\n     *\n     * @method getNumber\n     * @returns {MusicAnnotation}\n     */\n    MusicTuplet.prototype.getNumber = function () {\n        return this.number;\n    };\n\n    /**\n     * Get brackets\n     *\n     * @method getBrackets\n     * @returns {Array}\n     */\n    MusicTuplet.prototype.getBrackets = function () {\n        return this.brackets;\n    };\n\n    // Export\n    scope.MusicTuplet = MusicTuplet;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * MusicXML result\n     *\n     * @class MusicXMLResultElement\n     * @extends MusicResultElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function MusicXMLResultElement(obj) {\n        scope.MusicResultElement.call(this, obj);\n        if (obj) {\n            this.value = obj.value;\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicXMLResultElement.prototype = new scope.MusicResultElement();\n\n    /**\n     * Constructor property\n     */\n    MusicXMLResultElement.prototype.constructor = MusicXMLResultElement;\n\n    /**\n     * Get value\n     *\n     * @method getValue\n     * @returns {String}\n     */\n    MusicXMLResultElement.prototype.getValue = function () {\n        return this.value;\n    };\n\n    // Export\n    scope.MusicXMLResultElement = MusicXMLResultElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer element\n     *\n     * @class AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElement(obj) {\n        if (obj) {\n            this.elementType = obj.elementType;\n        }\n    }\n\n    /**\n     * Get element type\n     *\n     * @method getElementType\n     * @returns {String}\n     */\n    AnalyzerElement.prototype.getElementType = function () {\n        return this.elementType;\n    };\n\n    // Export\n    scope.AnalyzerElement = AnalyzerElement;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer table cell\n     *\n     * @class AnalyzerCell\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCell(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerCellData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerCell.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerCell.prototype.constructor = AnalyzerCell;\n\n    /**\n     * Get analyzer cell data\n     *\n     * @method getData\n     * @returns {AnalyzerCellData}\n     */\n    AnalyzerCell.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerCell = AnalyzerCell;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer cell data\n     *\n     * @class AnalyzerCellData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerCellData(obj) {\n        if (obj) {\n            this.firstColumn = obj.firstColumn;\n            this.lastColumn = obj.lastColumn;\n            this.firstRow = obj.firstRow;\n            this.lastRow = obj.lastRow;\n            this.height = obj.height;\n            this.width = obj.width;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.topBorder = obj.topBorder;\n            this.bottomBorder = obj.bottomBorder;\n            this.leftBorder = obj.leftBorder;\n            this.rightBorder = obj.rightBorder;\n        }\n    }\n\n    /**\n     * Get first column\n     *\n     * @method getFirstColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstColumn = function () {\n        return this.firstColumn;\n    };\n\n    /**\n     * Get last column\n     *\n     * @method getLastColumn\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastColumn = function () {\n        return this.lastColumn;\n    };\n\n    /**\n     * Get first row\n     *\n     * @method getFirstRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getFirstRow = function () {\n        return this.firstRow;\n    };\n\n    /**\n     * Get last row\n     *\n     * @method getLastRow\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getLastRow = function () {\n        return this.lastRow;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerCellData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerCellData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerCellData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Has top border\n     *\n     * @method hasTopBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasTopBorder = function () {\n        return this.topBorder;\n    };\n\n    /**\n     * Has bottom border\n     *\n     * @method hasBottomBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasBottomBorder = function () {\n        return this.bottomBorder;\n    };\n\n    /**\n     * Has left border\n     *\n     * @method hasLeftBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasLeftBorder = function () {\n        return this.leftBorder;\n    };\n\n    /**\n     * Has right border\n     *\n     * @method hasRightBorder\n     * @returns {Boolean}\n     */\n    AnalyzerCellData.prototype.hasRightBorder = function () {\n        return this.rightBorder;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerCellData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        rectangle.setTopLeftPoint(this.getTopLeftPoint());\n        rectangle.setWidth(this.getWidth());\n        rectangle.setHeight(this.getHeight());\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerCellData = AnalyzerCellData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer document\n     *\n     * @class AnalyzerDocument\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerDocument(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.textLines = [];\n        this.shapes = [];\n        this.tables = [];\n        this.groups = [];\n        if (obj) {\n            for (var i in obj.textLines) {\n                this.textLines.push(new scope.AnalyzerTextLine(obj.textLines[i]));\n            }\n            for (var j in obj.shapes) {\n                this.shapes.push(new scope.ShapeSegment(obj.shapes[j]));\n            }\n            for (var k in obj.tables) {\n                this.tables.push(new scope.AnalyzerTable(obj.tables[k]));\n            }\n            for (var l in obj.groups) {\n                this.groups.push(new scope.AnalyzerGroup(obj.groups[l]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerDocument.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerDocument.prototype.constructor = AnalyzerDocument;\n\n    /**\n     * Get text lines\n     *\n     * @method getTextLines\n     * @returns {AnalyzerTextLine[]}\n     */\n    AnalyzerDocument.prototype.getTextLines = function () {\n        return this.textLines;\n    };\n\n    /**\n     * Get shapes\n     *\n     * @method getShapes\n     * @returns {ShapeSegment[]}\n     */\n    AnalyzerDocument.prototype.getShapes = function () {\n        return this.shapes;\n    };\n\n    /**\n     * Get tables\n     *\n     * @method getTables\n     * @returns {AnalyzerTable[]}\n     */\n    AnalyzerDocument.prototype.getTables = function () {\n        return this.tables;\n    };\n\n    /**\n     * Get groups\n     *\n     * @method getGroups\n     * @returns {AnalyzerGroup[]}\n     */\n    AnalyzerDocument.prototype.getGroups = function () {\n        return this.groups;\n    };\n\n    /**\n     * Has scratch-out results\n     *\n     * @method hasScratchOutResults\n     * @returns {Boolean}\n     */\n    AnalyzerDocument.prototype.hasScratchOutResults = function () {\n        for (var i in this.getShapes()) {\n            var currentSeg = this.getShapes()[i];\n            for (var j in currentSeg.getCandidates()) {\n                var currentCandidate = currentSeg.getCandidates()[j];\n                if (currentCandidate instanceof scope.ShapeScratchOut) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    // Export\n    scope.AnalyzerDocument = AnalyzerDocument;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer element reference\n     *\n     * @class AnalyzerElementReference\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerElementReference(obj) {\n        if (obj) {\n            this.uniqueID = obj.uniqueID;\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get unique id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerElementReference.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerElementReference = AnalyzerElementReference;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer group\n     *\n     * @class AnalyzerGroup\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerGroup(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.elementReferences = [];\n        if (obj) {\n            this.type = obj.type;\n            this.uniqueID = obj.uniqueID;\n            for (var i in obj.elementReferences) {\n                this.elementReferences.push(new scope.AnalyzerElementReference(obj.elementReferences[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerGroup.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerGroup.prototype.constructor = AnalyzerGroup;\n\n    /**\n     * Get element references\n     *\n     * @method getElementReferences\n     * @returns {AnalyzerElementReference[]}\n     */\n    AnalyzerGroup.prototype.getElementReferences = function () {\n        return this.elementReferences;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get unique Id\n     *\n     * @method getUniqueId\n     * @returns {String}\n     */\n    AnalyzerGroup.prototype.getUniqueId = function () {\n        return this.uniqueID;\n    };\n\n    // Export\n    scope.AnalyzerGroup = AnalyzerGroup;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer ink range\n     *\n     * @class AnalyzerInkRange\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerInkRange(obj) {\n        if (obj) {\n            this.firstPoint = new scope.Point(obj.firstPoint);\n            this.lastPoint = new scope.Point(obj.lastPoint);\n            this.stroke = new scope.AnalyzerRecognizedStroke(obj.stroke);\n        }\n    }\n\n    /**\n     * Get first point\n     *\n     * @method getFirstPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getFirstPoint = function () {\n        return this.firstPoint;\n    };\n\n    /**\n     * Get last point\n     *\n     * @method getLastPoint\n     * @returns {Point}\n     */\n    AnalyzerInkRange.prototype.getLastPoint = function () {\n        return this.lastPoint;\n    };\n\n    /**\n     * Get stroke\n     *\n     * @method getStroke\n     * @returns {null|*}\n     */\n    AnalyzerInkRange.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    // Export\n    scope.AnalyzerInkRange = AnalyzerInkRange;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer line\n     *\n     * @class AnalyzerLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        if (obj) {\n            this.data = new scope.AnalyzerLineData(obj.data);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerLine.prototype.constructor = AnalyzerLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerLineData}\n     */\n    AnalyzerLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    // Export\n    scope.AnalyzerLine = AnalyzerLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer line data\n     *\n     * @class AnalyzerLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerLineData(obj) {\n        if (obj) {\n            this.p1 = new scope.Point(obj.p1);\n            this.p2 = new scope.Point(obj.p2);\n        }\n    }\n\n    /**\n     * Get p1\n     *\n     * @method getP1\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP1 = function () {\n        return this.p1;\n    };\n\n    /**\n     * Get p2\n     *\n     * @method getP2\n     * @returns {Point}\n     */\n    AnalyzerLineData.prototype.getP2 = function () {\n        return this.p2;\n    };\n\n    // Export\n    scope.AnalyzerLineData = AnalyzerLineData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * AnalyzerRecognizedStroke\n     *\n     * @class AnalyzerRecognizedStroke\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerRecognizedStroke(obj) {\n        if (obj) {\n            this.type = obj.type;\n            this.x = obj.x;\n            this.y = obj.y;\n        }\n    }\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerRecognizedStroke.prototype.getType = function () {\n        return this.type;\n    };\n\n    /**\n     * Get x\n     *\n     * @method getX\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getX = function () {\n        return this.x;\n    };\n\n    /**\n     * Get y\n     *\n     * @method getY\n     * @returns {Number[]}\n     */\n    AnalyzerRecognizedStroke.prototype.getY = function () {\n        return this.y;\n    };\n\n    // Export\n    scope.AnalyzerRecognizedStroke = AnalyzerRecognizedStroke;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer result\n     *\n     * @class AnalyzerResult\n     * @extends AbstractResult\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerResult(obj) {\n        scope.AbstractResult.call(this, obj);\n        if (obj) {\n            this.result = new scope.AnalyzerDocument(obj.result);\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerResult.prototype = new scope.AbstractResult();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerResult.prototype.constructor = AnalyzerResult;\n\n    // Export\n    scope.AnalyzerResult = AnalyzerResult;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer stroke type\n     *\n     * @class AnalyzerStrokeType\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerStrokeType(obj) {\n        if (obj) {\n            this.inkRange = new scope.AnalyzerInkRange(obj.inkRange);\n            this.type = obj.type;\n        }\n    }\n\n    /**\n     * Get ink range\n     *\n     * @method getInkRange\n     * @returns {AnalyzerInkRange}\n     */\n    AnalyzerStrokeType.prototype.getInkRange = function () {\n        return this.inkRange;\n    };\n\n    /**\n     * Get type\n     *\n     * @method getType\n     * @returns {String}\n     */\n    AnalyzerStrokeType.prototype.getType = function () {\n        return this.type;\n    };\n\n    // Export\n    scope.AnalyzerStrokeType = AnalyzerStrokeType;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer table\n     *\n     * @class AnalyzerTable\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTable(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.lines = [];\n        this.cells = [];\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTableData(obj.data);\n            for (var i in obj.lines) {\n                this.lines.push(new scope.AnalyzerLine(obj.lines[i]));\n            }\n            for (var j in obj.cells) {\n                this.cells.push(new scope.AnalyzerCell(obj.cells[j]));\n            }\n            for (var k in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[k]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTable.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTable.prototype.constructor = AnalyzerTable;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTableData}\n     */\n    AnalyzerTable.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get lines\n     *\n     * @method getLines\n     * @returns {AnalyzerLine[]}\n     */\n    AnalyzerTable.prototype.getLines = function () {\n        return this.lines;\n    };\n\n    /**\n     * Get cells\n     *\n     * @method getCells\n     * @returns {AnalyzerCell[]}\n     */\n    AnalyzerTable.prototype.getCells = function () {\n        return this.cells;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTable.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerTable = AnalyzerTable;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer table data\n     *\n     * @class AnalyzerTableData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTableData(obj) {\n        if (obj) {\n            this.columnCount = obj.columnCount;\n            this.rowCount = obj.rowCount;\n        }\n    }\n\n    /**\n     * Get column count\n     *\n     * @method getColumnCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getColumnCount = function () {\n        return this.columnCount;\n    };\n\n    /**\n     * Get row count\n     *\n     * @method getRowCount\n     * @returns {Number}\n     */\n    AnalyzerTableData.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n\n    // Export\n    scope.AnalyzerTableData = AnalyzerTableData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer text line\n     *\n     * @class AnalyzerTextLine\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLine(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        this.underlineList = [];\n        if (obj) {\n            this.data = new scope.AnalyzerTextLineData(obj.data);\n            this.result = new scope.TextDocument(obj.result);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n            for (var j in obj.underlineList) {\n                this.underlineList.push(new scope.AnalyzerUnderline(obj.underlineList[j]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerTextLine.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerTextLine.prototype.constructor = AnalyzerTextLine;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerTextLineData}\n     */\n    AnalyzerTextLine.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get text document\n     *\n     * @method getTextDocument\n     * @returns {TextDocument}\n     */\n    AnalyzerTextLine.prototype.getTextDocument = function () {\n        return this.result;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerTextLine.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    /**\n     * Get underline list\n     *\n     * @method getUnderlineList\n     * @returns {AnalyzerUnderline[]}\n     */\n    AnalyzerTextLine.prototype.getUnderlineList = function () {\n        return this.underlineList;\n    };\n\n    // Export\n    scope.AnalyzerTextLine = AnalyzerTextLine;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer text line data\n     *\n     * @class AnalyzerTextLineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerTextLineData(obj) {\n        if (obj) {\n            this.baselinePos = obj.baselinePos;\n            this.toMidline = obj.toMidline;\n            this.orientation = obj.orientation;\n            this.topLeftPoint = new scope.Point(obj.topLeftPoint);\n            this.textHeight = obj.textHeight;\n            this.justificationType = obj.justificationType;\n            this.height = obj.height;\n            this.width = obj.width;\n        }\n    }\n\n    /**\n     * Get baseline position\n     *\n     * @method getBaselinePos\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getBaselinePos = function () {\n        return this.baselinePos;\n    };\n\n    /**\n     * Get to midline\n     *\n     * @method getToMidline\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getToMidline = function () {\n        return this.toMidline;\n    };\n\n    /**\n     * Get orientation\n     *\n     * @method getOrientation\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getOrientation = function () {\n        return this.orientation;\n    };\n\n    /**\n     * Get top-left point\n     *\n     * @method getTopLeftPoint\n     * @returns {Point}\n     */\n    AnalyzerTextLineData.prototype.getTopLeftPoint = function () {\n        return this.topLeftPoint;\n    };\n\n    /**\n     * Get text height\n     *\n     * @method getTextHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getTextHeight = function () {\n        return this.textHeight;\n    };\n\n    /**\n     * Get justification type\n     *\n     * @method getJustificationType\n     * @returns {String}\n     */\n    AnalyzerTextLineData.prototype.getJustificationType = function () {\n        return this.justificationType;\n    };\n\n    /**\n     * Get height\n     *\n     * @method getHeight\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getHeight = function () {\n        return this.height;\n    };\n\n    /**\n     * Get width\n     *\n     * @method getWidth\n     * @returns {Number}\n     */\n    AnalyzerTextLineData.prototype.getWidth = function () {\n        return this.width;\n    };\n\n    /**\n     * Get bounding box\n     *\n     * @method getBoundingBox\n     * @returns {Rectangle}\n     */\n    AnalyzerTextLineData.prototype.getBoundingBox = function () {\n        var rectangle = new scope.Rectangle();\n        if (this.getTopLeftPoint() || this.getWidth() || this.getHeight()) {\n            rectangle.setTopLeftPoint(this.getTopLeftPoint());\n            rectangle.setWidth(this.getWidth());\n            rectangle.setHeight(this.getHeight());\n        }\n        return rectangle;\n    };\n\n    // Export\n    scope.AnalyzerTextLineData = AnalyzerTextLineData;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer underline\n     *\n     * @class AnalyzerUnderline\n     * @extends AnalyzerElement\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderline(obj) {\n        scope.AnalyzerElement.call(this, obj);\n        this.inkRanges = [];\n        if (obj) {\n            this.data = new scope.AnalyzerUnderlineData(obj.data);\n            for (var i in obj.inkRanges) {\n                this.inkRanges.push(new scope.AnalyzerInkRange(obj.inkRanges[i]));\n            }\n        }\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerUnderline.prototype = new scope.AnalyzerElement();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerUnderline.prototype.constructor = AnalyzerUnderline;\n\n    /**\n     * Get data\n     *\n     * @method getData\n     * @returns {AnalyzerUnderlineData}\n     */\n    AnalyzerUnderline.prototype.getData = function () {\n        return this.data;\n    };\n\n    /**\n     * Get ink ranges\n     *\n     * @method getInkRanges\n     * @returns {AnalyzerInkRange[]}\n     */\n    AnalyzerUnderline.prototype.getInkRanges = function () {\n        return this.inkRanges;\n    };\n\n    // Export\n    scope.AnalyzerUnderline = AnalyzerUnderline;\n})(MyScript);","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer underline data\n     *\n     * @class AnalyzerUnderlineData\n     * @param {Object} [obj]\n     * @constructor\n     */\n    function AnalyzerUnderlineData(obj) {\n        if (obj) {\n            this.firstCharacter = obj.firstCharacter;\n            this.lastCharacter = obj.lastCharacter;\n        }\n    }\n\n    /**\n     * Get first character\n     *\n     * @method getFirstCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getFirstCharacter = function () {\n        return this.firstCharacter;\n    };\n\n    /**\n     * Get last character\n     *\n     * @method getLastCharacter\n     * @returns {Number}\n     */\n    AnalyzerUnderlineData.prototype.getLastCharacter = function () {\n        return this.lastCharacter;\n    };\n\n    // Export\n    scope.AnalyzerUnderlineData = AnalyzerUnderlineData;\n})(MyScript);","'use strict';\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkInterface\n     * @constructor\n     */\n    function NetworkInterface() {\n    }\n\n    NetworkInterface.parseURL = function (url) {\n\n        var parser = document.createElement('a'),\n            searchObject = {},\n            queries, split, i;\n        // Let the browser do the work\n        parser.href = url;\n        // Convert query string to object\n        queries = parser.search.replace(/^\\?/, '').split('&');\n        for (i = 0; i < queries.length; i++) {\n            split = queries[i].split('=');\n            searchObject[split[0]] = split[1];\n        }\n        return {\n            protocol: parser.protocol,\n            host: parser.host,\n            hostname: parser.hostname,\n            port: parser.port,\n            pathname: parser.pathname,\n            search: parser.search,\n            searchObject: searchObject,\n            hash: parser.hash\n        };\n    };\n\n    /**\n     * Parse JSON String to Object\n     *\n     * @method parse\n     * @param {Object} req\n     * @returns {Object}\n     */\n    NetworkInterface.parse = function (req) {\n        var result;\n        try {\n            result = JSON.parse(req.responseText);\n        } catch (e) {\n            result = req.responseText;\n        }\n        return result;\n    };\n\n    /**\n     * Transform object data request to a list of parameters\n     *\n     * @method transformRequest\n     * @param {Object} [obj]\n     * @returns {String}\n     */\n    NetworkInterface.transformRequest = function (obj) {\n        var str = [];\n        for (var p in obj) {\n            if ((typeof obj[p] !== 'undefined') &&\n                (typeof obj[p] !== 'function')) {\n                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n            }\n        }\n        return str.join('&');\n    };\n\n    /**\n     * Send request to the network and return a promise\n     *\n     * @method xhr\n     * @param {String} type\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.xhr = function (type, url, data) {\n\n        return Q.Promise(function (resolve, reject, notify) {\n\n            function onStateChange() {\n                if (request.readyState === 4) {\n                    if (request.status >= 200 && request.status < 300) {\n                        resolve(NetworkInterface.parse(request));\n                    }\n                }\n            }\n\n            function onLoad() {\n                if (request.status >= 200 && request.status < 300) {\n                    resolve(NetworkInterface.parse(request));\n                } else {\n                    reject(new Error(request.responseText));\n                }\n            }\n\n            function onError() {\n                reject(new Error('Can\\'t XHR ' + url));\n            }\n\n            function onProgress(e) {\n                notify(e.loaded / e.total);\n            }\n\n            var request = new XMLHttpRequest();\n            request.open(type, url, true);\n            request.withCredentials = true;\n            request.setRequestHeader('Accept', 'application/json');\n            request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n            request.onerror = onError;\n            request.onprogress = onProgress;\n            request.onload = onLoad;\n            request.onreadystatechange = onStateChange;\n            request.send(NetworkInterface.transformRequest(data));\n        });\n    };\n\n    /**\n     * Get request\n     *\n     * @method get\n     * @param {String} src\n     * @param {Object} params\n     * @returns {Promise}\n     */\n    NetworkInterface.get = function (src, params) {\n        if (params) {\n            src += '?' + NetworkInterface.transformRequest(params);\n        }\n        return scope.NetworkInterface.xhr('GET', src, undefined);\n    };\n\n    /**\n     * Put request\n     *\n     * @method put\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.put = function (url, data) {\n        return scope.NetworkInterface.xhr('PUT', url, data);\n    };\n\n    /**\n     * Post request\n     *\n     * @method post\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.post = function (url, data) {\n        return scope.NetworkInterface.xhr('POST', url, data);\n    };\n\n    /**\n     * Delete request\n     *\n     * @method delete\n     * @param {String} url\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    NetworkInterface.delete = function (url, data) {\n        return scope.NetworkInterface.xhr('DELETE', url, data);\n    };\n\n    // Export\n    scope.NetworkInterface = NetworkInterface;\n})(MyScript, Q);\n","'use strict';\n/* jshint ignore:start */\n\n(function (scope, Q) {\n    /**\n     * Network interface\n     *\n     * @class NetworkWSInterface\n     * @constructor\n     */\n    function NetworkWSInterface() {\n    }\n\n    NetworkWSInterface.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this.close();\n            this._url = url;\n        }\n    };\n\n    NetworkWSInterface.prototype.getUrl = function () {\n        return this._url;\n    };\n\n    NetworkWSInterface.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this.close();\n            this._callback = callback;\n        }\n    };\n\n    NetworkWSInterface.prototype.getCallback = function () {\n        return this._callback;\n    };\n\n    NetworkWSInterface.prototype.getState = function () {\n        return _getWebSocketState(this._socket);\n    };\n\n    NetworkWSInterface.prototype.isClosed = function () {\n        return this.getState() === 3;\n    };\n\n    NetworkWSInterface.prototype.isClosing = function () {\n        return this.getState() === 2;\n    };\n\n    NetworkWSInterface.prototype.isOpen = function () {\n        return this.getState() === 1;\n    };\n\n    NetworkWSInterface.prototype.isConnecting = function () {\n        return this.getState() === 0;\n    };\n\n    NetworkWSInterface.prototype.open = function () {\n        if (this.getUrl() && this.getCallback() && ((this.getState() < 0) || this.isClosed())) {\n            this._socket = _openWebSocket(this.getUrl(), this.getCallback());\n        }\n    };\n\n    NetworkWSInterface.prototype.close = function (code, reason) {\n        if (this.getState() < 2) {\n            _closeWebSocket(this._socket, code, reason);\n        }\n    };\n\n    NetworkWSInterface.prototype.send = function (request) {\n        var state = _getWebSocketState(this._socket);\n        if (state  === 1) {\n            _sendMessage(this._socket, request);\n        } else {\n            this.open();\n        }\n    };\n\n    /**\n     *\n     * @param url\n     * @param callback\n     * @returns {WebSocket}\n     * @private\n     */\n    var _openWebSocket = function (url, callback) {\n        function onOpen(e) {\n            callback(e);\n        }\n        function onClose(e) {\n            callback(e);\n        }\n        function onError(e) {\n            callback(e);\n        }\n        function onMessage(e) {\n            callback({\n                type: e.type,\n                data: JSON.parse(e.data)\n            });\n        }\n\n        var socket = new WebSocket(url);\n        socket.onopen = onOpen;\n        socket.onclose = onClose;\n        socket.onerror = onError;\n        socket.onmessage = onMessage;\n        return socket;\n    };\n\n    /**\n     *\n     * @param socket\n     * @param code\n     * @param reason\n     * @private\n     */\n    var _closeWebSocket = function (socket, code, reason) {\n        if (socket) {\n            socket.close(code, reason);\n        }\n    };\n\n    /**\n     *\n     * @param socket\n     * @returns {*}\n     * @private\n     */\n    var _getWebSocketState = function (socket) {\n        if (socket) {\n            return socket.readyState;\n        }\n        return -1;\n    };\n\n    /**\n     *\n     * @param socket\n     * @param message\n     * @private\n     */\n    var _sendMessage = function (socket, message) {\n        if (socket) {\n            socket.send(JSON.stringify(message));\n        }\n    };\n\n    // Export\n    scope.NetworkWSInterface = NetworkWSInterface;\n})(MyScript, Q);\n/* jshint ignore:end */\n","'use strict';\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract recognizer interface\n     *\n     * @class AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AbstractRecognizer(host) {\n        this.setUrl(this.getProtocol() + 'cloud.myscript.com');\n        if (host) {\n            this.setUrl(this.getProtocol() + host);\n        }\n        this.setSSL(true);\n    }\n\n    AbstractRecognizer.prototype.getProtocol = function() {\n        return this._ssl? 'https://': 'http://';\n    };\n\n    AbstractRecognizer.prototype.getSSL = function() {\n        return this._ssl;\n    };\n\n    AbstractRecognizer.prototype.setSSL = function (ssl) {\n        if (ssl !== undefined) {\n            this._ssl = ssl;\n            this.setUrl(this.getProtocol() + this.getHost());\n        }\n    };\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractRecognizer.prototype.getHost = function() {\n        return scope.NetworkInterface.parseURL(this.getUrl()).host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @method setHost\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.setUrl(this.getProtocol() + host);\n        }\n    };\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getUrl\n     * @returns {String}\n     */\n    AbstractRecognizer.prototype.getUrl = function() {\n        return this.url;\n    };\n\n    /**\n     * Set the recognition service url\n     *\n     * @method setUrl\n     * @param {String}\n     */\n    AbstractRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this.url = url;\n        }\n    };\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AbstractParameter}\n     */\n    AbstractRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AbstractParameter} parameters\n     */\n    AbstractRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get precision\n     *\n     * @method getPrecision\n     * @returns {Number}\n     */\n    AbstractRecognizer.prototype.getPrecision = function () {\n        return this.precision;\n    };\n\n    /**\n     * Set precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    AbstractRecognizer.prototype.setPrecision = function (precision) {\n        this.precision = precision;\n    };\n\n    /**\n     * Get the recognition languages available for an application and a specific inputMode\n     *\n     * @method getAvailableLanguageList\n     * @param {String} applicationKey\n     * @param {String} inputMode\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.getAvailableLanguageList = function (applicationKey, inputMode) {\n        var data = new scope.RecognitionLanguagesData();\n        data.setApplicationKey(applicationKey);\n        data.setInputMode(inputMode);\n\n        return scope.NetworkInterface.get(this.getUrl() + '/api/v3.0/recognition/rest/text/languages.json', data).then(\n            function success(response) {\n                return response.result;\n            }\n        );\n    };\n\n    /**\n     * Do REST recognition\n     *\n     * @private\n     * @method doRestRecognition\n     * @param {AbstractRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.doRestRecognition = function (input, applicationKey, hmacKey, instanceId) {\n        if (input.getComponents) {\n            _filterStrokes(input.getComponents(), this.getPrecision());\n        } else if (input.getInputUnits) {\n            for (var i in input.getInputUnits()) {\n                _filterStrokes(input.getInputUnits()[i].getComponents(), this.getPrecision());\n            }\n        }\n\n        if (input instanceof scope.TextRecognitionInput) {\n            return _doTextRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.ShapeRecognitionInput) {\n            return _doShapeRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.MathRecognitionInput) {\n            return _doMathRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.MusicRecognitionInput) {\n            return _doMusicRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else if (input instanceof scope.AnalyzerRecognitionInput) {\n            return _doAnalyzerRecognition(this.getUrl(), input, applicationKey, hmacKey, instanceId);\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * Clear REST recognition\n     *\n     * @method clearRestRecognition\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    AbstractRecognizer.prototype.clearRestRecognition = function (instanceId) {\n        var data = {\n            instanceSessionId: instanceId\n        };\n        return _clearShapeRecognition(this.getUrl(), data);\n    };\n\n    /**\n     * Do text recognition\n     *\n     * @private\n     * @method _doTextRecognition\n     * @param {String} url\n     * @param {TextRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doTextRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.TextRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/text/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.TextResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @private\n     * @method _doShapeRecognition\n     * @param {String} url\n     * @param {ShapeRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doShapeRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.ShapeRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/shape/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            }\n        );\n    };\n\n    /**\n     * Clear shape recognition\n     *\n     * @private\n     * @method _clearShapeRecognition\n     * @param {String} url\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _clearShapeRecognition = function (url, instanceId) {\n        var data = {\n            instanceSessionId: instanceId\n        };\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/shape/clearSessionId.json', data).then(\n            function success(response) {\n                return new scope.ShapeResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do shape recognition\n     *\n     * @private\n     * @method _doMathRecognition\n     * @param {String} url\n     * @param {MathRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doMathRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.MathRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/math/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MathResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do music recognition\n     *\n     * @private\n     * @method _doMusicRecognition\n     * @param {String} url\n     * @param {MusicRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doMusicRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.MusicRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/music/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.MusicResult(response);\n            }\n        );\n    };\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method _doAnalyzerRecognition\n     * @param {String} url\n     * @param {AnalyzerRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    var _doAnalyzerRecognition = function (url, input, applicationKey, hmacKey, instanceId) {\n        var data = new scope.AnalyzerRecognitionData();\n        _fillData(data, input, instanceId, applicationKey, hmacKey);\n\n        return scope.NetworkInterface.post(url + '/api/v3.0/recognition/rest/analyzer/doSimpleRecognition.json', data).then(\n            function success(response) {\n                return new scope.AnalyzerResult(response);\n            }\n        );\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @private\n     * @method _computeHmac\n     * @param {AbstractRecognitionInput} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     */\n    var _computeHmac = function (input, applicationKey, hmacKey) {\n        var jsonInput = (typeof input === 'object') ? JSON.stringify(input) : input;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    var _filterStrokes = function (components, precision) {\n        components.forEach(function (currentValue) {\n            if (currentValue instanceof scope.StrokeComponent) {\n                currentValue.toFixed(precision);\n            }\n        });\n    };\n\n    var _fillData = function (data, input, instanceId, applicationKey, hmacKey) {\n        data.setRecognitionInput(input);\n        data.setApplicationKey(applicationKey);\n        data.setInstanceId(instanceId);\n        if (hmacKey) {\n            data.setHmac(_computeHmac(data.getRecognitionInput(), applicationKey, hmacKey));\n        }\n    };\n\n    // Export\n    scope.AbstractRecognizer = AbstractRecognizer;\n})(MyScript, CryptoJS);\n","'use strict';\n\n(function (scope, CryptoJS) {\n    /**\n     * Abstract WebSocket recognizer interface\n     *\n     * @class AbstractWSRecognizer\n     * @constructor\n     */\n    function AbstractWSRecognizer() {\n        this._wsInterface = new scope.NetworkWSInterface();\n    }\n\n    AbstractWSRecognizer.prototype.getProtocol = function() {\n        return this._ssl? 'wss://': 'ws://';\n    };\n\n    AbstractWSRecognizer.prototype.getSSL = function() {\n        return this._ssl;\n    };\n\n    AbstractWSRecognizer.prototype.setSSL = function (ssl) {\n        if (ssl !== undefined) {\n            this._ssl = ssl;\n            this.setUrl(this.getProtocol() + this.getHost());\n        }\n    };\n\n    /**\n     * Get the recognition service host\n     *\n     * @method getHost\n     * @returns {string|String|*}\n     */\n    AbstractWSRecognizer.prototype.getHost = function() {\n        return scope.NetworkInterface.parseURL(this.getUrl()).host;\n    };\n\n    /**\n     * Set the recognition service host\n     *\n     * @method setHost\n     * @param {String}\n     */\n    AbstractWSRecognizer.prototype.setHost = function (host) {\n        if (host !== undefined) {\n            this.setUrl(this.getProtocol() + host);\n        }\n    };\n\n    AbstractWSRecognizer.prototype.setUrl = function (url) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    AbstractWSRecognizer.prototype.getUrl = function () {\n        return this._wsInterface.getUrl();\n    };\n\n    AbstractWSRecognizer.prototype.setCallback = function (callback) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {AbstractParameter}\n     */\n    AbstractWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {AbstractParameter} parameters\n     */\n    AbstractWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    /**\n     * Get precision\n     *\n     * @method getPrecision\n     * @returns {Number}\n     */\n    AbstractWSRecognizer.prototype.getPrecision = function () {\n        return this.precision;\n    };\n\n    /**\n     * Set precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    AbstractWSRecognizer.prototype.setPrecision = function (precision) {\n        this.precision = precision;\n    };\n\n    AbstractWSRecognizer.prototype.isClosed = function () {\n        return this._wsInterface.isClosed();\n    };\n\n    AbstractWSRecognizer.prototype.isClosing = function () {\n        return this._wsInterface.isClosing();\n    };\n\n    AbstractWSRecognizer.prototype.isOpen = function () {\n        return this._wsInterface.isOpen();\n    };\n\n    AbstractWSRecognizer.prototype.isConnecting = function () {\n        return this._wsInterface.isConnecting();\n    };\n\n    /**\n     * Open the socket\n     *\n     * @method open\n     */\n    AbstractWSRecognizer.prototype.open = function () {\n        this._wsInterface.open();\n    };\n\n    /**\n     * Close the socket\n     *\n     * @method close\n     */\n    AbstractWSRecognizer.prototype.close = function () {\n        this._wsInterface.close();\n    };\n\n    /**\n     * Send a message\n     *\n     * @method sendMessage\n     * @param {AbstractWSMessage} message\n     */\n    AbstractWSRecognizer.prototype.sendMessage = function (message) {\n        if (message.getComponents) {\n            _filterStrokes(message.getComponents(), this.getPrecision());\n        } else if (message.getInputUnits) {\n            for (var i in message.getInputUnits()) {\n                _filterStrokes(message.getInputUnits()[i].getComponents(), this.getPrecision());\n            }\n        }\n        this._wsInterface.send(message);\n    };\n\n    /**\n     * Initialize the WebSocket\n     *\n     * @method initWSRecognition\n     * @param {String} applicationKey\n     */\n    AbstractWSRecognizer.prototype.initWSRecognition = function (applicationKey) {\n        var message = new scope.InitRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Authenticate the WebSocket client end with a handshake of HMAC signature\n     *\n     * @method takeUpHmacChallenge\n     * @param {String} applicationKey\n     * @param {String} challenge\n     * @param {String} hmacKey\n     */\n    AbstractWSRecognizer.prototype.takeUpHmacChallenge = function (applicationKey, challenge, hmacKey) {\n        var message = new scope.ChallengeRequestWSMessage();\n        message.setApplicationKey(applicationKey);\n        message.setChallenge(challenge);\n        if (hmacKey) {\n            message.setHmacSignature(_computeHmac(challenge, applicationKey, hmacKey));\n        }\n        this.sendMessage(message);\n    };\n\n    /**\n     * Reset the WebSocket recognition session\n     *\n     * @method resetWSRecognition\n     */\n    AbstractWSRecognizer.prototype.resetWSRecognition = function () {\n        var message = new scope.ResetRequestWSMessage();\n        this.sendMessage(message);\n    };\n\n    /**\n     * Compute HMAC signature for server authentication\n     *\n     * @private\n     * @method _computeHmac\n     * @param {String} input\n     * @param {String} applicationKey\n     * @param {String} hmacKey\n     */\n    var _computeHmac = function (input, applicationKey, hmacKey) {\n        var jsonInput = (typeof input === 'object') ? JSON.stringify(input) : input;\n        return CryptoJS.HmacSHA512(jsonInput, applicationKey + hmacKey).toString(CryptoJS.enc.Hex);\n    };\n\n    var _filterStrokes = function (components, precision) {\n        components.forEach(function (currentValue) {\n            if (currentValue instanceof scope.StrokeComponent) {\n                currentValue.toFixed(precision);\n            }\n        });\n    };\n\n    // Export\n    scope.AbstractWSRecognizer = AbstractWSRecognizer;\n})(MyScript, CryptoJS);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text recognizer interface\n     *\n     * @class TextRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextRecognizer.prototype.constructor = TextRecognizer;\n\n    /**\n     * Do text recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]|TextInputUnit[]} components\n     * @param {String} hmacKey\n     * @param {TextParameter} [parameters]\n     * @returns {Promise}\n     */\n    TextRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var inputUnits = [];\n        if (components && components.length > 0) {\n            if (components[0] instanceof scope.TextInputUnit) {\n                inputUnits = components;\n            } else {\n                var unit = new scope.TextInputUnit();\n                unit.setComponents(components);\n                inputUnits.push(unit);\n            }\n        }\n        var input = new scope.TextRecognitionInput();\n        input.setParameters(params);\n        input.setInputUnits(inputUnits);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.TextRecognizer = TextRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Text WebSocket recognizer interface\n     *\n     * @class TextWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function TextWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this);\n        this.parameters = new scope.TextParameter();\n        this.parameters.setLanguage('en_US');\n        this.parameters.setInputMode('CURSIVE');\n        this.setUrl(this.getProtocol() + 'cloud.myscript.com');\n        if (host) {\n            this.setUrl(this.getProtocol() + host);\n        }\n        this.setSSL(true);\n        this.setCallback(callback);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    TextWSRecognizer.prototype.constructor = TextWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {TextParameter}\n     */\n    TextWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {TextParameter} parameters\n     */\n    TextWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    TextWSRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this._wsInterface.setUrl(url + '/api/v3.0/recognition/ws/text');\n        }\n    };\n\n    TextWSRecognizer.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this._wsInterface.setCallback(function (message) {\n                switch (message.type) {\n                    case 'open':\n                        callback(message);\n                        break;\n                    case 'close':\n                        callback(message);\n                        break;\n                    case 'error':\n                        callback(undefined, message);\n                        break;\n                    default:\n                        switch (message.data.type) {\n                            case 'init':\n                                message.data = new scope.InitResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'reset':\n                                message.data = new scope.ResetResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'error':\n                                message.data = new scope.ErrorResponseWSMessage(message.data);\n                                callback(undefined, new Error(JSON.stringify(message.data.getError())));\n                                break;\n                            case 'hmacChallenge':\n                                message.data = new scope.ChallengeResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            default:\n                                message.data = new scope.TextResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                        }\n                        break;\n                }\n            });\n        }\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {AbstractComponent[]|TextInputUnit[]} components\n     * @param {TextParameter} [parameters]\n     */\n    TextWSRecognizer.prototype.startWSRecognition = function (components, parameters) {\n        var message = new scope.TextStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var inputUnits = [];\n        if (components && components.length > 0) {\n            if (components[0] instanceof scope.TextInputUnit) {\n                inputUnits = components;\n            } else {\n                var unit = new scope.TextInputUnit();\n                unit.setComponents(components);\n                inputUnits.push(unit);\n            }\n        }\n        message.setParameters(params);\n        message.setInputUnits(inputUnits);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {AbstractComponent[]|TextInputUnit[]} components\n     * @param {String} instanceId\n     */\n    TextWSRecognizer.prototype.continueWSRecognition = function (components, instanceId) {\n        var message = new scope.TextContinueRequestWSMessage();\n        var inputUnits = [];\n        if (components && components.length > 0) {\n            if (components[0] instanceof scope.TextInputUnit) {\n                inputUnits = components;\n            } else {\n                var unit = new scope.TextInputUnit();\n                unit.setComponents(components);\n                inputUnits.push(unit);\n            }\n        }\n        message.setInputUnits(inputUnits);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.TextWSRecognizer = TextWSRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Shape recognizer interface\n     *\n     * @class ShapeRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function ShapeRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.ShapeParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRecognizer.prototype.constructor = ShapeRecognizer;\n\n    /**\n     * Do shape recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {ShapeParameter} [parameters]\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.ShapeRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    /**\n     * Clear shape recognition session\n     *\n     * @method clearShapeRecognitionSession\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @returns {Promise}\n     */\n    ShapeRecognizer.prototype.clearShapeRecognitionSession = function (applicationKey, instanceId) {\n        return scope.AbstractRecognizer.prototype.clearRestRecognition.call(this, instanceId); // super\n    };\n\n    // Export\n    scope.ShapeRecognizer = ShapeRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math recognizer interface\n     *\n     * @class MathRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MathParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathRecognizer.prototype.constructor = MathRecognizer;\n\n    /**\n     * Do math recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MathParameter} [parameters]\n     * @returns {Promise}\n     */\n    MathRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.MathRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.MathRecognizer = MathRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Math WebSocket recognizer interface\n     *\n     * @class MathWSRecognizer\n     * @extends AbstractWSRecognizer\n     * @param {Function} callback The WebSocket response callback\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MathWSRecognizer(callback, host) {\n        scope.AbstractWSRecognizer.call(this);\n        this.parameters = new scope.MathParameter();\n        this.setUrl(this.getProtocol() + 'cloud.myscript.com');\n        if (host) {\n            this.setUrl(this.getProtocol() + host);\n        }\n        this.setSSL(true);\n        this.setCallback(callback);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathWSRecognizer.prototype = new scope.AbstractWSRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MathWSRecognizer.prototype.constructor = MathWSRecognizer;\n\n    /**\n     * Get parameters\n     *\n     * @method getParameters\n     * @returns {MathParameter}\n     */\n    MathWSRecognizer.prototype.getParameters = function () {\n        return this.parameters;\n    };\n\n    /**\n     * Set parameters\n     *\n     * @method setParameters\n     * @param {MathParameter} parameters\n     */\n    MathWSRecognizer.prototype.setParameters = function (parameters) {\n        this.parameters = parameters;\n    };\n\n    MathWSRecognizer.prototype.setUrl = function (url) {\n        if (url !== undefined) {\n            this._wsInterface.setUrl(url + '/api/v3.0/recognition/ws/math');\n        }\n    };\n\n    MathWSRecognizer.prototype.setCallback = function (callback) {\n        if (callback !== undefined) {\n            this._wsInterface.setCallback(function (message) {\n                switch (message.type) {\n                    case 'open':\n                        callback(message);\n                        break;\n                    case 'close':\n                        callback(message);\n                        break;\n                    case 'error':\n                        callback(undefined, message);\n                        break;\n                    default:\n                        switch (message.data.type) {\n                            case 'init':\n                                message.data = new scope.InitResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'reset':\n                                message.data = new scope.ResetResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            case 'error':\n                                message.data = new scope.ErrorResponseWSMessage(message.data);\n                                callback(undefined, new Error(JSON.stringify(message.data.getError())));\n                                break;\n                            case 'hmacChallenge':\n                                message.data = new scope.ChallengeResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                            default:\n                                message.data = new scope.MathResponseWSMessage(message.data);\n                                callback(message.data);\n                                break;\n                        }\n                        break;\n                }\n            });\n        }\n    };\n\n    /**\n     * Start the WebSocket session\n     *\n     * @method startWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {MathParameter} [parameters]\n     */\n    MathWSRecognizer.prototype.startWSRecognition = function (components, parameters) {\n        var message = new scope.MathStartRequestWSMessage();\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        message.setParameters(params);\n        message.setComponents(components);\n        this.sendMessage(message);\n    };\n\n    /**\n     * Continue the recognition\n     *\n     * @method continueWSRecognition\n     * @param {AbstractComponent[]} components\n     * @param {String} instanceId\n     */\n    MathWSRecognizer.prototype.continueWSRecognition = function (components, instanceId) {\n        var message = new scope.MathContinueRequestWSMessage();\n        message.setComponents(components);\n        message.setInstanceId(instanceId);\n        this.sendMessage(message);\n    };\n\n    // Export\n    scope.MathWSRecognizer = MathWSRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Music recognizer interface\n     *\n     * @class MusicRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function MusicRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.MusicParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    MusicRecognizer.prototype.constructor = MusicRecognizer;\n\n    /**\n     * Do music recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {MusicParameter} [parameters]\n     * @returns {Promise}\n     */\n    MusicRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.MusicRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.MusicRecognizer = MusicRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Analyzer recognizer interface\n     *\n     * @class AnalyzerRecognizer\n     * @extends AbstractRecognizer\n     * @param {String} [host='cloud.myscript.com'] Recognition service host\n     * @constructor\n     */\n    function AnalyzerRecognizer(host) {\n        scope.AbstractRecognizer.call(this, host);\n        this.parameters = new scope.AnalyzerParameter();\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRecognizer.prototype = new scope.AbstractRecognizer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRecognizer.prototype.constructor = AnalyzerRecognizer;\n\n    /**\n     * Do analyzer recognition\n     *\n     * @method doSimpleRecognition\n     * @param {String} applicationKey\n     * @param {String} instanceId\n     * @param {AbstractComponent[]} components\n     * @param {String} hmacKey\n     * @param {AnalyzerParameter} [parameters]\n     * @returns {Promise}\n     */\n    AnalyzerRecognizer.prototype.doSimpleRecognition = function (applicationKey, instanceId, components, hmacKey, parameters) {\n        var params = this.getParameters();\n        if (parameters) {\n            params = parameters;\n        }\n        var input = new scope.AnalyzerRecognitionInput();\n        input.setParameters(params);\n        input.setComponents(components);\n        return scope.AbstractRecognizer.prototype.doRestRecognition.call(this, input, applicationKey, hmacKey, instanceId); // super\n    };\n\n    // Export\n    scope.AnalyzerRecognizer = AnalyzerRecognizer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Abstract Renderer. It's used to calculate the ink rendering in HTML5 canvas\n     *\n     * @class AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AbstractRenderer(context) {\n        this.penParameters = new scope.PenParameters();\n        this.showBoundingBoxes = false;\n        this.typeset = true;\n        this.context = context;\n    }\n\n    /**\n     * Get the context\n     *\n     * @returns {Object}\n     */\n    AbstractRenderer.prototype.getContext = function () {\n        return this.context;\n    };\n\n    /**\n     * This property is use to show or not show the bounding box\n     *\n     * @method getShowBoundingBoxes\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.getShowBoundingBoxes = function () {\n        return this.showBoundingBoxes;\n    };\n\n    /**\n     * Set the show state of bounding box\n     *\n     * @method setShowBoundingBoxes\n     * @param {Boolean} showBoundingBoxes\n     */\n    AbstractRenderer.prototype.setShowBoundingBoxes = function (showBoundingBoxes) {\n        this.showBoundingBoxes = showBoundingBoxes;\n    };\n\n    /**\n     * Get the default pen parameters\n     *\n     * @returns {PenParameters}\n     */\n    AbstractRenderer.prototype.getParameters = function () {\n        return this.penParameters;\n    };\n\n    /**\n     * Set the default pen parameters\n     *\n     * @param {PenParameters} penParameters\n     */\n    AbstractRenderer.prototype.setParameters = function (penParameters) {\n        this.penParameters = penParameters;\n    };\n\n    /**\n     * Is typesetting\n     *\n     * @returns {Boolean}\n     */\n    AbstractRenderer.prototype.isTypesetting = function () {\n        return this.typeset;\n    };\n\n    /**\n     * Enable / disable typesetting\n     *\n     * @param {Boolean} typeset\n     */\n    AbstractRenderer.prototype.setTypeset = function (typeset) {\n        this.typeset = typeset;\n    };\n\n    /**\n     * Clear the recognition context\n     *\n     * @method clear\n     */\n    AbstractRenderer.prototype.clear = function () {\n        this.getContext().clearRect(0, 0, this.getContext().canvas.width, this.getContext().canvas.height);\n    };\n\n    /**\n     * Draw recognition result on HTML5 canvas.\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {Object} recognitionResult\n     */\n    AbstractRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw input components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    AbstractRenderer.prototype.drawComponents = function (components) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw component\n     *\n     * @method drawComponent\n     * @param {AbstractComponent} component\n     */\n    AbstractRenderer.prototype.drawComponent = function (component) {\n        if (component instanceof scope.StrokeComponent) {\n            _drawStroke(component, this.getContext(), this.getParameters());\n        } else if (component instanceof scope.CharacterInputComponent) {\n            _drawCharacter(component, this.getContext(), this.getParameters());\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw stroke component\n     *\n     * @private\n     * @method _drawStroke\n     * @param {StrokeComponent} stroke\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawStroke = function (stroke, context, parameters) { // jshint ignore:line\n        if (stroke && stroke.getLength() > 0) {\n            _renderStroke(stroke, context);\n        }\n    };\n\n    /**\n     * Draw character component\n     *\n     * @private\n     * @method _drawCharacter\n     * @param {CharacterInputComponent} character\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawCharacter = function (character, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw a rectangle on context\n     *\n     * @private\n     * @method _drawRectangle\n     * @param {Rectangle} rectangle\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawRectangle = function (rectangle, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getRectColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n            context.fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n        } finally {\n            context.restore();\n        }\n    };\n\n    /*******************************************************************************************************************\n     * Algorithm methods to compute rendering\n     ******************************************************************************************************************/\n\n    function _computeLinksPoints(point, angle, width) {\n        var radius = point.p * width;\n        return [{\n            x: (point.x - Math.sin(angle) * radius),\n            y: (point.y + Math.cos(angle) * radius)\n        }, {\n            x: (point.x + Math.sin(angle) * radius),\n            y: (point.y - Math.cos(angle) * radius)\n        }\n        ];\n    }\n\n    function _computeMiddlePoint(point1, point2) {\n        return {\n            x: ((point2.x + point1.x) / 2),\n            y: ((point2.y + point1.y) / 2),\n            p: ((point2.p + point1.p) / 2)\n        };\n    }\n\n    function _computeAxeAngle(begin, end) {\n        return Math.atan2(end.y - begin.y, end.x - begin.x);\n    }\n\n    function _fill(context, color) {\n        if (color !== undefined) {\n            context.fillStyle = color;\n            context.fill();\n        }\n    }\n\n    /**\n     *\n     * @param stroke\n     * @param context\n     * @param parameters\n     * @private\n     */\n    function _renderStroke(stroke, context) {\n        context.beginPath();\n        var length = stroke.getLength();\n        var width = stroke.getWidth();\n        var firstPoint = stroke.getPointByIndex(0);\n        if (length < 3) {\n            context.arc(firstPoint.x, firstPoint.y, width * 0.6, 0, Math.PI * 2, true);\n        } else {\n            context.arc(firstPoint.x, firstPoint.y, width * firstPoint.p, 0, Math.PI * 2, true);\n            _renderLine(context, firstPoint, _computeMiddlePoint(firstPoint, stroke.getPointByIndex(1)), width);\n\n            // Possibility to try this (the start looks better when the ink is large)\n            //var first = _computeMiddlePoint(stroke[0], stroke[1]);\n            //context.arc(first.x, first.y, width * first.p, 0, Math.PI * 2, true);\n\n            var nbquadratics = length - 2;\n            for (var i = 0; i < nbquadratics; i++) {\n                _renderQuadratic(context, _computeMiddlePoint(stroke.getPointByIndex(i), stroke.getPointByIndex(i + 1)), _computeMiddlePoint(stroke.getPointByIndex(i + 1), stroke.getPointByIndex(i + 2)), stroke.getPointByIndex(i + 1), width);\n            }\n            _renderLine(context, _computeMiddlePoint(stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1)), stroke.getPointByIndex(length - 1), width);\n            _renderFinal(context, stroke.getPointByIndex(length - 2), stroke.getPointByIndex(length - 1), width);\n        }\n        context.closePath();\n        _fill(context, stroke.getColor());\n    }\n\n    function _renderFinal(context, begin, end, width) {\n        var ARCSPLIT = 6;\n        var angle = _computeAxeAngle(begin, end);\n        var linkPoints = _computeLinksPoints(end, angle, width);\n        context.moveTo(linkPoints[0].x, linkPoints[0].y);\n        for (var i = 1; i <= ARCSPLIT; i++) {\n            var newAngle = angle - i * Math.PI / ARCSPLIT;\n            context.lineTo(end.x - end.p * width * Math.sin(newAngle), end.y + end.p * width * Math.cos(newAngle));\n        }\n    }\n\n    function _renderLine(context, begin, end, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, end), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.lineTo(linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.lineTo(linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    function _renderQuadratic(context, begin, end, ctrl, width) {\n        var linkPoints1 = _computeLinksPoints(begin, _computeAxeAngle(begin, ctrl), width);\n        var linkPoints2 = _computeLinksPoints(end, _computeAxeAngle(ctrl, end), width);\n        var linkPoints3 = _computeLinksPoints(ctrl, _computeAxeAngle(begin, end), width);\n\n        context.moveTo(linkPoints1[0].x, linkPoints1[0].y);\n        context.quadraticCurveTo(linkPoints3[0].x, linkPoints3[0].y, linkPoints2[0].x, linkPoints2[0].y);\n        context.lineTo(linkPoints2[1].x, linkPoints2[1].y);\n        context.quadraticCurveTo(linkPoints3[1].x, linkPoints3[1].y, linkPoints1[1].x, linkPoints1[1].y);\n    }\n\n    // Export\n    scope.AbstractRenderer = AbstractRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Text Renderer. It's used to calculate the text ink rendering in HTML5 canvas\n     *\n     * @class TextRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function TextRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    TextRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    TextRenderer.prototype.constructor = TextRenderer;\n\n    /**\n     * Draw text recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {TextDocument} recognitionResult\n     */\n    TextRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) {\n        this.clear();\n        if (recognitionResult) {\n            this.drawComponents(components);\n        } else {\n            this.drawComponents(components);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    TextRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.TextInputUnit) {\n                this.drawComponents(component.getComponents());\n            } else if (component instanceof scope.AbstractTextInputComponent) {\n                _drawTextComponent(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw text component\n     *\n     * @private\n     * @method _drawTextComponent\n     * @param {AbstractTextInputComponent} component\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTextComponent = function (component, context, parameters) {\n        if (component instanceof scope.CharInputComponent) {\n            _drawChar(component, context, parameters);\n        } else if (component instanceof scope.StringInputComponent) {\n            _drawString(component, context, parameters);\n        } else {\n            throw new Error('Component not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw char\n     *\n     * @private\n     * @method _drawChar\n     * @param {CharInputComponent} char\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawChar = function (char, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw string\n     *\n     * @private\n     * @method _drawString\n     * @param {StringInputComponent} string\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawString = function (string, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    // Export\n    scope.TextRenderer = TextRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Shape Renderer. It's used to calculate the shape ink rendering in HTML5 canvas\n     *\n     * @class ShapeRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function ShapeRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ShapeRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    ShapeRenderer.prototype.constructor = ShapeRenderer;\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {ShapeDocument} document\n     */\n    ShapeRenderer.prototype.drawRecognitionResult = function (components, document) {\n        this.clear();\n        if (document && (document instanceof scope.ShapeDocument)) {\n            this.drawShapes(components, document.getSegments());\n            var lastComponents = [];\n            var processedComponents = _extractComponents(components, document.getInkRanges());\n\n            for (var i in components) {\n                var component = components[i];\n                if (processedComponents.indexOf(component) !== -1) {\n                    lastComponents.push(component);\n                }\n            }\n            this.drawComponents(lastComponents);\n        } else {\n            this.drawComponents(components);\n        }\n        return {components : components, document : document}\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    ShapeRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                _drawShapePrimitive(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw the shapes\n     *\n     * @method drawShapes\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment[]} shapes\n     */\n    ShapeRenderer.prototype.drawShapes = function (components, shapes) {\n        for (var i in shapes) {\n            this.drawShapeSegment(components, shapes[i]);\n        }\n    };\n\n    /**\n     * Draw shape segment\n     *\n     * @method drawShapeSegment\n     * @param {AbstractComponent[]} components\n     * @param {ShapeSegment} segment\n     */\n    ShapeRenderer.prototype.drawShapeSegment = function (components, segment) {\n        var candidate = segment.getSelectedCandidate();\n        if (candidate instanceof scope.ShapeRecognized) {\n            _drawShapeRecognized(candidate, this.getContext(), this.getParameters());\n        } else if (candidate instanceof scope.ShapeNotRecognized) {\n            this.drawComponents(_extractComponents(components, segment.getInkRanges()));\n        } else {\n            throw new Error('not implemented');\n        }\n    };\n\n    /**\n     * This method allow you to draw not recognized shape\n     *\n     * @method drawShapeNotRecognized\n     * @param {AbstractComponent[]} components\n     * @param {ShapeInkRange[]} inkRanges\n     */\n    ShapeRenderer.prototype.drawShapeNotRecognized = function (components, inkRanges) {\n        this.drawComponents(_extractComponents(components, inkRanges));\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @method drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     */\n    ShapeRenderer.prototype.drawShapePrimitive = function (primitive) {\n        _drawShapePrimitive(primitive, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * This method allow you to draw recognized shape\n     *\n     * @private\n     * @method _drawShapeRecognized\n     * @param {ShapeRecognized} shapeRecognized\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeRecognized = function (shapeRecognized, context, parameters) {\n        for (var i in shapeRecognized.getPrimitives()) {\n            _drawShapePrimitive(shapeRecognized.getPrimitives()[i], context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape primitive\n     *\n     * @private\n     * @method _drawShapePrimitive\n     * @param {AbstractShapePrimitive} primitive\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapePrimitive = function (primitive, context, parameters) {\n        if (primitive instanceof scope.ShapeEllipse) {\n            _drawShapeEllipse(primitive, context, parameters);\n        } else if (primitive instanceof scope.ShapeLine) {\n            _drawShapeLine(primitive, context, parameters);\n        } else {\n            throw new Error('Primitive not implemented: ' + primitive.getType());\n        }\n    };\n\n    /**\n     * Draw shape line\n     *\n     * @private\n     * @method _drawShapeLine\n     * @param {ShapeLine} shapeLine\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeLine = function (shapeLine, context, parameters) {\n        _drawLine(shapeLine.getFirstPoint(), shapeLine.getLastPoint(), context, parameters);\n        if (shapeLine.hasBeginDecoration() && shapeLine.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getFirstPoint(), shapeLine.getBeginTangentAngle(), 12.0, context, parameters);\n        }\n        if (shapeLine.hasEndDecoration() && shapeLine.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(shapeLine.getLastPoint(), shapeLine.getEndTangentAngle(), 12.0, context, parameters);\n        }\n    };\n\n    /**\n     * Draw shape ellipse\n     *\n     * @private\n     * @method _drawShapeEllipse\n     * @param {ShapeEllipse} shapeEllipse\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawShapeEllipse = function (shapeEllipse, context, parameters) {\n        var points = _drawEllipseArc(\n            shapeEllipse.getCenter(),\n            shapeEllipse.getMaxRadius(),\n            shapeEllipse.getMinRadius(),\n            shapeEllipse.getOrientation(),\n            shapeEllipse.getStartAngle(),\n            shapeEllipse.getSweepAngle(),\n            context, parameters);\n\n        if (shapeEllipse.hasBeginDecoration() && shapeEllipse.getBeginDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[0], shapeEllipse.getBeginTangentAngle(), 12.0, context, parameters);\n        }\n        if (shapeEllipse.hasEndDecoration() && shapeEllipse.getEndDecoration() === 'ARROW_HEAD') {\n            _drawArrowHead(points[1], shapeEllipse.getEndTangentAngle(), 12.0, context, parameters);\n        }\n    };\n\n    /**\n     * Draw an ellipse arc on context\n     *\n     * @private\n     * @method _drawEllipseArc\n     * @param {Point} centerPoint\n     * @param {Number} maxRadius\n     * @param {Number} minRadius\n     * @param {String} orientation\n     * @param {Number} startAngle\n     * @param {Number} sweepAngle\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     * @returns {Point[]}\n     */\n    var _drawEllipseArc = function (centerPoint, maxRadius, minRadius, orientation, startAngle, sweepAngle, context, parameters) {\n\n        var angleStep = 0.02; // angle delta between interpolated\n\n        var z1 = Math.cos(orientation);\n        var z3 = Math.sin(orientation);\n        var z2 = z1;\n        var z4 = z3;\n        z1 *= maxRadius;\n        z2 *= minRadius;\n        z3 *= maxRadius;\n        z4 *= minRadius;\n\n        var n = Math.floor(Math.abs(sweepAngle) / angleStep);\n\n        var boundariesPoints = [];\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n\n            for (var i = 0; i <= n; i++) {\n\n                var angle = startAngle + (i / n) * sweepAngle; // points on the arc, in radian\n                var alpha = Math.atan2(Math.sin(angle) / minRadius, Math.cos(angle) / maxRadius);\n\n                var cosAlpha = Math.cos(alpha);\n                var sinAlpha = Math.sin(alpha);\n\n                // current point\n                var x = centerPoint.x + z1 * cosAlpha - z4 * sinAlpha;\n                var y = centerPoint.y + z2 * sinAlpha + z3 * cosAlpha;\n                if (i === 0) {\n                    context.moveTo(x, y);\n                } else {\n                    context.lineTo(x, y);\n                }\n\n                if (i === 0 || i === n) {\n                    boundariesPoints.push(new scope.Point({x: x, y: y}));\n                }\n            }\n\n            context.stroke();\n\n        } finally {\n            context.restore();\n        }\n\n        return boundariesPoints;\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Clamp an angle into the range [-PI, +PI]\n     *\n     * @private\n     * @method _phi\n     * @param {Number} angle\n     * @returns {Number}\n     */\n    var _phi = function (angle) {\n        angle = ((angle + Math.PI) % (Math.PI * 2)) - Math.PI;\n        if (angle < -Math.PI) {\n            angle += Math.PI * 2;\n        }\n        return angle;\n    };\n\n    /**\n     * Draw an arrow head on context\n     *\n     * @private\n     * @method _drawArrowHead\n     * @param {Point} headPoint\n     * @param {Number} angle\n     * @param {Number} length\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters\n     */\n    var _drawArrowHead = function (headPoint, angle, length, context, parameters) {\n        var alpha = _phi(angle + Math.PI - (Math.PI / 8)),\n            beta = _phi(angle - Math.PI + (Math.PI / 8));\n\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.moveTo(headPoint.getX(), headPoint.getY());\n            context.beginPath();\n            context.lineTo(headPoint.getX() + (length * Math.cos(alpha)), headPoint.getY() + (length * Math.sin(alpha)));\n            context.lineTo(headPoint.getX() + (length * Math.cos(beta)), headPoint.getY() + (length * Math.sin(beta)));\n            context.lineTo(headPoint.getX(), headPoint.getY());\n            context.fill();\n\n        } finally {\n            context.restore();\n        }\n\n    };\n\n    /**\n     * Return components from ink ranges\n     *\n     * @private\n     * @param components\n     * @param inkRanges\n     * @returns {AbstractComponent[]}\n     */\n    var _extractComponents = function (components, inkRanges) {\n        var result = [];\n\n        for (var i in inkRanges) {\n            var inkRange = inkRanges[i];\n\n            var firstPointIndex = Math.floor(inkRange.getFirstPoint());\n            var lastPointIndex = Math.ceil(inkRange.getLastPoint());\n\n            for (var strokeIndex = inkRange.getFirstStroke(); strokeIndex <= inkRange.getLastStroke(); strokeIndex++) {\n                var currentStroke = components[strokeIndex];\n                var currentStrokePointCount = currentStroke.getX().length;\n\n                var newStroke = new scope.StrokeComponent();\n                newStroke.setColor(currentStroke.getColor());\n                newStroke.setWidth(currentStroke.getWidth());\n\n                for (var pointIndex = firstPointIndex; (strokeIndex === inkRange.getLastStroke() && pointIndex <= lastPointIndex && pointIndex < currentStrokePointCount) || (strokeIndex !== inkRange.getLastStroke() && pointIndex < currentStrokePointCount); pointIndex++) {\n                    newStroke.addPoint(currentStroke.getX()[pointIndex], currentStroke.getY()[pointIndex], currentStroke.getT()[pointIndex]);\n                }\n                result.push(newStroke);\n            }\n        }\n        return result;\n\n    };\n\n    // Export\n    scope.ShapeRenderer = ShapeRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Math Renderer. It's used to calculate the math ink rendering in HTML5 canvas\n     *\n     * @class MathRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MathRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MathRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MathRenderer.prototype.constructor = MathRenderer;\n\n    /**\n     * Draw math recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MathDocument} recognitionResult\n     */\n    MathRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) {\n        this.clear();\n        if (recognitionResult) {\n            var notScratchOutComponents = _filterScratchOut(components, recognitionResult.getScratchOutResults());\n            this.drawComponents(notScratchOutComponents);\n        } else {\n            this.drawComponents(components);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    MathRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractComponent) {\n                if(!component.scratchedStroke){\n                    scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n                }\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param scratchOutResults\n     * @returns {*}\n     */\n    var _filterScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n        for (var k in scratchOutResults) {\n            for (var n in scratchOutResults[k].getErasedInkRanges()) {\n                components[scratchOutResults[k].getErasedInkRanges()[n].getComponent()].scratchedStroke = true;\n            }\n            for (var p in scratchOutResults[k].getInkRanges()) {\n                components[scratchOutResults[k].getInkRanges()[p].getComponent()].scratchedStroke = true;;\n            }\n        }\n        return components;\n    };\n\n    // Export\n    scope.MathRenderer = MathRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Music Renderer. It's used to calculate the music ink rendering in HTML5 canvas\n     *\n     * @class MusicRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function MusicRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    MusicRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    MusicRenderer.prototype.constructor = MusicRenderer;\n\n    /**\n     * Draw music recognition result on HTML5 canvas. Scratch out results are use to redraw HTML5 Canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {MusicDocument} recognitionResult\n     */\n    MusicRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) {\n        this.clear();\n        if (recognitionResult) {\n            var notScratchOutComponents = _removeMusicScratchOut(components, recognitionResult.getScratchOutResults());\n            this.drawComponents(notScratchOutComponents);\n        } else {\n            this.drawComponents(components);\n        }\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @method drawStaff\n     * @param {MusicStaff} staff\n     */\n    MusicRenderer.prototype.drawStaff = function (staff) {\n        _drawStaff(staff, this.getContext(), this.getParameters());\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    MusicRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractMusicInputComponent) {\n                _drawMusicNode(component, this.getContext(), this.getParameters());\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw staff on the HTML5 canvas\n     *\n     * @private\n     * @method _drawStaff\n     * @param {MusicStaff} staff\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawStaff = function (staff, context, parameters) {\n        var staffHeight = staff.getTop() + ((staff.getCount() - 1) * staff.getGap());\n//            var staves = Math.floor(context.canvas.clientHeight / staff.height);\n        var staves = 1;\n\n        context.beginPath();\n\n        // Drawing horizontal staff lines\n        for (var i = 0; i < staves; i++) {\n            var offset = staffHeight * i;\n            for (var j = 0; j < staff.getCount(); j++) {\n                context.moveTo(0, (staff.getTop() + offset) + j * staff.getGap());\n                context.lineTo(context.canvas.clientWidth, (staff.getTop() + offset) + j * staff.getGap());\n            }\n        }\n\n        context.stroke();\n    };\n\n    /**\n     * Draw music node\n     *\n     * @private\n     * @method _drawMusicNode\n     * @param {AbstractMusicInputComponent} component\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawMusicNode = function (component, context, parameters) {\n        if (component instanceof scope.MusicAccidentalInputComponent) {\n            _drawAccidental(component, context, parameters);\n        } else if (component instanceof scope.MusicArpeggiateInputComponent) {\n            _drawArpeggiate(component, context, parameters);\n        } else if (component instanceof scope.MusicBarInputComponent) {\n            _drawBar(component, context, parameters);\n        } else if (component instanceof scope.MusicBeamInputComponent) {\n            _drawBeam(component, context, parameters);\n        } else if (component instanceof scope.MusicClefInputComponent) {\n            _drawClef(component, context, parameters);\n        } else if (component instanceof scope.MusicDecorationInputComponent) {\n            _drawDecoration(component, context, parameters);\n        } else if (component instanceof scope.MusicDotsInputComponent) {\n            _drawDots(component, context, parameters);\n        } else if (component instanceof scope.MusicHeadInputComponent) {\n            _drawHead(component, context, parameters);\n        } else if (component instanceof scope.MusicLedgerLineInputComponent) {\n            _drawLedgerLine(component, context, parameters);\n        } else if (component instanceof scope.MusicRestInputComponent) {\n            _drawRest(component, context, parameters);\n        } else if (component instanceof scope.MusicStemInputComponent) {\n            _drawStem(component, context, parameters);\n        } else if (component instanceof scope.MusicTieOrSlurInputComponent) {\n            _drawTieOrSlur(component, context, parameters);\n        } else if (component instanceof scope.MusicTimeSignatureInputComponent) {\n            _drawTimeSignature(component, context, parameters);\n        } else {\n            throw new Error('Node not implemented: ' + component.getType());\n        }\n    };\n\n    /**\n     * Draw accidental\n     *\n     * @private\n     * @method _drawAccidental\n     * @param {MusicAccidentalInputComponent} accidental\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawAccidental = function (accidental, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw arpeggiate\n     *\n     * @private\n     * @method _drawArpeggiate\n     * @param {MusicArpeggiateInputComponent} arpeggiate\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawArpeggiate = function (arpeggiate, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw bar\n     *\n     * @private\n     * @method _drawBar\n     * @param {MusicBarInputComponent} bar\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBar = function (bar, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw beam\n     *\n     * @private\n     * @method _drawBeam\n     * @param {MusicBeamInputComponent} beam\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawBeam = function (beam, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw clef\n     *\n     * @private\n     * @method _drawClef\n     * @param {MusicClefInputComponent} clef\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawClef = function (clef, context, parameters) { // jshint ignore:line\n        var src = 'data:image/svg+xml,';\n        switch (clef.getValue().getSymbol()) {\n            case 'F':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" x=\"0\" y=\"0\" width=\"18\" height=\"20\"><defs/><g transform=\"translate(6.600000e-3,3.125356e-3)\"><g><path d=\"M17.3 3.1 C17.3 3.5 17.1 3.8 16.8 4.1 C16.5 4.4 15.9 4.5 15.5 4.3 C15 4.1 14.7 3.7 14.7 3.2 C14.6 2.8 14.8 2.5 15 2.2 C15.3 1.9 15.7 1.8 16 1.8 C16.4 1.8 16.8 2 17 2.3 C17.2 2.5 17.3 2.8 17.3 3.1 z\"/></g><g><path d=\"M17.3 8.9 C17.3 9.3 17.1 9.7 16.8 9.9 C16.5 10.3 15.9 10.3 15.5 10.2 C15 10 14.7 9.5 14.7 9.1 C14.6 8.7 14.8 8.3 15 8 C15.3 7.8 15.7 7.6 16 7.6 C16.5 7.7 17 8 17.2 8.4 C17.2 8.6 17.3 8.8 17.3 8.9 z\"/></g><g><path d=\"M13 7.2 C13 10 11.8 12.7 9.8 14.7 C7.3 17.2 4 18.8 0.7 19.8 C0.3 20.1 -0.4 19.8 0.3 19.4 C1.6 18.8 3 18.3 4.2 17.5 C7 15.8 9.3 13.1 9.8 9.9 C10.1 8 10.1 5.9 9.6 4 C9.2 2.6 8.2 1.1 6.7 0.9 C5.3 0.7 3.7 1.2 2.7 2.2 C2.5 2.4 2 3.2 2 4 C2.6 3.6 2.6 3.6 3.1 3.4 C4.2 2.9 5.7 3.6 6 4.9 C6.3 6 6.1 7.5 5 8.1 C3.8 8.7 2 8.5 1.4 7.2 C0.3 5.3 0.9 2.6 2.6 1.2 C4.4 -0.3 7.1 -0.3 9.2 0.4 C11.4 1.3 12.7 3.5 12.9 5.8 C13 6.2 13 6.7 13 7.2 z\"/></g></g></svg>';\n                break;\n            case 'C':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"18\" height=\"25\"><defs/><g><g transform=\"matrix(1,0,0,1.030698,-309.364,-543.8647)\"><path d=\"M 325.9 546.8 C 325.8 548.7 324.7 550.7 322.8 551.5 C 321.1 552.1 319.1 552.2 317.6 551 C 316.6 550.2 316.2 548.4 317.3 547.5 C 318.3 546.5 320.4 547.4 320.3 548.9 C 320.7 549.9 318.5 550.5 319.7 551.3 C 321 551.6 322.3 550.5 322.6 549.3 C 323.1 547.5 323.1 545.6 322.7 543.8 C 322.4 542.9 321.9 541.5 320.7 541.9 C 319.2 542.2 318.3 543.8 317.9 545.1 C 317.6 543.2 316.4 541.5 315 540.2 C 315 544.1 315 548 315 551.9 L 314.1 551.9 C 314.1 543.9 314.1 535.7 314.1 527.7 L 315 527.7 C 315 531.5 315 535.5 315 539.4 C 316.4 538.1 317.6 536.4 317.8 534.5 C 318.3 535.9 319.3 537.5 321 537.8 C 322.2 537.8 322.5 536.3 322.8 535.4 C 323.1 533.7 323.1 531.8 322.6 530.1 C 322.2 529 320.9 528 319.6 528.3 C 318.6 529 320.6 529.6 320.3 530.6 C 320.5 532 318.8 533 317.6 532.3 C 316.3 531.6 316.4 529.7 317.4 528.8 C 318 528.1 319.3 527.7 320.3 527.7 C 321.2 527.7 321.8 527.7 322.6 528 C 324.6 528.7 325.7 530.7 325.9 532.7 C 326.2 534.9 324.9 537.3 322.8 538.2 C 321.5 538.7 319.9 538.3 318.8 537.3 C 318.7 538.3 318.2 539.2 317.7 539.9 C 318.1 540.6 318.6 541.8 318.8 542.1 C 320.1 540.9 322.5 540.8 323.8 542 C 325.2 543.1 326.1 545 325.9 546.8 z \"/></g><g transform=\"matrix(1,0,0,1.030928,-309.364,-543.9805)\"><path d=\"M 312.2 551.9 L 309.4 551.9 L 309.4 527.7 L 312.2 527.7 L 312.2 551.9 z \"/></g></g></svg>';\n                break;\n            case 'G':\n                src = src + '<svg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"15\" height=\"40\"><defs/><path d=\"m 12 3.4 c 0.3 3.1 -2 5.6 -4.1 7.6 -0.9 0.9 -0.2 0.1 -0.6 0.6 -0.1 -0.5 -0.3 -1.7 -0.3 -2.1 0.1 -2.6 2.3 -6.5 4.2 -7.9 0.3 0.6 0.6 0.6 0.8 1.8 z m 0.7 15.9 c -1.2 -0.9 -2.8 -1.1 -4.3 -0.9 -0.2 -1.2 -0.4 -2.5 -0.6 -3.7 2.4 -2.3 4.9 -4.9 5 -8.4 0.1 -2.2 -0.3 -4.6 -1.7 -6.4 C 9.5 0.1 8.3 2.1 7.4 3.3 c -1.5 2.6 -1.1 5.8 -0.6 8.6 -0.8 0.9 -1.9 1.7 -2.7 2.7 -2.4 2.3 -4.4 5.3 -4 8.7 0.2 3.3 2.6 6.3 5.9 7.1 1.2 0.3 2.6 0.3 3.8 0.1 0.2 2.2 1 4.5 0.1 6.7 -0.7 1.6 -2.8 2.9 -4.3 2.2 -0.6 -0.3 -0.1 -0.1 -0.5 -0.2 1.1 -0.3 2 -1 2.3 -1.5 0.8 -1.4 -0.4 -3.6 -2.2 -3.3 -2.3 0 -3.2 3.1 -1.7 4.6 1.3 1.5 3.8 1.3 5.4 0.3 1.8 -1.2 2 -3.5 1.8 -5.5 -0.1 -0.7 -0.4 -2.6 -0.4 -3.3 0.7 -0.2 0.2 -0.1 1.2 -0.4 2.7 -1 4.4 -4.2 3.6 -7 -0.3 -1.4 -1 -2.9 -2.3 -3.7 z m 0.6 5.7 c 0.2 2 -1.1 4.2 -3.1 4.9 -0.1 -0.8 -0.2 -1 -0.3 -1.4 -0.5 -2.4 -0.7 -4.9 -1.1 -7.3 1.6 -0.2 3.5 0.5 4 2.1 0.2 0.6 0.3 1.2 0.4 1.8 z m -5.1 5.1 c -2.5 0.1 -5 -1.6 -5.6 -4 -0.7 -2.1 -0.5 -4.5 0.8 -6.4 1.1 -1.7 2.6 -3 4 -4.5 0.2 1.1 0.4 2.2 0.5 3.3 -3 0.8 -5 4.6 -3.2 7.3 0.5 0.8 2 2.2 2.8 1.6 -1.1 -0.7 -2 -1.8 -1.8 -3.2 -0.1 -1.3 1.4 -2.9 2.7 -3.1 0.4 2.8 0.9 6 1.4 8.8 -0.5 0.1 -1 0.1 -1.5 0.1 z\"/></svg>';\n                break;\n            default:\n                throw new Error('Unknown music clef symbol');\n        }\n\n        var imageObj = new Image();\n        imageObj.onload = function () {\n            var ratio = clef.getBoundingBox().getHeight() / this.height;\n            clef.getBoundingBox().setWidth(this.width * ratio);\n            context.drawImage(imageObj, clef.getBoundingBox().getX(), clef.getBoundingBox().getY(), clef.getBoundingBox().getWidth(), clef.getBoundingBox().getHeight());\n        };\n        imageObj.src = src;\n    };\n\n    /**\n     * Draw decoration\n     *\n     * @private\n     * @method _drawDecoration\n     * @param {MusicDecorationInputComponent} decoration\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDecoration = function (decoration, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw dots\n     *\n     * @private\n     * @method _drawDots\n     * @param {MusicDotsInputComponent} dots\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawDots = function (dots, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw head\n     *\n     * @private\n     * @method _drawHead\n     * @param {MusicHeadInputComponent} head\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawHead = function (head, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw ledgerLine\n     *\n     * @private\n     * @method _drawLedgerLine\n     * @param {MusicLedgerLineInputComponent} ledgerLine\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawLedgerLine = function (ledgerLine, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw rest\n     *\n     * @private\n     * @method _drawRest\n     * @param {MusicRestInputComponent} rest\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawRest = function (rest, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw stem\n     *\n     * @private\n     * @method _drawStem\n     * @param {MusicStemInputComponent} stem\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawStem = function (stem, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw tieOrSlur\n     *\n     * @private\n     * @method _drawTieOrSlur\n     * @param {MusicTieOrSlurInputComponent} tieOrSlur\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTieOrSlur = function (tieOrSlur, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Draw timeSignature\n     *\n     * @private\n     * @method _drawTimeSignature\n     * @param {MusicTimeSignatureInputComponent} timeSignature\n     * @param {Object} context The canvas 2d context\n     * @param {PenParameters} parameters Rendering parameters\n     */\n    var _drawTimeSignature = function (timeSignature, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n    /**\n     * Return non-scratched out components\n     *\n     * @private\n     * @param components\n     * @param scratchOutResults\n     * @returns {*}\n     */\n    var _removeMusicScratchOut = function (components, scratchOutResults) {\n        if (!scratchOutResults || scratchOutResults.length === 0) {\n            return components;\n        }\n\n        var cloneComponents = components.slice(0);\n        var componentsToRemove = [];\n\n        for (var k in scratchOutResults) {\n            if (scratchOutResults[k].getErasedInputRanges()) {\n                for (var n in scratchOutResults[k].getErasedInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getErasedInputRanges()[n].getComponent());\n                }\n                for (var p in scratchOutResults[k].getInputRanges()) {\n                    componentsToRemove.push(scratchOutResults[k].getInputRanges()[p].getComponent());\n                }\n            }\n        }\n\n        componentsToRemove.sort(function (a, b) {\n            return b - a;\n        });\n\n        for (var z in componentsToRemove) {\n            cloneComponents.splice(componentsToRemove[z], 1);\n        }\n        return cloneComponents;\n    };\n\n    // Export\n    scope.MusicRenderer = MusicRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Analyzer Renderer. It's used to calculate the analyzer ink rendering in HTML5 canvas\n     *\n     * @class AnalyzerRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function AnalyzerRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.shapeRenderer = new scope.ShapeRenderer(context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    AnalyzerRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    AnalyzerRenderer.prototype.constructor = AnalyzerRenderer;\n\n    /**\n     * Get shape renderer\n     *\n     * @method getShapeRenderer\n     * @returns {ShapeRenderer}\n     */\n    AnalyzerRenderer.prototype.getShapeRenderer = function () {\n        return this.shapeRenderer;\n    };\n\n    /**\n     * Set shape renderer\n     *\n     * @method setShapeRenderer\n     * @param {ShapeRenderer} shapeRenderer\n     */\n    AnalyzerRenderer.prototype.setShapeRenderer = function (shapeRenderer) {\n        this.shapeRenderer = shapeRenderer;\n    };\n\n    /**\n     * Draw shape recognition result on HTML5 canvas\n     *\n     * @method drawRecognitionResult\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerDocument} recognitionResult\n     */\n    AnalyzerRenderer.prototype.drawRecognitionResult = function (components, recognitionResult) {\n        this.clear();\n        if (recognitionResult) {\n            this.shapeRenderer.drawShapes(components, recognitionResult.getShapes());\n            _drawTables(components, recognitionResult.getTables(), this.getContext(), this.getParameters());\n            _drawTextLines(components, recognitionResult.getTextLines(), this.getContext(), this.getParameters());\n            //_drawGroups(components, recognitionResult.getGroups(), this.getContext(), this.getParameters()); // TODO: not implemented\n        } else {\n            this.drawComponents(components);\n        }\n    };\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    AnalyzerRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractShapePrimitive) {\n                this.shapeRenderer.drawShapePrimitive(component);\n            } else if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    /**\n     * Draw table\n     *\n     * @private\n     * @method _drawTables\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTable[]} tables\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTables = function (components, tables, context, parameters) {\n        for (var i in tables) {\n            for (var k in tables[i].getLines()) {\n                var data = tables[i].getLines()[k].getData();\n                _drawLine(data.getP1(), data.getP2(), context, parameters);\n            }\n        }\n    };\n\n    /**\n     * Draw the text line\n     *\n     * @private\n     * @method _drawTextLines\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerTextLine[]} textLines\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawTextLines = function (components, textLines, context, parameters) {\n        for (var i in textLines) {\n            var textLine = textLines[i];\n            var data = textLine.getData();\n            if (data) {\n                var text = textLine.getTextDocument().getTextSegment().getSelectedCandidate().getLabel();\n                _drawText(data.getBoundingBox(), text, data.getJustificationType(), data.getTextHeight(), data.getBaselinePos(), context, parameters);\n\n                var underlines = textLine.getUnderlineList();\n                for (var j in underlines) {\n                    _drawUnderline(data.getBoundingBox(), underlines[j], text, data.getTextHeight(), data.getBaselinePos() + data.getTextHeight() / 10, context, parameters);\n                }\n            }\n        }\n    };\n\n    /**\n     * Draw text on analyser\n     *\n     * @private\n     * @method _drawText\n     * @param {Rectangle} boundingBox\n     * @param {String} text\n     * @param {String} justificationType\n     * @param {Number} textHeight\n     * @param {Number} baseline\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawText = function (boundingBox, text, justificationType, textHeight, baseline, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n            context.font = parameters.getDecoration() + ' ' + textHeight + 'px' + ' ' + parameters.getFont();\n            context.textAlign = (justificationType === 'CENTER') ? 'center' : 'left';\n\n            context.fillText(text, boundingBox.getX(), baseline);\n\n        } finally {\n            context.restore();\n        }\n    };\n\n    /**\n     * Draw Groups\n     *\n     * @private\n     * @method _drawGroups\n     * @param {AbstractComponent[]} components\n     * @param {AnalyzerGroup[]} groups\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawGroups = function (components, groups, context, parameters) { // jshint ignore:line\n        throw new Error('not implemented');\n    };\n\n\n    /**\n     * Draw Underline\n     *\n     * @private\n     * @method _drawUnderline\n     * @param {Rectangle} boundingBox\n     * @param {AnalyzerUnderline} underline\n     * @param {String} text\n     * @param {Number} textHeight\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawUnderline = function (boundingBox, underline, text, textHeight, baseline, context, parameters) {\n        var topLeft = boundingBox.getTopLeftPoint();\n        var firstCharacter = underline.getData().getFirstCharacter();\n        var lastCharacter = underline.getData().getLastCharacter();\n\n        context.font = parameters.getDecoration() + ' ' + textHeight + 'px' + ' ' + parameters.getFont();\n\n        var textMetrics = context.measureText(text.substring(0, firstCharacter));\n        var x1 = topLeft.x + textMetrics.width;\n\n        textMetrics = context.measureText(text.substring(firstCharacter, lastCharacter + 1));\n        var x2 = x1 + textMetrics.width;\n        _drawLine(new scope.Point({x: x1, y: baseline}), new scope.Point({x: x2, y: baseline}), context, parameters);\n    };\n\n    /**\n     * Draw a cell\n     *\n     * @private\n     * @method _drawCell\n     * @param {AnalyzerCell} cell\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawCell = function (cell, context, parameters) {\n        if (cell.getData()) {\n            var rectangle = cell.getData().getBoundingBox();\n            context.save();\n            try {\n                context.fillStyle = parameters.getRectColor();\n                context.strokeStyle = parameters.getColor();\n                context.lineWidth = 0.5 * parameters.getWidth();\n                context.fillRect(rectangle.getX(), rectangle.getY(), rectangle.getWidth(), rectangle.getHeight());\n            } finally {\n                context.restore();\n            }\n        }\n    };\n\n    /**\n     * Draw a line on context\n     *\n     * @private\n     * @method _drawLine\n     * @param {Point} p1\n     * @param {Point} p2\n     * @param {Object} context\n     * @param {PenParameters} parameters\n     */\n    var _drawLine = function (p1, p2, context, parameters) {\n        context.save();\n        try {\n            context.fillStyle = parameters.getColor();\n            context.strokeStyle = parameters.getColor();\n            context.lineWidth = 0.5 * parameters.getWidth();\n\n            context.beginPath();\n            context.moveTo(p1.getX(), p1.getY());\n            context.lineTo(p2.getX(), p2.getY());\n            context.stroke();\n        } finally {\n            context.restore();\n        }\n    };\n\n    // Export\n    scope.AnalyzerRenderer = AnalyzerRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * Represent the Image Renderer. It's used to calculate the Image ink rendering in HTML5 canvas\n     *\n     * @class ImageRenderer\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function ImageRenderer(context) {\n        scope.AbstractRenderer.call(this, context);\n    }\n\n    /**\n     * Inheritance property\n     */\n    ImageRenderer.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    ImageRenderer.prototype.constructor = ImageRenderer;\n\n\n    /**\n     * Draw components\n     *\n     * @method drawComponents\n     * @param {AbstractComponent[]} components\n     */\n    ImageRenderer.prototype.drawComponents = function (components) {\n        for (var i in components) {\n            var component = components[i];\n            if (component instanceof scope.AbstractComponent) {\n                scope.AbstractRenderer.prototype.drawComponent.call(this, component); // super\n            } else {\n                console.log(components);\n                console.log(typeof component);\n                throw new Error('not implemented');\n            }\n        }\n    };\n\n    // Export\n    scope.ImageRenderer = ImageRenderer;\n})(MyScript);\n","'use strict';\n\n(function (scope) {\n    /**\n     * The InkGrabber class that render, capture and build strokes\n     *\n     * @class InkGrabber\n     * @extends AbstractRenderer\n     * @param {Object} context\n     * @constructor\n     */\n    function InkGrabber(context) {\n        scope.AbstractRenderer.call(this, context);\n        this.stroke = undefined;\n        this.writing = false;\n    }\n\n    /**\n     * Inheritance property\n     */\n    InkGrabber.prototype = new scope.AbstractRenderer();\n\n    /**\n     * Constructor property\n     */\n    InkGrabber.prototype.constructor = InkGrabber;\n\n    /**\n     * Is Writing a stroke\n     *\n     * @method isWriting\n     * @returns {Boolean}\n     */\n    InkGrabber.prototype.isWriting = function () {\n        return this.writing;\n    };\n\n    /**\n     * Get the last wrote stroke\n     *\n     * @method getStroke\n     * @returns {StrokeComponent}\n     */\n    InkGrabber.prototype.getStroke = function () {\n        return this.stroke;\n    };\n\n    InkGrabber.prototype.startCapture = function (x, y, t) {\n        if (!this.writing) {\n            this.writing = true;\n            this.stroke = new scope.StrokeComponent();\n            this.stroke.setColor(this.penParameters.getColor());\n            this.stroke.setWidth(this.penParameters.getWidth());\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawComponent(this.stroke);\n        } else {\n            throw new Error('StrokeComponent capture already running');\n        }\n    };\n\n    InkGrabber.prototype.continueCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawComponent(this.stroke);\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    InkGrabber.prototype.endCapture = function (x, y, t) {\n        if (this.writing) {\n            this.stroke.addPoint(x, y, t);\n            this.clear();\n            this.drawComponent(this.stroke);\n            this.writing = false;\n        } else {\n            throw new Error('Missing startInkCapture');\n        }\n    };\n\n    // Export\n    scope.InkGrabber = InkGrabber;\n})(MyScript);\n","'use strict';\n'use strict';\n\n(function (scope) {\n    /**\n     * InkPaper\n     *\n     * @class InkPaper\n     * @param {Element} element\n     * @param {Object} [options]\n     * @param {Function} [callback] callback function\n     * @param {Object} callback.data The recognition result\n     * @param {Object} callback.err The err to the callback\n     * @constructor\n     */\n    function InkPaper(element, options, callback) {\n        this._element = element;\n        this._instanceId = undefined;\n        this._timerId = undefined;\n        this._initialized = false;\n        this._lastSentComponentIndex = 0;\n        this._components = [];\n        this._redoComponents = [];\n        this.isStarted = false;\n        this.resultCallback = callback;\n        this.changeCallback = undefined;\n\n\n        // Capture\n        var tempCanvas = _createCanvas(element, 'ms-temp-canvas');\n        this.canvasRatio = _getCanvasRatio(tempCanvas);\n        element.removeChild(tempCanvas);\n        //this.canvasRatio = 1;\n\n        this._captureCanvas = _createCanvas(element, 'ms-capture-canvas');\n\n        this._inkGrabber = new scope.InkGrabber(this._captureCanvas.getContext('2d'));\n\n        // Rendering\n        this._renderingCanvas = _createCanvas(element, 'ms-rendering-canvas');\n\n\n        this._textRenderer = new scope.TextRenderer(this._renderingCanvas.getContext('2d'));\n        this._mathRenderer = new scope.MathRenderer(this._renderingCanvas.getContext('2d'));\n        this._shapeRenderer = new scope.ShapeRenderer(this._renderingCanvas.getContext('2d'));\n        this._musicRenderer = new scope.MusicRenderer(this._renderingCanvas.getContext('2d'));\n        this._analyzerRenderer = new scope.AnalyzerRenderer(this._renderingCanvas.getContext('2d'));\n\n        // Recognition\n        this._textRecognizer = new scope.TextRecognizer();\n        this._mathRecognizer = new scope.MathRecognizer();\n        this._shapeRecognizer = new scope.ShapeRecognizer();\n        this._musicRecognizer = new scope.MusicRecognizer();\n        this._analyzerRecognizer = new scope.AnalyzerRecognizer();\n\n        this._textWSRecognizer = new scope.TextWSRecognizer(this._handleMessage.bind(this));\n        this._mathWSRecognizer = new scope.MathWSRecognizer(this._handleMessage.bind(this));\n\n        this._attachListeners(element);\n\n        this.options = { // Default options\n            type: scope.RecognitionType.TEXT,\n            protocol: scope.Protocol.REST,\n            ssl: true,\n            width: 400,\n            height: 300,\n            timeout: 2000,\n            typeset: false,\n            components: [],\n            textParameters: new scope.TextParameter(),\n            mathParameters: new scope.MathParameter(),\n            shapeParameters: new scope.ShapeParameter(),\n            musicParameters: new scope.MusicParameter(),\n            analyzerParameters: new scope.AnalyzerParameter()\n        };\n\n        if (options) {\n            for (var idx in options) {\n                if (options[idx] !== undefined) {\n                    this.options[idx] = options[idx]; // Override current options\n                }\n            }\n        }\n\n        // Recognition type\n        this.setType(this.options.type);\n\n        this.setHost(this.options.host);\n        this.setSSL(this.options.ssl);\n\n        this.setTextParameters(this.options.textParameters); // jshint ignore:line\n        this.setMathParameters(this.options.mathParameters); // jshint ignore:line\n        this.setShapeParameters(this.options.shapeParameters); // jshint ignore:line\n        this.setMusicParameters(this.options.musicParameters); // jshint ignore:line\n        this.setAnalyzerParameters(this.options.analyzerParameters); // jshint ignore:line\n\n        this.setProtocol(this.options.protocol);\n        this.setTimeout(this.options.timeout);\n        this.setApplicationKey(this.options.applicationKey);\n        this.setHmacKey(this.options.hmacKey);\n\n        this.setPenParameters(this.options.penParameters);\n\n        this.setPrecision(this.options.precision);\n        this.setTypeset(this.options.typeset);\n        this.setComponents(this.options.components);\n\n        this.setWidth(this.options.width);\n        this.setHeight(this.options.height);\n    }\n\n    /**\n     * Set the width\n     *\n     * @method setWidth\n     * @param {Number} width\n     */\n    InkPaper.prototype.setWidth = function (width) {\n        if (width > 0) {\n            this._captureCanvas.width = width * this.canvasRatio;\n            this._captureCanvas.style.width = width + 'px';\n            this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n\n            this._renderingCanvas.width = width * this.canvasRatio;\n            this._renderingCanvas.style.width = width + 'px';\n            this._renderingCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        }\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the height\n     *\n     * @method setHeight\n     * @param {Number} height\n     */\n    InkPaper.prototype.setHeight = function (height) {\n        if (height > 0) {\n            this._captureCanvas.height = height * this.canvasRatio;\n            this._captureCanvas.style.height = height + 'px';\n            this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n\n            this._renderingCanvas.height = height * this.canvasRatio;\n            this._renderingCanvas.style.height = height + 'px';\n\n            this._renderingCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n        }\n        this._initRenderingCanvas();\n    };\n\n    /**\n     * Set the network protocol (REST or WebSocket)\n     *\n     * @param {'REST'|'WebSocket'} protocol\n     */\n    InkPaper.prototype.setProtocol = function (protocol) {\n        switch (protocol) {\n            case scope.Protocol.REST:\n                this._selectedRecognizer = this._selectedRESTRecognizer;\n                break;\n            case scope.Protocol.WS:\n                this.setTimeout(-1); // FIXME hack to avoid border issues\n                this._selectedRecognizer = this._selectedWSRecognizer;\n                break;\n            default:\n                throw new Error('Unknown protocol: ' + protocol);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this._lastSentComponentIndex = 0;\n    };\n\n    /**\n     * Get the network protocol (REST or WebSocket)\n     *\n     * @returns {'REST'|'WebSocket'}\n     */\n    InkPaper.prototype.getProtocol = function () {\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            return scope.Protocol.WS;\n        } else {\n            return scope.Protocol.REST;\n        }\n    };\n\n    /**\n     * Set recognition type\n     *\n     * @method setType\n     * @param {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.setType = function (type) {\n        switch (type) {\n            case scope.RecognitionType.TEXT:\n                this._selectedRenderer = this._textRenderer;\n                this._selectedRESTRecognizer = this._textRecognizer;\n                this._selectedWSRecognizer = this._textWSRecognizer;\n                break;\n            case scope.RecognitionType.MATH:\n                this._selectedRenderer = this._mathRenderer;\n                this._selectedRESTRecognizer = this._mathRecognizer;\n                this._selectedWSRecognizer = this._mathWSRecognizer;\n                break;\n            case scope.RecognitionType.SHAPE:\n                this._selectedRenderer = this._shapeRenderer;\n                this._selectedRESTRecognizer = this._shapeRecognizer;\n                break;\n            case scope.RecognitionType.MUSIC:\n                this._selectedRenderer = this._musicRenderer;\n                this._selectedRESTRecognizer = this._musicRecognizer;\n                break;\n            case scope.RecognitionType.ANALYZER:\n                this._selectedRenderer = this._analyzerRenderer;\n                this._selectedRESTRecognizer = this._analyzerRecognizer;\n                break;\n            default:\n                throw new Error('Unknown type: ' + type);\n        }\n        this._instanceId = undefined;\n        this._initialized = false;\n        this._lastSentComponentIndex = 0;\n    };\n\n    /**\n     * Get recognition type\n     *\n     * @method getType\n     * @returns {'TEXT'|'MATH'|'SHAPE'|'MUSIC'|'ANALYZER'} type\n     */\n    InkPaper.prototype.getType = function () {\n        if (this._selectedRenderer instanceof scope.TextRenderer) {\n            return scope.RecognitionType.TEXT;\n        }\n        if (this._selectedRenderer instanceof scope.MathRenderer) {\n            return scope.RecognitionType.MATH;\n        }\n        if (this._selectedRenderer instanceof scope.ShapeRenderer) {\n            return scope.RecognitionType.SHAPE;\n        }\n        if (this._selectedRenderer instanceof scope.MusicRenderer) {\n            return scope.RecognitionType.MUSIC;\n        }\n        if (this._selectedRenderer instanceof scope.AnalyzerRenderer) {\n            return scope.RecognitionType.ANALYZER;\n        }\n        throw new Error('Unknown type');\n    };\n\n    /**\n     * Get the recognition timeout\n     *\n     * @method getTimeout\n     * @returns {Number}\n     */\n    InkPaper.prototype.getTimeout = function () {\n        return this.timeout;\n    };\n\n    /**\n     * Set the recognition timeout\n     *\n     * @method setTimeout\n     * @param {Number} timeout\n     */\n    InkPaper.prototype.setTimeout = function (timeout) {\n        this.timeout = timeout;\n    };\n\n    /**\n     * Set the recognition precision\n     *\n     * @method setPrecision\n     * @param {Number} precision\n     */\n    InkPaper.prototype.setPrecision = function (precision) {\n        this._textRecognizer.setPrecision(precision);\n        this._textWSRecognizer.setPrecision(precision);\n        this._mathRecognizer.setPrecision(precision);\n        this._mathWSRecognizer.setPrecision(precision);\n        this._shapeRecognizer.setPrecision(precision);\n        this._musicRecognizer.setPrecision(precision);\n        this._analyzerRecognizer.setPrecision(precision);\n    };\n\n    /**\n     * Get the default components\n     *\n     * @method getComponents\n     * @return {Array} components\n     */\n    InkPaper.prototype.getComponents = function () {\n        return this.options.components;\n    };\n\n    /**\n     * Set the default components\n     *\n     * @method setComponents\n     * @param {Array} components\n     */\n    InkPaper.prototype.setComponents = function (components) {\n        this.options.components = components;\n        this._initRenderingCanvas();\n    };\n\n\n    /**\n     * Get the application key\n     *\n     * @method getApplicationKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getApplicationKey = function () {\n        return this.applicationKey;\n    };\n\n    /**\n     * Set the application key\n     *\n     * @method setApplicationKey\n     * @param {String} applicationKey\n     */\n    InkPaper.prototype.setApplicationKey = function (applicationKey) {\n        this.applicationKey = applicationKey;\n    };\n\n    /**\n     * Get the HMAC key\n     *\n     * @method getHmacKey\n     * @returns {String}\n     */\n    InkPaper.prototype.getHmacKey = function () {\n        return this.hmacKey;\n    };\n\n    /**\n     * Set the HMAC key\n     *\n     * @method setHmacKey\n     * @param {String} hmacKey\n     */\n    InkPaper.prototype.setHmacKey = function (hmacKey) {\n        this.hmacKey = hmacKey;\n    };\n\n    /**\n     * Set text recognition parameters\n     *\n     * @method setTextParameters\n     * @param {TextParameter} textParameters\n     */\n    InkPaper.prototype.setTextParameters = function (textParameters) {\n        if (textParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in textParameters) {\n                if (textParameters[i] !== undefined) {\n                    this._textRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._textWSRecognizer.getParameters()[i] = textParameters[i]; // Override options\n                    this._analyzerRecognizer.getParameters().getTextParameters()[i] = textParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get text recognition parameters\n     *\n     * @method getTextParameters\n     * @returns {TextParameter} textParameters\n     */\n    InkPaper.prototype.getTextParameters = function () {\n        return this._textRecognizer.getParameters();\n    };\n\n    /**\n     * Set math recognition parameters\n     *\n     * @method setMathParameters\n     * @param {MathParameter} mathParameters\n     */\n    InkPaper.prototype.setMathParameters = function (mathParameters) {\n        if (mathParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in mathParameters) {\n                if (mathParameters[i] !== undefined) {\n                    this._mathRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                    this._mathWSRecognizer.getParameters()[i] = mathParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get math recognition parameters\n     *\n     * @method getMathParameters\n     * @returns {MathParameter} mathParameters\n     */\n    InkPaper.prototype.getMathParameters = function () {\n        return this._mathRecognizer.getParameters();\n    };\n\n    /**\n     * Set shape recognition parameters\n     *\n     * @method setShapeParameters\n     * @param {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.setShapeParameters = function (shapeParameters) {\n        if (shapeParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in shapeParameters) {\n                if (shapeParameters[i] !== undefined) {\n                    this._shapeRecognizer.getParameters()[i] = shapeParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get shape recognition parameters\n     *\n     * @method getShapeParameters\n     * @returns {ShapeParameter} shapeParameters\n     */\n    InkPaper.prototype.getShapeParameters = function () {\n        return this._shapeRecognizer.getParameters();\n    };\n\n    /**\n     * Set music recognition parameters\n     *\n     * @method setMusicParameters\n     * @param {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.setMusicParameters = function (musicParameters) {\n        if (musicParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in musicParameters) {\n                if (musicParameters[i] !== undefined) {\n                    this._musicRecognizer.getParameters()[i] = musicParameters[i]; // Override options\n                }\n            }\n            this._initRenderingCanvas();\n        }\n    };\n\n    /**\n     * Get music recognition parameters\n     *\n     * @method getMusicParameters\n     * @returns {MusicParameter} musicParameters\n     */\n    InkPaper.prototype.getMusicParameters = function () {\n        return this._musicRecognizer.getParameters();\n    };\n\n    /**\n     * Set analyzer recognition parameters\n     *\n     * @method setAnalyzerParameters\n     * @param {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.setAnalyzerParameters = function (analyzerParameters) {\n        if (analyzerParameters) {\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.isStarted = false;\n                this._selectedRecognizer.resetWSRecognition();\n            }\n            for (var i in analyzerParameters) {\n                if (analyzerParameters[i] !== undefined) {\n                    this._analyzerRecognizer.getParameters()[i] = analyzerParameters[i]; // Override options\n                }\n            }\n        }\n    };\n\n    /**\n     * Get analyzer recognition parameters\n     *\n     * @method getAnalyzerParameters\n     * @returns {AnalyzerParameter} analyzerParameters\n     */\n    InkPaper.prototype.getAnalyzerParameters = function () {\n        return this._analyzerRecognizer.getParameters();\n    };\n\n    /**\n     * Set pen parameters\n     *\n     * @method setPenParameters\n     * @param {PenParameters} penParameters\n     */\n    InkPaper.prototype.setPenParameters = function (penParameters) {\n        if (penParameters) {\n            for (var i in penParameters) {\n                if (penParameters[i] !== undefined) {\n                    this._selectedRenderer.getParameters()[i] = penParameters[i]; // Override options\n                }\n            }\n            var params = this._selectedRenderer.getParameters();\n            this._inkGrabber.setParameters(params); // Override options\n            this._textRenderer.setParameters(params); // Override options\n            this._mathRenderer.setParameters(params); // Override options\n            this._shapeRenderer.setParameters(params); // Override options\n            this._musicRenderer.setParameters(params); // Override options\n            this._analyzerRenderer.setParameters(params); // Override options\n        }\n    };\n\n    /**\n     * Get pen parameters\n     *\n     * @method getPenParameters\n     * @returns {PenParameters} penParameters\n     */\n    InkPaper.prototype.getPenParameters = function () {\n        return this._selectedRenderer.getParameters();\n    };\n\n    /**\n     * Enable / disable typeset\n     *\n     * @method setTypeset\n     * @param {Boolean} typeset\n     */\n    InkPaper.prototype.setTypeset = function (typeset) {\n        this._textRenderer.setTypeset(typeset);\n        this._mathRenderer.setTypeset(typeset);\n        this._shapeRenderer.setTypeset(typeset);\n        this._musicRenderer.setTypeset(typeset);\n        this._analyzerRenderer.setTypeset(typeset);\n    };\n\n    /**\n     * Get available languages\n     *\n     * @method getAvailableLanguages\n     * @param {String} [inputMode] input mode\n     */\n    InkPaper.prototype.getAvailableLanguages = function (inputMode) {\n        this._selectedRESTRecognizer.getAvailableLanguageList(\n            this.getApplicationKey(),\n            inputMode ? inputMode : this._textRecognizer.getParameters().getInputMode()\n        ).then(\n            function (data) {\n                this._onResult(data);\n            }.bind(this),\n            function (error) {\n                this._onResult(undefined, error);\n            }.bind(this)\n        );\n    };\n\n    /**\n     * Get the renderer\n     *\n     * @method getRenderer\n     * @returns {AbstractRenderer}\n     */\n    InkPaper.prototype.getRenderer = function () {\n        return this._selectedRenderer;\n    };\n\n    /**\n     * Get the ink capturer\n     *\n     * @method getInkGrabber\n     * @returns {InkGrabber}\n     */\n    InkPaper.prototype.getInkGrabber = function () {\n        return this._inkGrabber;\n    };\n\n    /**\n     * Get the recognizer\n     *\n     * @method getRecognizer\n     * @returns {AbstractRecognizer}\n     */\n    InkPaper.prototype.getRecognizer = function () {\n        return this._selectedRecognizer;\n    };\n\n    /**\n     * Set the change callback\n     *\n     * @method setChangeCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The inkPaper state\n     */\n    InkPaper.prototype.setChangeCallback = function (changeCallback) {\n        this.changeCallback = changeCallback;\n    };\n\n    /**\n     * Set the recognition result callback\n     *\n     * @method setResultCallback\n     * @param {Function} callback callback function\n     * @param {Object} callback.data The recognition result\n     */\n    InkPaper.prototype.setResultCallback = function (callback) {\n        this.resultCallback = callback;\n    };\n\n    /**\n     * Recognize\n     *\n     * @method recognize\n     * @returns {Promise}\n     */\n    InkPaper.prototype.recognize = function () {\n        var input = this.getComponents().concat(this._components);\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            if (this._initialized) {\n                var lastInput = input.slice(this._lastSentComponentIndex);\n\n                if (lastInput.length > 0) {\n                    this._lastSentComponentIndex = input.length;\n                    if (!this.isStarted) {\n                        this.isStarted = true;\n                        this._selectedRecognizer.startWSRecognition(lastInput);\n                    } else {\n                        this._selectedRecognizer.continueWSRecognition(lastInput, this._instanceId);\n                    }\n                } else {\n                    this._renderResult();\n                }\n            }\n        } else {\n            if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n                this._instanceId = undefined;\n            }\n\n            if (input.length > 0) {\n                if (!this.isStarted) {\n                    this._startRESTRecognition(input);\n                } else {\n                    this._continueRESTRecognition(input, this._instanceId);\n                }\n            } else {\n                this._renderResult();\n            }\n        }\n    };\n\n    InkPaper.prototype._startRESTRecognition = function (components) {\n\n        this._instanceId = undefined;\n        this._selectedRecognizer.doSimpleRecognition(\n            this.getApplicationKey(),\n            this._instanceId,\n            components,\n            this.getHmacKey()\n        ).then(\n            function (data) {\n                if (!this.isStarted) {\n                    this.isStarted = true;\n                    this._lastSentComponentIndex = components.length;\n                    this._instanceId = data.getInstanceId();\n                    this._renderResult(data);\n                }\n            }.bind(this),\n            function (error) {\n                this._onResult(undefined, error);\n            }.bind(this)\n        );\n    };\n\n    InkPaper.prototype._continueRESTRecognition = function (components, instanceId) {\n\n        this._selectedRecognizer.doSimpleRecognition(\n            this.getApplicationKey(),\n            instanceId,\n            components,\n            this.getHmacKey()\n        ).then(\n            function (data) {\n                this._lastSentComponentIndex = this._lastSentComponentIndex + components.length;\n                this._renderResult(data);\n            }.bind(this),\n            function (error) {\n                this._onResult(undefined, error);\n            }.bind(this)\n        );\n    };\n\n    InkPaper.prototype._clearRESTRecognition = function (instanceId) {\n\n        if (this._selectedRecognizer instanceof scope.ShapeRecognizer) {\n            this.isStarted = false;\n            this._lastSentComponentIndex = 0;\n            this._selectedRecognizer.clearShapeRecognitionSession(\n                this.getApplicationKey(),\n                instanceId\n            ).then(\n                function (data) {\n                    this._instanceId = undefined;\n                    this._onResult(data);\n                }.bind(this),\n                function (error) {\n                    this._onResult(undefined, error);\n                }.bind(this)\n            );\n        } else {\n            this._onResult();\n        }\n    };\n\n    /**\n     * Return true if you can undo\n     *\n     * @method canUndo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canUndo = function () {\n        return this._components.length > 0;\n    };\n\n    /**\n     * Undo\n     *\n     * @method undo\n     */\n    InkPaper.prototype.undo = function () {\n        if (this.canUndo()) {\n            //Remove the scratched state for Math strokes\n            this._components.forEach(function(stroke){\n                stroke.scratchedStroke = false;\n            });\n            //Remove the latsModel used for Shape\n            this.updatedModel = undefined;\n\n            this._redoComponents.push(this._components.pop());\n\n            this._clearRESTRecognition(this._instanceId);\n\n            this._initRenderingCanvas();\n            this._onChange();\n\n            this.isStarted = false;\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this._selectedRecognizer.resetWSRecognition();\n            } else {\n                clearTimeout(this._timerId);\n                if (this.getTimeout() > -1) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Return true if you can redo\n     *\n     * @method canRedo\n     * @returns {Boolean}\n     */\n    InkPaper.prototype.canRedo = function () {\n        return this._redoComponents.length > 0;\n    };\n\n    /**\n     * Redo\n     *\n     * @method redo\n     */\n    InkPaper.prototype.redo = function () {\n        if (this.canRedo()) {\n            this._components.push(this._redoComponents.pop());\n\n            this._clearRESTRecognition(this._instanceId);\n\n            this._initRenderingCanvas();\n            this._onChange();\n\n            if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n                this.recognize();\n            } else {\n                clearTimeout(this._timerId);\n                this.isStarted = false;\n                if (this.getTimeout() > -1) {\n                    this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n                } else {\n                    this._onResult();\n                }\n            }\n        }\n    };\n\n    /**\n     * Clear the ink paper\n     *\n     * @method clear\n     */\n    InkPaper.prototype.clear = function () {\n        this._components = [];\n        this._redoComponents = [];\n\n        this._clearRESTRecognition(this._instanceId);\n\n        this._initRenderingCanvas();\n        this._onChange();\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            this.isStarted = false;\n            this._selectedRecognizer.resetWSRecognition();\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > -1) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            } else {\n                this._onResult();\n            }\n        }\n    };\n\n    InkPaper.event = {\n        'addDomListener': function (element, useCapture, myfunction) {\n            element.addEventListener(useCapture, myfunction);\n        }\n    };\n\n    /**\n     *\n     * @private\n     * @method _down\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._down = function (x, y, t) {\n        clearTimeout(this._timerId);\n        var sizeChanged = false;\n        if (this._captureCanvas.clientHeight * this.canvasRatio !== this._captureCanvas.height) {\n            alert(this._captureCanvas.clientHeight + ' / ' + this._captureCanvas.height);\n            this._captureCanvas.height = this._captureCanvas.clientHeight * this.canvasRatio;\n            this._renderingCanvas.height = this._renderingCanvas.clientHeight * this.canvasRatio;\n            sizeChanged = true;\n        }\n\n        if (this._captureCanvas.clientWidth * this.canvasRatio !== this._captureCanvas.width) {\n            this._captureCanvas.width = this._captureCanvas.clientWidth * this.canvasRatio;\n            this._renderingCanvas.width = this._renderingCanvas.clientWidth * this.canvasRatio;\n            sizeChanged = true;\n        }\n\n        //Safari trash the canvas content when heigth or width are modified.\n        if (sizeChanged) {\n\n            this._captureCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n            this._renderingCanvas.getContext('2d').scale(this.canvasRatio, this.canvasRatio);\n            this._initRenderingCanvas();\n        }\n\n        if (this.canRedo()) {\n            this._redoComponents = [];\n            this._onChange();\n        }\n\n        this._inkGrabber.startCapture(x, y, t);\n\n\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._move = function (x, y, t) {\n        this._inkGrabber.continueCapture(x, y, t);\n    };\n\n    /**\n     *\n     * @private\n     * @method _move\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Date} [t] timeStamp\n     */\n    InkPaper.prototype._up = function (x, y, t) {\n        this._inkGrabber.endCapture(x, y, t);\n\n        var stroke = this._inkGrabber.getStroke();\n\n        this._inkGrabber.clear();\n        this._selectedRenderer.drawComponent(stroke);\n\n        this._components.push(stroke);\n        this._onChange();\n\n        if (this._selectedRecognizer instanceof scope.AbstractWSRecognizer) {\n            if (!this._selectedRecognizer.isOpen() && !this._selectedRecognizer.isConnecting()) {\n                this._selectedRecognizer.open();\n            } else {\n                this.recognize();\n            }\n        } else {\n            clearTimeout(this._timerId);\n            if (this.getTimeout() > -1) {\n                this._timerId = setTimeout(this.recognize.bind(this), this.getTimeout());\n            }\n        }\n    };\n\n    InkPaper.prototype._onResult = function (data, err) {\n        if (this.resultCallback) {\n            this.resultCallback(data, err);\n        }\n        if (err) {\n            this._element.dispatchEvent(new CustomEvent('error', {detail: err}));\n        } else {\n            this._element.dispatchEvent(new CustomEvent('success', {detail: data}));\n        }\n    };\n\n    InkPaper.prototype._onChange = function () {\n        var data = {\n            canUndo: this.canUndo(),\n            undoLength: this._components.length,\n            canRedo: this.canRedo(),\n            redoLength: this._redoComponents.length\n        };\n\n        if (this.changeCallback) {\n            this.changeCallback(data)\n        }\n        this._element.dispatchEvent(new CustomEvent('changed', {detail: data}));\n    };\n\n    InkPaper.prototype._renderResult = function (data) {\n        this.updatedModel = this._selectedRenderer.drawRecognitionResult(this.getComponents().concat(this._components), data? data.getDocument(): undefined);\n        if (this._selectedRecognizer instanceof scope.MusicRecognizer) {\n            if (this._selectedRecognizer.getParameters().getStaff() instanceof scope.MusicStaff) {\n                this._selectedRenderer.drawStaff(this._selectedRecognizer.getParameters().getStaff());\n            }\n        }\n        this._onResult(data);\n        return data;\n    };\n\n    /**\n     * Set recognition service url\n     *\n     * @param {String} host\n     */\n    InkPaper.prototype.setHost = function (host) {\n        this._textRecognizer.setHost(host);\n        this._textWSRecognizer.setHost(host);\n        this._mathRecognizer.setHost(host);\n        this._mathWSRecognizer.setHost(host);\n        this._shapeRecognizer.setHost(host);\n        this._musicRecognizer.setHost(host);\n        this._analyzerRecognizer.setHost(host);\n    };\n\n    /**\n     * @private\n     */\n    InkPaper.prototype.setSSL = function (ssl) {\n        this._textRecognizer.setSSL(ssl);\n        this._textWSRecognizer.setSSL(ssl);\n        this._mathRecognizer.setSSL(ssl);\n        this._mathWSRecognizer.setSSL(ssl);\n        this._shapeRecognizer.setSSL(ssl);\n        this._musicRecognizer.setSSL(ssl);\n        this._analyzerRecognizer.setSSL(ssl);\n    };\n\n    /**\n     * Tool to attach touch events\n     *\n     * @private\n     * @param {Element} element\n     */\n    InkPaper.prototype._attachListeners = function (element) {\n        var self = this;\n        var pointerId;\n\n        //Desactivation of contextmenu to prevent safari to fire pointerdown only once\n        element.addEventListener(\"contextmenu\", function (e) {\n                                     e.preventDefault();\n                                     e.stopPropagation();\n                                     return false;\n                                 }\n        );\n\n        element.addEventListener('pointerdown', function (e) {\n            if (!pointerId) {\n                pointerId = e.pointerId;\n                e.preventDefault();pointerId\n                var coord = _getCoordinates(e, element);\n                self._down(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointermove', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._move(coord.x, coord.y, coord.t);\n            }\n        }, false);\n\n        element.addEventListener('pointerup', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n\n                pointerId = undefined;\n            }\n        }, false);\n\n        element.addEventListener('pointerleave', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n                pointerId = undefined;\n            }\n        }, false);\n\n        element.addEventListener('pointerout', function (e) {\n            if (pointerId === e.pointerId) {\n                e.preventDefault();\n\n                var coord = _getCoordinates(e, element);\n                self._up(coord.x, coord.y, coord.t);\n                pointerId = undefined;\n            }\n        }, false);\n    };\n\n    InkPaper.prototype._initRenderingCanvas = function () {\n        this._selectedRenderer.clear();\n\n        if (this._selectedRecognizer instanceof scope.MusicRecognizer) {\n            if (this._selectedRecognizer.getParameters().getStaff() instanceof scope.MusicStaff) {\n                this._selectedRenderer.drawStaff(this._selectedRecognizer.getParameters().getStaff());\n            }\n        }\n        if(this._selectedRecognizer instanceof scope.ShapeRecognizer && this.updatedModel){\n            this._selectedRenderer.drawRecognitionResult(this.updatedModel.components, this.updatedModel.document);\n        } else {\n            this._selectedRenderer.drawComponents(this.getComponents().concat(this._components));\n        }\n    };\n\n    /**\n     *\n     * @param message\n     * @param error\n     * @returns {boolean} false no immediate replay needed, true when the call need to be replay ASAP\n     * @private\n     */\n    InkPaper.prototype._handleMessage = function (message, error) {\n        var replayNeeded = false;\n        if (error) {\n            replayNeeded = true;\n            this._instanceId = undefined;\n            this.isStarted = false;\n            this._lastSentComponentIndex = 0;\n            this._onResult(undefined, error);\n        }\n\n        if (message) {\n            switch (message.type) {\n                case 'open':\n                    this._selectedWSRecognizer.initWSRecognition(this.getApplicationKey());\n                    break;\n                case 'hmacChallenge':\n                    this._selectedWSRecognizer.takeUpHmacChallenge(this.getApplicationKey(), message.getChallenge(), this.getHmacKey());\n                    break;\n                case 'init':\n                    this.isStarted = false;\n                    this._initialized = true;\n                    this._instanceId = undefined;\n                    this._lastSentComponentIndex = 0;\n                    this.recognize();\n                    break;\n                case 'reset':\n                    this.isStarted = false;\n                    this._instanceId = undefined;\n                    this._lastSentComponentIndex = 0;\n                    this.recognize();\n                    break;\n                case 'close':\n                    this._initialized = false;\n                    this._instanceId = undefined;\n                    this._lastSentComponentIndex = 0;\n                    break;\n                default:\n                    this.isStarted = true;\n                    if (!this._instanceId) {\n                        this._instanceId = message.getInstanceId();\n                    }\n                    this._renderResult(message);\n                    break;\n            }\n        }\n        return replayNeeded;\n    };\n\n    /**\n     * Return the stats allowing to monitor what ink size is send to the server.\n     * @returns Stats objects format {strokesCount : 0, pointsCount : 0, byteSize : 0, humanSize : 0, humanUnit : 'BYTE'} humanUnit could have the values BYTE, BYTES, KiB, MiB\n     */\n    InkPaper.prototype.getStats = function () {\n        var stats = {strokesCount: 0, pointsCount: 0, byteSize: 0, humanSize: 0, humanUnit: 'BYTE'};\n        if (this._components) {\n            stats.strokesCount = this._components.length;\n            var pointsCount = 0;\n            for (var strokeNb = 0; strokeNb < this._components.length; strokeNb++) {\n                pointsCount = pointsCount + this._components[strokeNb].x.length;\n            }\n            stats.strokesCount = this._components.length;\n            stats.pointsCount = pointsCount;\n            //We start with 270 as it is the size in bytes. Make a real computation implies to recode a doRecogntion\n            var byteSize = 270;\n            byteSize = JSON.stringify(this._components).length;\n            stats.byteSize = byteSize;\n            if (byteSize < 270) {\n                stats.humanUnit = 'BYTE';\n                stats.byteSize = 0;\n                stats.humanSize = 0;\n            } else if (byteSize < 2048) {\n                stats.humanUnit = 'BYTES';\n                stats.humanSize = byteSize;\n            } else if (byteSize < 1024 * 1024) {\n                stats.humanUnit = 'KiB';\n                stats.humanSize = (byteSize / 1024).toFixed(2);\n            } else {\n                stats.humanUnit = 'MiB';\n                stats.humanSize = (byteSize / 1024 / 1024).toFixed(2);\n            }\n        }\n        return stats;\n    };\n\n    /**\n     *\n     * @param marginX the horizontal margin to apply (by default 10)\n     * @param marginY the vertical margin to apply (by default 10)\n     * @returns {ImageData} Build an ImageData object with content shrink to border of strokes.\n     * @private\n     */\n    InkPaper.prototype.getInkAsImageData = function (marginX, marginY) {\n        //Remove the scratched strokes\n        var componentCopy = [];\n        this._components.forEach(function(stroke) {\n                                     if (stroke.scratchedStroke !== true) {\n                                         componentCopy.push(stroke);\n                                     }\n                                 }\n        );\n\n        if (!marginX) {\n            marginX = 10;\n        }\n        if (!marginY) {\n            marginY = 10;\n        }\n\n        if (componentCopy && componentCopy.length > 0) {\n            var updatedStrokes;\n            var strokesCount = componentCopy.length;\n            //Initializing min and max\n            var minX = componentCopy[0].x[0];\n            var maxX = componentCopy[0].x[0];\n            var minY = componentCopy[0].y[0];\n            var maxY = componentCopy[0].y[0];\n\n            // Computing the min and max for x and y\n            for (var strokeNb = 0; strokeNb < componentCopy.length; strokeNb++) {\n                var pointCount = componentCopy[strokeNb].x.length;\n                for (var pointNb = 0; pointNb < pointCount; pointNb++) {\n                    var currentX = componentCopy[strokeNb].x[pointNb];\n                    var currentY = componentCopy[strokeNb].y[pointNb];\n                    if (currentX < minX) {\n                        minX = currentX;\n                    }\n                    if (currentX > maxX) {\n                        maxX = currentX;\n                    }\n                    if (currentY < minY) {\n                        minY = currentY;\n                    }\n                    if (currentY > maxY) {\n                        maxY = currentY;\n                    }\n                }\n            }\n            var nonDisplayCanvas = document.createElement('canvas');\n            nonDisplayCanvas.width = (maxX ) + (2 * marginX);\n            nonDisplayCanvas.height = (maxY ) + (2 * marginY)\n\n            var ctx = nonDisplayCanvas.getContext(\"2d\");\n\n            var imageRendered = new scope.ImageRenderer(ctx);\n            imageRendered.drawComponents(componentCopy, ctx);\n\n            // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData\n            return ctx.getImageData(minX - marginX, minY - marginY, (maxX - minX ) + (2 * marginX), (maxY - minY ) + (2 * marginY));\n        }\n    };\n\n    /**\n     *\n     * @param marginX the horizontal margin to apply (by default 10)\n     * @param marginY the vertical margin to apply (by default 10)\n     * @returns {String} Build an String containg dataUrl with content shrink to border of strokes.\n     * @private\n     */\n    InkPaper.prototype.getInkAsPng = function (marginX, marginY) {\n        var imageRenderingCanvas = document.createElement('canvas');\n        imageRenderingCanvas.style.display = 'none';\n\n        var imageDataToRender = this.getInkAsImageData();\n        imageRenderingCanvas.width = imageDataToRender.width;\n        imageRenderingCanvas.style.width = imageDataToRender.width + 'px';\n        imageRenderingCanvas.height = imageDataToRender.height;\n        imageRenderingCanvas.style.height = imageDataToRender.height + 'px';\n        var ctx = imageRenderingCanvas.getContext('2d');\n        ctx.putImageData(imageDataToRender, 0, 0);\n        return imageRenderingCanvas.toDataURL(\"image/png\");\n    };\n\n    /**\n     * Tool to create canvas\n     *\n     * @private\n     * @param {Element} parent\n     * @param {String} id\n     * @returns {Element}\n     */\n    function _createCanvas(parent, id) {\n        var count = document.querySelectorAll('canvas[id^=' + id + ']').length;\n        var canvas = document.createElement('canvas');\n        canvas.id = id + '-' + count;\n        parent.appendChild(canvas);\n        return canvas;\n    }\n\n    /**\n     * Tool to get canvas ratio (retina display)\n     *\n     * @private\n     * @param {Element} canvas\n     * @returns {Number}\n     */\n    function _getCanvasRatio(canvas) {\n        if (canvas) {\n            var context = canvas.getContext('2d'),\n                devicePixelRatio = window.devicePixelRatio || 1,\n                backingStoreRatio = context.webkitBackingStorePixelRatio ||\n                    context.mozBackingStorePixelRatio ||\n                    context.msBackingStorePixelRatio ||\n                    context.oBackingStorePixelRatio ||\n                    context.backingStorePixelRatio || 1;\n            return devicePixelRatio / backingStoreRatio;\n        }\n        return 1;\n    }\n\n\n    /**\n     * Tool to get proper coordinates\n     *\n     * @private\n     * @param {Event} e\n     * @param {Element} element\n     * @returns {Object}\n     */\n    function _getCoordinates(e, container) {\n        if (e.changedTouches) e = e.changedTouches[0];\n        var rect = container.getBoundingClientRect();\n        return {\n            x: e.clientX - rect.left - container.clientLeft,\n            y: e.clientY - rect.top - container.clientTop,\n            t: e.timeStamp\n        };\n    }\n\n    // Export\n    scope.InkPaper = InkPaper;\n})(MyScript);\n"],"sourceRoot":"/source/"}